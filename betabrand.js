angular.module('bbException', []).factory('$exceptionHandler', ['$log', function($log) {
    return function(exception, cause) {
        // call NewRelic error reporting if available, otherwise default to console log.
        if (typeof NREUM !== "undefined") {
            NREUM.noticeError(exception)
        }
        $log.error(exception, cause)
    }
}]);

// I provide an injectable (and exteded) version of the underscore / lodash lib.
angular.module('bbLodash', []).factory(
    "_",
    function($window) {

        // Get a local handle on the global lodash reference.
        var _ = $window._

        // OPTIONAL: Sometimes I like to delete the global reference to make sure
        // that no one on the team gets lazy and tried to reference the library
        // without injecting it. It's an easy mistake to make, and one that won't
        // throw an error (since the core library is globally accessible).
        // ALSO: See .run() block above.
        delete($window._)


        // ---
        // CUSTOM LODASH METHODS.
        // ---


        // I return the given collection as a natural language list.
        _.naturalList = function(collection) {

            if (collection.length > 2) {

                var head = collection.slice(0, -1)
                var tail = collection[collection.length - 1]

                return (head.join(", ") + ", and " + tail)

            }

            if (collection.length === 2) {

                return (collection.join(" and "))

            }

            if (collection.length) {

                return (collection[0])

            }

            return ("")

        }


        // Return the [formerly global] reference so that it can be injected
        // into other aspects of the AngularJS application.
        return (_)

    }
)
angular.module('bbLogging', [])
    .factory('LoggingService', ['$http', '$window', function($http, $window) {
        function LoggingService() {
            var self = this

            //type one of: debug, support, checkout
            self.serverSideLog = function(data, type) {
                type = type || "debug"

                //disable this for valve launch
                // var request = $http({
                //         method: "POST",
                //         url: "/api/rest/log/",
                //         data: {"type":type, "data":data}
                //     }).success(function(data){

                //     }).error(function (data){

                //     })
            }


            self.clientDebugLog = function(data, title) {
                var ua = $window.navigator.userAgent
                console.log("------start " + title + "------")
                console.log("Time:", new Date)
                console.log("User Agent:", ua)
                console.log(data)
                console.log("------end " + title + "------")
            }
        }

        return new LoggingService();
    }])

angular.module('bbPopups', []).factory('PopupsService', ['$http', '$log', '$q', '$location', 'OptimizelyService', '_',
    function($http, $log, $q, $location, OptimizelyService, _) {

        function PopupsService() {

            var self = this
            self.customModal = false;

            self.createPopup = function(data) {
                return $http({
                    method: "post",
                    url: "/api/rest/popups/create",
                    data: data
                })
            }

            self.updatePopup = function(data) {
                return $http({
                    method: "put",
                    url: "/api/rest/popups/update/",
                    data: data
                })
            }

            self.getPopups = function() {
                return $http({
                    method: "get",
                    url: "/api/rest/popups/all"
                })
            }

            self.getPopupForUrl = function(url) {
                var deferred = $q.defer();

                var referrer = document.referrer;

                $http({
                    method: "get",
                    url: "/api/rest/popups/all?url=" + encodeURIComponent(url) + "&referrer=" + encodeURIComponent(referrer)
                }).then(
                    function(response) {
                        var source = $location.search().utm_source
                        var optimizelyId = OptimizelyService.handle('getPopupId');
                        if (optimizelyId && response.data) {
                            var popup = _.filter(response.data, function(p) {
                                return p.id == optimizelyId
                            })
                            if (popup && popup.length)
                                self.customModal = popup[0];
                        } else {
                            for (var x = 0; x < response.data.length; x++) {
                                var popup = response.data[x];
                                if (popup.utmSource && popup.utmSource.indexOf(source) > -1) {
                                    self.customModal = popup;
                                    break;
                                }
                                if (!popup.utmSource)
                                    self.customModal = popup;
                            }
                        }

                        deferred.resolve(self.customModal)
                    },
                    function() {
                        deferred.reject()
                    }
                );

                return deferred.promise
            }
        }

        return new PopupsService()
    }
]);

angular.module("bbThinkTank", [])
    .factory('ThinkTankService', ['$http', '$q',
        function($http, $q) {

            function ThinkTankService() {

                var self = this

                self.hasPrefilteredGender = false

                self.getConfig = function() {
                    var deferred = $q.defer()
                    $http
                        .get('/js/json/thinktank.json')
                        .success(function(data) {
                            deferred.resolve(data)
                        })
                        .error(function(data) {
                            deferred.reject(data)
                        })
                    return deferred.promise
                }

                self.getSubmissions = function(customerId, publishedOnly, tag) {
                    //Defaults
                    customerId = customerId || 'all'
                    tag = (tag) ? '?tags=' + tag : ''
                    publishedOnly = typeof(publishedOnly !== "undefined") ? publishedOnly : true
                    var showUnpublished = (publishedOnly) ? '' : 'unpublished/'

                    var endpoint = '/api/rest/thinktank/submissions/' + showUnpublished + customerId + tag

                    return $http({
                        method: "get",
                        url: endpoint,
                        cache: true
                    })
                }

                self.getSubmissionsById = function(ids) {
                    // Defaults
                    if (typeof ids == "string" || typeof ids == "number") {
                        ids = [ids]
                    }

                    ids = (ids || [])

                    var endpoint = '/api/rest/thinktank/submissionsbyid/all/?id[]=' + ids.join("&id[]=")

                    return $http({
                        method: "GET",
                        url: endpoint
                    })
                }

                self.getDesign = function(designId, isVisible) {
                    var showUnpublished = isVisible ? '' : 'unpublished/';
                    return $http({
                        method: "get",
                        url: '/api/rest/thinktank/submission/' + showUnpublished + designId
                    })
                }

                self.saveDesign = function(data) {
                    return $http({
                        method: "post",
                        data: data,
                        url: "/api/rest/thinktank/submit/"
                    })
                }

                self.updateDesign = function(data) {
                    return $http({
                        method: "put",
                        data: data,
                        url: "/api/rest/thinktank/update/"
                    })
                }

                self.vote = function(id) {
                    return $http({
                        method: "POST",
                        url: "/api/rest/votes/create",
                        data: {
                            'id': id,
                            'type': 'submission'
                        }
                    })
                }

                self.getVoteCount = function(id) {
                    return $http({
                        method: "GET",
                        url: "/api/rest/votes/counts/submission/" + id,
                        data: {
                            'id': id,
                            'type': 'submission'
                        }
                    })
                }
            }

            return new ThinkTankService()
        }
    ]);

/**
 * Loads the tinyMce library dynamically. It's big, so we don't want to load it on every page.
 * 
 */
angular.module('tinyMce', [])
    .factory("initTinyMce", ['$q', '$timeout',
        function($q, $timeout) {
            return function() {
                var deferred = $q.defer();

                var scripts = document.getElementsByTagName("script");
                var loaded = false
                for (var i = 0; i < scripts.length; i++)
                    if (scripts[i].getAttribute('src') == "/angular/bower_components/tinymce-dist/tinymce.min.js") loaded = true;

                if (loaded) {
                    deferred.resolve({});
                    return deferred.promise
                }

                //Load the editor script dynamically 
                var script = document.createElement('script');
                script.src = '/angular/bower_components/tinymce-dist/tinymce.min.js';
                document.body.appendChild(script);
                script.onload = script.onreadystatechange = function(e) {
                    if (script.readyState && script.readyState !== 'complete' && script.readyState !== 'loaded') {
                        return;
                    }

                    $timeout(function() {
                        tinymce.PluginManager.add('bbImages', function(editor, url) {
                            // Add a button that opens a window
                            editor.addButton('bbImages', {
                                text: 'Image',
                                icon: false,
                                ontouchend: function() {
                                    //Works on mobile - upload dialogue wasn't appearing with onclick events.
                                    if (Modernizr.touch) {
                                        document.getElementById(editor.id + '-uploader').click();
                                    }
                                },
                                onclick: function() {
                                    var tinyMceUploader = document.getElementById(editor.id + '-uploader')
                                    $timeout(function() {
                                        if (typeof tinyMceUploader.click == 'function') {
                                            tinyMceUploader.click()
                                        } else if (typeof tinyMceUploader.onclick == 'function') {
                                            tinyMceUploader.onclick()
                                        }
                                    }, 0);

                                }
                            });

                            //Add a hidden image upload element
                            var uploader = angular.element("<input id='" + editor.id + "-uploader' type='file' name='pic' accept='image/*' class='ng-hide'>")
                            uploader.bind("change", function(event) {
                                file = event.target.files[0]
                                fr = new FileReader()
                                fr.onload = function() {
                                    editor.insertContent('<img src="' + fr.result + '"/>')
                                }
                                fr.readAsDataURL(file)
                            })
                            angular.element(document.body).append(uploader)
                        });
                        deferred.resolve(e);
                    });
                };
                script.onerror = function(e) {
                    $timeout(function() {
                        deferred.reject(e);
                    });
                };

                return deferred.promise
            }
        }
    ]);

angular.module('varnish', []).
factory('VarnishCacheInterceptor', ['$log', function($log) {
    function VarnishCacheInterceptor() {
        var self = this

        self.perClientRoutes = []

        self.request = function(config) {
            angular.forEach(self.perClientRoutes, function(url) {
                var regexUrl = url
                    //replace :variables with a regex
                regexUrl = regexUrl.replace(/(:[^/]+)/g, "[^/]+")
                var re = new RegExp("^/api/rest" + regexUrl + "/*$", "i")
                if (config.url.match(re)) {
                    config.headers['X-Ng-CacheType'] = 'per-client';
                    $log.debug("[Varnish] Added Per-client Header:", config.url, re)
                }
            })

            return config;
        }
    }
    return new VarnishCacheInterceptor();
}]).
config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('VarnishCacheInterceptor')
}]).
run(function($http, $log, VarnishCacheInterceptor, APP_CONFIG) { // instance-injector

    //if the config data loaded correctly, lets use the app_config constant
    if (APP_CONFIG && 'perClientRoutes' in APP_CONFIG) {
        $log.debug("[VARNISH] Using constants", APP_CONFIG)
        VarnishCacheInterceptor.perClientRoutes = APP_CONFIG.perClientRoutes
    } else {
        //else we need to ask the api for them
        $http({
            method: "get",
            url: "/api/rest/varnish/perclient/",
        }).success(
            function(response) {
                VarnishCacheInterceptor.perClientRoutes = response.routes
                $log.debug("[Varnish] Per-client routes loaded", response.routes)
            }
        ).error(
            function(response) { $log.debug("[Varnish] Per-client routes failed to load", response) }
        )
    }

});


//# sourceMappingURL=betabrand_components.js.map

'use strict'

var BetabrandApp = angular.module('BetabrandApp', [
        'templates',
        'error',
        'forceRefresh',
        'varnish',
        'ngRoute',
        'ngTouch',
        'facebook',
        'ngSanitize',
        'ngAnimate',
        'ngCookies',
        'ngKookies', // temp solution for persistent cookies
        'ngMessages',
        'angularModalService',
        'duScroll',
        'ngTagsInput',
        'ngClipboard',
        'angularFileUpload',
        'vcRecaptcha',
        'cfp.hotkeys',
        'RecursionHelper',
        'angular-inview',
        'bbPopups',
        'bbLodash',
        'bbLogging',
        'bbException',
        'afkl.lazyImage',
        'bbThinkTank',
        'ui.tinymce',
        'tinyMce',
        'angucomplete-alt',
        'angular-szn-autocomplete',
        'bbCommunication',
        'bbAnalytics',
        'oc.lazyLoad',
        '720kb.tooltips',
        'angular-sticky-box',
        'algoliasearch',
        'growlNotifications',
        'angularUtils.directives.dirPagination',
        'ui.bootstrap',
        angularDragula(angular)
    ])
    .constant('FBAppId', '186514391432562')
    .config(function($routeProvider, $locationProvider, $facebookProvider, $logProvider, ngClipProvider, $sceDelegateProvider, FBAppId) {

        // activate angular debug logging if cookie is set (getting cookie manually, cookie module unavailable in config)
        var cookies = " " + document.cookie
        var parts = cookies.split(" " + "DEBUG" + "=")
        var debug = (parts.length == 2) && ((parts.pop().split("").shift()) == 1) ? true : false

        $logProvider.debugEnabled(debug)

        ngClipProvider.setPath("/angular/bower_components/zeroclipboard/dist/ZeroClipboard.swf")

        $routeProvider
            .when('/category/favorites.html', {
                controller: 'HomepageController',
                templateUrl: '/angular/app/homepage/homepage.html',
                title: 'Betabrand - Crowdsourced designs. Crowdfunded to life. New ideas, nonstop.',
                reloadOnSearch: false
            })
            .when('/returns', {
                controller: 'ReturnsController as vm',
                templateUrl: '/angular/app/returns/returns.html',
                title: 'Betabrand - Returns',
                reloadOnSearch: false
            })
            .when('/returns/order/:incrementId/email/:customerEmail', {
                controller: 'ReturnsController as vm',
                templateUrl: '/angular/app/returns/returns.html',
                title: 'Betabrand - Returns',
                reloadOnSearch: false
            })
            .when('/returns/token/:returnToken', {
                controller: 'ReturnsController as vm',
                templateUrl: '/angular/app/returns/returns.html',
                title: 'Betabrand - Returns',
                reloadOnSearch: false
            })
            .when('/returns/order/:incrementId/token/:returnToken', {
                controller: 'ReturnsController as vm',
                templateUrl: '/angular/app/returns/returns.html',
                title: 'Betabrand - Returns',
                reloadOnSearch: false
            })
            .when('/search', {
                controller: 'SearchController as vm',
                templateUrl: '/angular/app/search/search.html',
                title: 'Betabrand - Crowdsourced designs. Crowdfunded to life. New ideas, nonstop.',
                reloadOnSearch: false
            })
            .when('/cart/checkout', {
                controller: 'CheckoutController as vm',
                templateUrl: '/angular/app/checkout/checkout.html',
                title: 'Betabrand - Checkout',
                resolve: {
                    checkout: function(CheckoutService) {
                        return CheckoutService.initialize()
                    },
                    cart: function(CartService) {
                        return CartService.getCartData()
                    }
                }
            })
            .when('/cart/checkout/paypal/', {
                controller: 'CheckoutController',
                templateUrl: '/angular/app/checkout/checkout-paypal.html',
                title: 'Betabrand - Checkout With Paypal',
                controllerAs: 'vm',
                resolve: {
                    checkout: function(CheckoutService) {
                        return CheckoutService.initialize()
                    }
                }
            })
            .when('/cart/checkout/success/:orders/:hashes', {
                controller: 'CheckoutSuccessController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/checkout/checkout-success.html',
                title: 'Betabrand - Order Confirmation'
            })
            .when('/modelcitizen', {
                controller: 'ModelCitizenController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/modelcitizen/modelcitizen.html',
                title: 'Betabrand - Model Citizen Program - Upload a photo, get a discount!',
                resolve: {
                    takeover: ["ModelCitizenService", function(ModelCitizenService) {

                        // Find model citizen id if there is one
                        var m = window.location.search.match(/m=(\d+)/)

                        if (m) {
                            return ModelCitizenService.getModelCitizen(m[1])
                        } else {
                            return false
                        }

                    }]
                }
            })
            .when('/referrals/landing/friend', {
                controller: 'CategoryController as vm',
                templateUrl: '/angular/app/category/category.html',
                title: 'Betabrand - Crowdsourced designs. Crowdfunded to life. New ideas, nonstop.',
                categoryId: 99,
                resolve: {
                    category: function(CategoryService) {
                        return CategoryService.getCategory(99)
                    },
                    products: function(ProductService) {
                        return ProductService.getProductsForCategoryId(99)
                    }
                }
            })
            .when('/think-tank.html', {
                controller: 'ThinkTankController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/thinktank/thinktank.html',
                title: 'Betabrand - Think Tank',
                categoryId: 67,
                reloadOnSearch: false,
                resolve: {
                    submissions: ["ThinkTankService", "$q", "_", function(ThinkTankService, $q, _) {
                        var deferred = $q.defer();
                        ThinkTankService.getSubmissions('all', true, false).then(function(response) {
                            deferred.resolve({
                                "data": _.filter(response.data, function(s) {
                                    return s.state == "published" || s.state == "greenlit"
                                })
                            })
                        })
                        return deferred.promise
                    }]
                }
            })
            .when('/think-tank/vote.html', {
                redirectTo: "/think-tank.html"
            })
            .when('/idea/:submissionId', {
                controller: 'SubmissionController',
                templateUrl: '/angular/app/submission/submission.html',
                title: 'Betabrand - Idea'
            })
            .when('/how-it-works', {
                controller: 'HowItWorksController',
                templateUrl: '/angular/app/thinktank/how-it-works.html',
                title: 'Betabrand - Think Tank - How It Works'
            })
            .when('/submission/', {
                controller: 'SubmissionLandingController',
                controllerAs: 'submission',
                templateUrl: '/angular/app/thinktank/submission/submission-form.html',
                title: 'Betabrand - Think Tank - Submit Your Idea',
                resolve: {
                    tinyMce: function(initTinyMce) {
                        return initTinyMce()
                    }
                }
            })
            .when('/submission/edit/:id', {
                controller: 'SubmissionLandingController',
                controllerAs: 'submission',
                templateUrl: '/angular/app/thinktank/submission/submission-form.html',
                title: 'Betabrand - Think Tank - Submit Your Idea',
                resolve: {
                    tinyMce: function(initTinyMce) {
                        return initTinyMce()
                    }
                }
            })
            .when('/shop', {
                controller: 'CategoryController as vm',
                templateUrl: '/angular/app/category/category.html',
                reloadOnSearch: false,
                categoryId: 99,
                resolve: {
                    category: function(CategoryService) {
                        return CategoryService.getCategory(99)
                    },
                    products: function(ProductService) {
                        return ProductService.getProductsForCategoryId(99)
                    }
                }
            })
            .when('/recommended', {
                controller: 'RecommendationsController as vm',
                templateUrl: '/angular/app/personalization/category.html',
                reloadOnSearch: false,
                resolve: {
                    products: ['SailthruService', 'APP_CONFIG', function(SailthruService, APP_CONFIG) {
                        var sectionId = APP_CONFIG.spmConfig && APP_CONFIG.spmConfig.shopSectionId ? APP_CONFIG.spmConfig.shopSectionId : "";
                        return SailthruService.getRecommendations(sectionId)
                    }]
                }
            })
            .when('/404', {
                controller: 'NotFoundController',
                templateUrl: '/angular/app/pages/404.html',
                title: 'Betabrand - This Is Not The Page You Are Looking For'
            })
            .when('/customer/account', {
                // There are legacy URLs that are pointing to an old account url from outside of our app.  This should catch them.
                redirectTo: '/account/dashboard'
            })
            .when('/collections/dress-pant-yoga-pants-collection.html', {
                controller: 'CategoryController as vm',
                templateUrl: '/angular/app/category/special/category-dpyp.html',
                categoryId: 88,
                resolve: {
                    category: function(CategoryService) {
                        return CategoryService.getCategory(88)
                    },
                    products: function(ProductService) {
                        return ProductService.getProductsForCategoryId(88)
                    }
                }
            })
            .when('/valve.html', {
                controller: 'ThinkTankController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/thinktank/valve.html',
                title: "Valve CS:GO Collection | Betabrand",
                tag: "valve",
                reloadOnSearch: false
            })
            .when('/think-tank/valve.html', {
                controller: 'ThinkTankController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/thinktank/valve.html',
                title: "Valve CS:GO Collection | Betabrand",
                tag: "valve",
                reloadOnSearch: false
            })
            .when('/think-tank/timberland.html', {
                controller: 'ThinkTankController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/thinktank/custom/timberland/timberland.html',
                title: "Timberland | Betabrand",
                tag: "timberland",
                reloadOnSearch: false
            })
            .when('/think-tank/:submissionId/stats.html', {
                controller: 'SubmissionStatsController',
                templateUrl: '/angular/app/submission/stats/stats.html',
                title: "Stats",
                reloadOnSearch: false
            })
            .when('/poll/:pollId', {
                controller: 'PollsPageController as vm',
                templateUrl: '/angular/app/polls/pollpage.html',
                title: 'Betabrand | Poll'
            })
            .when('/r/:advocateId', {
                controller: 'CategoryController as vm',
                templateUrl: '/angular/app/category/category.html',
                categoryId: 99,
                reloadOnSearch: false,
                resolve: {
                    category: function(CategoryService) {
                        return CategoryService.getCategory(99)
                    },
                    products: function(ProductService) {
                        return ProductService.getProductsForCategoryId(99)
                    }
                }
            })
            .when('/referrals/landing/about/', {
                controller: 'ReferralsController',
                templateUrl: '/angular/app/referrals/referrals-page.html',
                title: 'Betabrand - Referral Program - Refer Friends and Earn'
            })
            .when('/referrals/landing/about/email/:email/product/:productId/method/:method/source/:source', {
                controller: 'ReferralsController',
                templateUrl: '/angular/app/referrals/referrals-form.html',
                title: 'Betabrand - Referral Program - Refer Friends and Earn'
            })
            .when('/referrals/landing/advocate/', {
                controller: 'CategoryController as vm',
                templateUrl: '/angular/app/category/category.html',
                categoryId: 99,
                reloadOnSearch: false,
                resolve: {
                    category: function(CategoryService) {
                        return CategoryService.getCategory(99)
                    },
                    products: function(ProductService) {
                        return ProductService.getProductsForCategoryId(99)
                    }
                }
            })
            .when('/community-features', {
                controller: 'CommunityFeaturesController',
                controllerAs: 'community',
                templateUrl: '/angular/app/pages/community-features.html',
                reloadOnSearch: false
            })
            .when('/mc-uploader', {
                controller: 'ModelCitizenUploaderController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/modelcitizen/model-citizen-uploader.html'
            })
            .when('/weekly-contest', {
                controller: 'ModelCitizenController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/modelcitizen/modelcitizen-dpyp-test.html',
                resolve: {
                    takeover: function() {
                        return false
                    }
                }
            })
            .when('/categories/:queries', {
                controller: "CategoryController as vm",
                templateUrl: "/angular/app/category/category.html",
                reloadOnSearch: false,
                resolve: {
                    category: ["$location", "$route", function($location, $route) {
                        return {
                            shopSection: "Category",
                            key: $location.path(),
                            logo: null,
                            name: $route.current.params.queries.split("+").join(" &amp; ")
                        }
                    }],
                    products: ["$location", "algolia", "APP_CONFIG", "$route", "$q", "_", function($location, algolia, APP_CONFIG, $route, $q, _) {
                        var deferred = $q.defer();

                        var client = algolia.Client(APP_CONFIG.algoliaAppId, APP_CONFIG.algoliaApiKey)
                        var queries = $route.current.params.queries.split("+")
                        var request = []
                        var extension = $location.absUrl().indexOf(".io") > 0 ? ".io" : ".com"

                        angular.forEach(queries, function(query) {
                            request.push({
                                indexName: "products",
                                "query": query,
                                params: {
                                    hitsPerPage: 100,
                                }
                            })
                        })

                        client.search(request).then(function(response) {
                            var products = []
                            _.each(response.results, function(queryResult) {
                                _.each(queryResult.hits, function(product) {
                                    product.id = parseInt(product.objectID)
                                    product.url = product.canonicalUrl.replace(".com", extension)
                                    products.push(product)
                                })
                            })
                            deferred.resolve(_.uniq([].concat.apply([], products), 'id'))
                        })
                        return deferred.promise
                    }]
                }
            })
            .otherwise({
                controller: function($scope, $routeParams, $controller, LookupService) {
                    /* this creates a child controller which, if served as it is, should accomplish your goal behaving as the actual controller (params.dashboardName + "Controller") */
                    if (typeof LookupService.controller == "undefined" || LookupService.controller.length == 0)
                        return

                    $controller(LookupService.controller + " as vm", { $scope: $scope })
                    delete LookupService.controller
                },
                template: '<div ng-include="vm.templateUrl"></div>',
                reloadOnSearch: false,
                resolve: {
                    lookupResolve: function(initLookupResolve) {
                        return initLookupResolve.getData()
                    },
                    tinyMce: function(initTinyMce) {
                        return initTinyMce()
                    }
                }

            })

        $sceDelegateProvider.resourceUrlWhitelist(['self', '*://www.youtube.com/**', '*://player.vimeo.com/video/**', '*://www.whiplashmerch.com/**']);

        $locationProvider.html5Mode(true)

        $facebookProvider.init({
            appId: FBAppId,
            version: 'v2.7',
            status: true, // check login status
            cookie: true, // enable cookies to allow the server to access the session
            xfbml: true // parse XFBML
        }, false)
        window.betabrand.timing.flag('appInitialized')
        window.performance.mark("appInitialized")
    })
    .controller('AppController', ['$scope', '$timeout', '$interval', '$window', '$rootScope', '$location', '$route', '$kookies', '$http', '$log', 'LookupService', 'ModalService', 'PageService', 'ReferralsService', 'NotificationsService', 'CustomerService', 'CartService', 'CheckoutService', 'SearchService', 'ProductService', 'OptimizelyService', '$cacheFactory', 'TrackingService', '_', 'AssetService', 'APP_CONFIG',
        function($scope, $timeout, $interval, $window, $rootScope, $location, $route, $kookies, $http, $log, LookupService, ModalService, PageService, ReferralsService, NotificationsService, CustomerService, CartService, CheckoutService, SearchService, ProductService, OptimizelyService, $cacheFactory, TrackingService, _, AssetService, APP_CONFIG) {

            var vm = this
            this.nonEssentialScriptsLoaded = false

            // activate test for prerender
            $rootScope.staticked = navigator.userAgent.match(/Prerender/) ? true : false;
            $rootScope.statickedCount = 9999;

            //grab a frontend cookie
            $http.post('/varnish/cache/gifCookie').success(function() { $log.debug('frontend cookie acquired') })

            //Load one of 3 combined font files based on browser capability
            AssetService.loadOptimizedFont({
                "ttf": "/angular/css/ttf.css",
                "woff": "/angular/css/woff.css",
                "woff2": "/angular/css/woff2.css"
            })
            vm.PageService = PageService
            vm.CartService = CartService
            vm.isMobile = true
                //Setting up a container for optimizely tests and including their snippet
            angular.optimizely = {}
            $rootScope.mobileBuybar = false
                // ugly way of detecting if we're on POS. We may want to use the config service for that
            $rootScope.isPOS = $location.host().match(/^pos\./) ? true : false
            vm.isSafari = navigator.vendor != undefined && navigator.vendor.indexOf("Apple") == 0 && /\sSafari\//.test(navigator.userAgent)
                //load query params
            var params = $location.search()
            var campaignData = params.utm_campaign + "," + params.utm_source + "," + params.utm_medium + "," + params.utm_term + ',' + params.nan_pid + ',' + Date()
                //store the most recent set of data
            $kookies.set('betabrand-campaign-last', campaignData, { expires: 365, path: '/' })
                //if campaign is set, store a session cookie
            if (params.utm_campaign !== undefined) {
                $kookies.set('betabrand-campaign-session', campaignData, { path: '/' })
            }
            //if first campaign is not set and a utm param is set then store first cookie
            if ($kookies.get('betabrand-campaign-first') === undefined && params.utm_campaign !== undefined) {
                $kookies.set('betabrand-campaign-first', campaignData, { expires: 365, path: '/' })
            }
            var showNewsletterModal = ($kookies.get('betabrand-introduction') === undefined) && ($location.path().indexOf("/cart/") == -1)
                //check for conditions to block popup
            if (params.r || params.no_popup || params.utm_source == "The%20Betabrand%20Newsletter" || params.utm_source == "The Betabrand Newsletter") {
                showNewsletterModal = false
            }
            //show_popup=1 will force the popup to show
            if (params.show_popup) {
                showNewsletterModal = true
            }
            //Parsons & NYF16
            if ($location.url().indexOf("parsons") > -1 || $location.url().indexOf("svfw") > -1 || $location.url().indexOf("NYF16") > -1) {
                $kookies.set('betabrand-introduction', 'true', { expires: 365, path: '/' })
                showNewsletterModal = false
            }

            if ($window.innerWidth < 1025) {
                showNewsletterModal = false
            }

            // New User Cookie to display modal
            if (showNewsletterModal) {

                var popupNewsletterModal = function() {
                    $kookies.set('betabrand-introduction', 'true', { expires: 365, path: '/' })

                    ModalService.showModal({
                        templateUrl: "/angular/app/modal/newsletter/newsletter-modal.html",
                        controller: "NewsletterModalController as vm"
                    }).then(function(modal) {
                        modal.close.then(function(result) {
                            vm.newUser = false
                        })
                    })
                }

                $scope.$on("$routeChangeSuccess", function() {
                    popupNewsletterModal();
                    popupNewsletterModal = function() {}
                })

            }

            var _clearHttpCache = _.debounce(function() {
                $log.debug("[Cache] Flushing $http cache")
                $cacheFactory.get('$http').removeAll()
            }, 180000)

            vm.showLoadingOverlay = function(message) {
                //show the spinner once `$scope.loadingDelay` ms have gone by
                //this will prevent spinner from showing on relatively fast loads
                $timeout(function() {
                    vm.isLoaded = false
                    $rootScope.isLoaded = false
                });

            }


            var handleUniqueIdentifiers = function(event, currentUrl, previousUrl) {
                //if we're at a route, the newUrl and oldUrl are the same other than query parameters, and reloadOnSearch is false, then don't reload!
                if ($route.current && currentUrl && previousUrl && currentUrl.split('?')[0] == previousUrl.split('?')[0] && $route.current.reloadOnSearch === false) {
                    return false
                }


                $rootScope.isLoaded = false
                CartService.showCart = false
                $rootScope.mobileBuybar = false
                vm.isLoaded = false

                $rootScope.$broadcast('closeModals')

                // Show the page load spinner

                var path = $location.path()

                //Check for our angular-defined routes vs. magento defined routes
                var isDefined = (path == "/") ? true : false

                angular.forEach($route.routes, function(route, index) {
                    if (!route.regexp)
                        return

                    if (route.regexp.test(path)) {
                        isDefined = true
                        return false
                    }
                })

                if (isDefined) return false

                LookupService.query($location.path())
                    .then(function(lookupDefinition) {
                            $route.reload()
                        },
                        function() {
                            // Handle the look up error.
                            $location.url("/404").replace()
                        }
                    )

            }

            vm.calcDevice = function() {
                var windowWidth = $window.innerWidth

                vm.isMobile = (windowWidth < 1025) ? true : false
                $rootScope.isDesktop = (windowWidth >= 1025) ? true : false
                $rootScope.isTablet = ((windowWidth >= 768) && (windowWidth < 1025)) ? true : false
                $rootScope.isPhone = (windowWidth < 768) ? true : false
                $rootScope.isMobile = vm.isMobile

            }

            vm.calcWindowHeight = function() {
                $rootScope.windowHeight = $window.innerHeight
            }
            vm.triggerScroll = function() {
                $timeout(function() {
                    angular.element(window.dispatchEvent(new Event('scroll')))
                })
            }

            vm.triggerSet = function() {
                vm.calcDevice()
                vm.calcWindowHeight()
                vm.triggerScroll()
            }


            // Interval for checking device width as a fallback if the resize event doesn't fire
            $interval(function() {
                vm.triggerSet()
            }, 3000)

            angular.element($window).bind('resize', function() {
                vm.triggerSet()
                $scope.$apply()
            })

            AssetService.loadJs("//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js", "mixpanel")

            // load non-essential external js files after first page load
            $scope.$on('viewLoaded', function() {
                if (!vm.nonEssentialScriptsLoaded) {
                    AssetService.loadJs("//connect.facebook.net/en_US/all.js", "facebook")
                    AssetService.loadJs("//platform.twitter.com/widgets.js", "twitter")
                    AssetService.loadJs('//cdn1.affirm.com/js/v2/affirm.js', 'affirm')
                    AssetService.loadJs('//js.stripe.com/v2/', 'stripe')
                    vm.nonEssentialScriptsLoaded = true
                }

                window.prerenderReady = true;

                vm.isLoaded = true
                $rootScope.isLoaded = true
                    //Flush the http cache
                _clearHttpCache()

                window.performance.mark("viewLoaded")
                if (!$kookies.get('betabrand-timing')) {
                    $kookies.set('betabrand-timing', '1', { expires: 14, path: '/' })
                    window.betabrand.timing.flag('viewLoaded')
                    TrackingService.track("timing")
                }

            })

            $rootScope.$on('$locationChangeStart', handleUniqueIdentifiers)

            $scope.$on('$routeChangeSuccess', function() {
                OptimizelyService.activate()
            });

            $scope.$on('viewLoading', function(event, message) {
                vm.showLoadingOverlay(message)
            })


        }
    ])
    .filter('socialCurrencyUrl', function() {
        return function(url) {
            url = url || ""
            return url.replace("https://", "http://")
        }
    })
    .filter('bbTimestampToJSDate', function() {
        return function(input) {
            if (input instanceof Date) {
                return input
            } else {
                return new Date(input * 1000) //Date() takes the input in seconds, not ms. So we multiply by 1000
            }
        }
    })
    .filter('timestampToJSDate', function() {
        return function(input) {
            return Date.parse(input);
        }
    })
    .filter('reverse', function() {
        return function(items) {
            return items.slice().reverse();
        };
    })


.run(['$rootScope', '$route', '_', 'PageService', '$log', function($rootScope, $route, _, PageService, $log) {

    // Make sure _ is invoked at runtime. This does nothing but force the "_" to
    // be loaded after bootstrap. This is done so the "_" factory has a chance to
    // "erase" the global reference to the lodash library.

    //set page title on navigate
    $rootScope.$on('$routeChangeSuccess', function(newVal, oldVal) {
        if (oldVal !== newVal) {

            window.scrollTo(0, 0)

            if ($route.current.title) {
                document.title = $route.current.title
                PageService.setTitle($route.current.title)
            }
        }
    })
}]);

(function() {
    var myApplication = angular.module("BetabrandApp")

    fetchData().then(bootstrapApplication)

    function fetchData() {
        var initInjector = angular.injector(["ng"])
        var $http = initInjector.get("$http")

        var request = $http({
            method: "GET",
            url: "/api/rest/appconfig/"
        }).then(function(response) {
            myApplication.constant("APP_CONFIG", response.data)
        }, function(errorResponse) {
            myApplication.constant("APP_CONFIG", false)
        })

        return request
    }

    function bootstrapApplication() {
        window.betabrand.timing.flag('bootstrap')
        window.performance.mark("bootstrap")
        angular.element(document).ready(function() {
            angular.bootstrap(document, ["BetabrandApp"])
        })
    }
}());

(function() {

    'use strict';

    AccountController.$inject = ['$scope', '$routeParams', 'NotificationsService', '$document', '$timeout', '$q', 'TrackingService', 'ModalService', 'PageService', 'CustomerService', 'CheckoutService', 'OrderService', 'resolveResponse', 'referrals', 'referralsCf', 'stats']

    AccountController.resolve = {
        resolveResponse: ['CustomerService', 'ThinkTankService', 'ReferralsService', '$q', '$location', function(CustomerService, ThinkTankService, ReferralsService, $q, $location) {
            var defer = $q.defer(),
                data = {};

            CustomerService.getData().then(function(response) {
                if (!response.id)
                    return $location.url("/");

                data.customer = response;
                CustomerService.getAddresses(data.customer.id).then(function(response) {
                    data.addresses = response;
                    ThinkTankService.getSubmissions(data.customer.id).then(function(response) {
                        data.submissions = response.data
                        defer.resolve(data)
                    })
                })
            })

            return defer.promise;
        }],
        tinyMce: function(initTinyMce) {
            return initTinyMce()
        },
        referrals: function(CustomerService) {
            return CustomerService.getReferrals()
        },
        referralsCf: function(CustomerService) {
            return CustomerService.getReferralsCf()
        },
        stats: function(ReferralsService) {
            return ReferralsService.getStats()
        }
    }

    function AccountController($scope, $routeParams, NotificationsService, $document, $timeout, $q, TrackingService, ModalService, PageService, CustomerService, CheckoutService, OrderService, resolveResponse, referrals, referralsCf, stats) {

        var vm = this
        vm.CustomerService = CustomerService
        vm.addresses = resolveResponse.addresses
        vm.submissions = resolveResponse.submissions
        vm.referrals = referrals
        vm.referralsCf = referralsCf
        vm.shares = stats.shares

        vm.firstname = CustomerService.data.firstname
        vm.lastname = CustomerService.data.lastname
        vm.email = CustomerService.data.email
        vm.designerBio = CustomerService.data.designerBio
        vm.image = CustomerService.data.image
        vm.gender = CustomerService.data.gender
        vm.designerLabel = CustomerService.data.designerLabel
        vm.urlKey = CustomerService.data.urlKey

        if (CustomerService.data.dob) {
            var dob = new Date(CustomerService.data.dob.replace(/-/g, "/"))
            if (dob)
                vm.dob = (dob.getMonth() < 9 ? "0" + (dob.getMonth() + 1) : (dob.getMonth() + 1)) + "/" + (dob.getDate() < 10 ? "0" + (dob.getDate()) : dob.getDate()) + "/" + dob.getFullYear()
        }

        if (CustomerService.data.email.indexOf("newschool.edu") > -1)
            vm.isParsons = true;

        if ($routeParams.section) {
            $timeout(function() {
                $document.scrollTo(angular.element(document.querySelector("#" + $routeParams.section)), 196, 1000)
            }, 500);
        }

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            'Source': "Account page"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType('ItemPage')
        PageService.setBodyClass('account-page')

        CheckoutService.getSavedCards().then(function(response) {
            vm.cards = response.cards
        })

        $scope.$watch(function() {
            return vm.profileImage
        }, function() {
            if (typeof vm.profileImage == "undefined")
                return

            vm.isUpdatingAccount = true

            CustomerService.uploadImage(vm.profileImage).then(function(result) {
                var data = {
                    designerImageUrl: result.image
                }

                CustomerService.updateAccount(vm.CustomerService.data.id, data).then(function(response) {
                    vm.isUpdatingAccount = false
                    vm.CustomerService.data.image = result.image

                    NotificationsService.addNotification({
                        message: "Account updated!",
                        type: "success"
                    })

                }, function(response) {
                    vm.isUpdatingAccount = false

                    NotificationsService.addNotification({
                        message: response.messages.error[0].message,
                        type: "error"
                    })

                })
            }, function(response) {
                vm.isUpdatingAccount = false

                NotificationsService.addNotification({
                    message: response.messages.error[0].message,
                    type: "error"
                })

            })
        })

        vm.updateAccount = function() {
            vm.isUpdatingAccount = true

            var data = {
                "firstname": vm.firstname,
                "lastname": vm.lastname,
                "email": vm.email,
                "dob": vm.dob,
                "gender": vm.gender,
                "designerBio": vm.designerBio,
                "designerLabel": vm.designerLabel,
                "urlKey": vm.urlKey
            }

            if (vm.changePassword) {
                data["current_password"] = vm.currentPassword
                data["password"] = vm.newPassword
                data["password_confirmation"] = vm.confirmPassword
            }

            CustomerService.updateAccount(CustomerService.data.id, data).then(function(response) {
                vm.isUpdatingAccount = false

                NotificationsService.addNotification({
                    message: "Account updated!",
                    type: "success"
                })

            }, function(response) {
                vm.isUpdatingAccount = false

                NotificationsService.addNotification({
                    message: response.messages.error[0].message,
                    type: "error"
                })

            })

        }

        vm.showReferralModal = function(productId) {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/referrals/referral-modal.html",
                controller: "ReferralModalController",
                inputs: {
                    productId: null,
                    productName: null
                }
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        vm.addCreditCard = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/account/creditcard.html",
                controller: "AddCreditCardModalController as vm"
            }).then(function(modal) {
                modal.close.then(function(result) {
                    CheckoutService.getSavedCards().then(function(response) {
                        vm.updatingCards = false
                        vm.cards = response.cards
                    })
                });
            });
        }

        vm.deleteSavedCard = function(cardId) {
            vm.updatingCards = true
            CheckoutService.deleteSavedCard(cardId).then(function(response) {
                CheckoutService.getSavedCards().then(function(response) {
                    vm.updatingCards = false
                    vm.cards = response.cards
                })
                delete CheckoutService.data.payment.selected.auth_pp_id
            })
        }

        vm.addAddress = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/addresses/address-edit-modal.html",
                controller: "AddressEditModalController as vm",
                inputs: { address: vm.address }
            }).then(function(modal) {
                modal.close.then(function(result) {
                    CustomerService.getAddresses(CustomerService.data.id).then(function(response) {
                        vm.addresses = response;
                    });
                });
            });
        }

        $scope.$emit('viewLoaded')

    }

    function config($routeProvider) {
        $routeProvider
            .when('/account/dashboard', {
                controller: 'AccountController as vm',
                templateUrl: '/angular/app/account/dashboard.html',
                title: 'Betabrand - User Settings',
                resolve: AccountController.resolve
            })
            .when('/account/dashboard/:section', {
                controller: 'AccountController as vm',
                templateUrl: '/angular/app/account/dashboard.html',
                title: 'Betabrand - User Settings',
                resolve: AccountController.resolve
            })
            .when('/account/user/', {
                redirectTo: "/account/profile/"
            })
            .when('/account/order/:orderId', {
                controller: 'OrdersController',
                templateUrl: '/angular/app/account/order.html',
                title: 'Betabrand - Order Status'
            })
            .when('/account/forgotpassword', {
                controller: 'ForgotPasswordController as vm',
                templateUrl: '/angular/app/account/forgot-password.html',
                title: 'Betabrand - Forgot Password'
            })
            .when('/account/resetpassword', {
                controller: 'ForgotPasswordController as vm',
                templateUrl: '/angular/app/account/reset-password.html',
                title: 'Betabrand - Reset Password'
            })

    }

    angular
        .module('BetabrandApp')
        .controller("AccountController", AccountController)
        .config(config);

})();

(function() {

    angular
        .module('BetabrandApp')
        .controller('AddCreditCardModalController', AddCreditCardModalController);

    AddCreditCardModalController.$inject = ['$scope', '$timeout', 'close', 'CheckoutService', 'hotkeys', 'NotificationsService', '$http', "_"]

    function AddCreditCardModalController($scope, $timeout, close, CheckoutService, hotkeys, NotificationsService, $http, _) {

        var vm = this;

        vm.CheckoutService = CheckoutService

        vm.display = true
        vm.closing = false

        vm.isSavingAddress = false

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Sale Modal',
                callback: function() {
                    vm.close()
                }
            })

        vm.saveCard = function(e, form) {
            e.preventDefault()

            if (form.$valid) {
                vm.isSavingCard = true

                var data = {
                    'ccNumber': vm.cc_number,
                    'ccExpMonth': vm.cc_exp_month,
                    'ccExpYear': vm.cc_exp_year
                };

                CheckoutService.saveCard(data).then(function() {
                    vm.isSavingCard = false
                    vm.close()
                    NotificationsService.addNotification({
                        message: "Your card was saved!",
                        type: "success"
                    })
                }, function(error) {
                    vm.isSavingCard = false
                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })
                })

            }



        }

        vm.cancel = function() {
            vm.close()
        }

        vm.close = function() {
            vm.closing = true
            $timeout(function() {
                vm.display = false
                close()
            }, 610)
        }

    }

})();

BetabrandApp.controller('AddressesController', ['$scope', '$location', '$compile', 'CustomerService', 'OrderService', '$routeParams', 'ReferralsService', 'ModalService', 'PageService', 'CheckoutService',
    function AddressesController($scope, $location, $compile, CustomerService, OrderService, $routeParams, ReferralsService, ModalService, PageService, CheckoutService) {

        $scope.shippingFormMode = "preview"
        $scope.parseInt = parseInt;
        $scope.mode = "preview"
        $scope.newAddressMode = "edit"
        $scope.addingNewAddress = false

        //Load the account data
        CustomerService.getData().then(function(response) {
            $scope.customer = CustomerService.data
            $scope.firstname = CustomerService.data.firstname
            $scope.lastname = CustomerService.data.lastname
            $scope.email = CustomerService.data.email

            if (response.loggedIn == false)
                $location.path("/")

            return CustomerService.getAddresses($scope.customer.id)
        }).then(function(response) {
            $scope.addresses = response
            PageService.setBodyClass('account__page')
            $scope.$emit('viewLoaded')
        });

        $scope.updateAddress = function() {
            $scope.messages.hideBanner()
            var nameParts = this.address.name.split(" ")
            var firstname = nameParts.shift()
            var lastname = nameParts.join(" ") || "NA"
            var data = {
                "firstname": firstname,
                "lastname": lastname,
                "street-address": (typeof this.address['street-address2'] != "undefined") ? this.address['street-address'] + "\n" + this.address['street-address2'] : this.address['street-address'],
                "city": this.address.locality,
                "region": this.address.region,
                "region_id": this.address.region_id,
                "country": this.address.country,
                "postcode": this.address['postal-code'],
                "telephone": this.address.tel,
                "company": this.address.company,
                "email": this.address.email,
                "isDefaultBilling": this.address.isDefaultBilling,
                "isDefaultShipping": this.address.isDefaultShipping
            }

            if (this.address.id) {
                CustomerService.updateAddress(this.address.id, data).then(function() {
                    CustomerService.getAddresses($scope.customer.id).then(
                        function(response) {
                            $scope.addresses = response
                        },
                        function(response) {
                            $scope.messages.showError(error)
                        })
                })
            } else {
                CustomerService.addAddress(CustomerService.data.id, data).then(
                    function(response) {
                        //if $scope.addresses is already an array, push this new address on
                        if (typeof $scope.addresses == "object" && typeof $scope.addresses.push == "function")
                            $scope.addresses.push(response)
                        else //otherwise create a new array containing the new address
                            $scope.addresses = [response]
                        $scope.cleanUpNewAddressForm()
                    },
                    function(error) {
                        $scope.newAddressMode = "edit"
                        $scope.messages.showError(error)
                    })
            }
        }


        $scope.addAddress = function(element) {
            // Styleguide: Need to launch a modal that uses the new address wigdet
            $scope.addingNewAddress = true
            $scope.newAddressMode = "edit"
            var el = $compile('<address-form class="address__block" account-address="true" id="newAddressForm" model-name="address" form-name="address" submit-method="updateAddress()" cancel-method="cancelAddAddress()" mode="newAddressMode"></address-form>')($scope)
            angular.element(document.getElementById('js-account-addresses')).append(el);
        }

        $scope.cleanUpNewAddressForm = function() {
            $scope.newAddressMode = "edit"
            $scope.addingNewAddress = false
            angular.element(document.getElementById('newAddressForm')).remove();
        }

        $scope.cancelAddAddress = function() {
            $scope.cleanUpNewAddressForm()
        }

        $scope.deleteAddress = function() {
            CustomerService.deleteAddress(this.address.id)
        }

        $scope.$on('loggedOut', function(response) {
            $location.path("/")
        })

    }
]);

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("ForgotPasswordController", ForgotPasswordController);

    ForgotPasswordController.$inject = ["$scope", "$location", "CustomerService", "NotificationsService", "$rootScope", "$window"]

    function ForgotPasswordController($scope, $location, CustomerService, NotificationsService, $rootScope, $window) {

        var vm = this

        vm.showForm = true
        vm.submitting = false
        vm.data = { email: "", password: "", confirmation: "", id: $location.search().id, token: $location.search().token }
        vm.advocateId = ($location.search().a) ? true : false
        vm.forms

        $rootScope.$broadcast('closeModals')

        vm.forgot = function(event, form) {
            event.preventDefault()

            if (!form.$error.required) {
                vm.submitting = true
                CustomerService.resetPassword(vm.data.email).then(function(response) {
                        NotificationsService.addNotification({
                            message: "Your password has been successfully reset. Check your email to complete the process.",
                            type: "success"
                        })
                        vm.submitting = false
                        $window.history.back()
                    },
                    function(response) {
                        NotificationsService.addNotification({
                            message: response.messages.error[0].message,
                            type: "error"
                        })
                        vm.submitting = false
                    })

            }
        }

        vm.reset = function(event, form) {
            event.preventDefault()

            if (!form.$error.required) {
                CustomerService.updatePassword(vm.password, vm.confirmation, vm.data.email, vm.data.id, vm.data.token).then(function() {
                        NotificationsService.addNotification({
                            message: "Your password has been successfully updated. You can now login.",
                            type: "success"
                        })
                        $location.path("/")
                    },
                    function(response) {
                        NotificationsService.addNotification({
                            message: response.messages.error[0].message,
                            type: "error"
                        })
                    })
            }
        }

        $scope.$emit("viewLoaded")

    }

})();

BetabrandApp.controller('OrdersController', ['$scope', '$location', '$compile', 'CustomerService', 'OrderService', '$routeParams', 'PageService',
    function OrdersController($scope, $location, $compile, CustomerService, OrderService, $routeParams, PageService) {


        $scope.orderService = OrderService
        $scope.parseInt = parseInt;
        $scope.ordersLoaded = false


        //Load the account data
        CustomerService.getData().then(function(response) {
            $scope.customer = CustomerService.data
            $scope.firstname = CustomerService.data.firstname
            $scope.lastname = CustomerService.data.lastname
            $scope.email = CustomerService.data.email

            if (response.loggedIn == false)
                $location.path("/")

            if (typeof $routeParams.orderId !== "undefined") {
                OrderService.getOrder($routeParams.orderId).then(function(response) {
                    $scope.order = response
                    $scope.$emit('viewLoaded')
                })

            } else {
                OrderService.getAllOrders().then(function(response) {
                    $scope.orders = response.data
                    $scope.ordersLoaded = true
                    $scope.$emit('viewLoaded')
                })
            }

        })
        PageService.setBodyClass('account__page')

        $scope.startRMA = function(orderId, email) {
            OrderService.getRMA(orderId, email).then(function(response) {
                    $location.url("/returns/order/" + orderId + "/token/" + response.data.rma_token)
                },
                function(error) {
                    alert(error.data.messages.error[0].message)
                })
        }

        $scope.$on('loggedOut', function(response) {
            $location.path("/")
        })


    }
]);

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('ordersTable', ordersTable);

    function ordersTable() {
        var directive = {
            restrict: 'E',
            replace: true,
            templateUrl: '/angular/app/account/orders-table.html',
            link: linkFunc,
            scope: {
                orders: "="
            },
            controller: ordersTableController,
            controllerAs: 'vm',
            bindController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    ordersTableController.$inject = ["$scope", "CustomerService", "$rootScope", "_", "OrderService"];

    function ordersTableController($scope, CustomerService, $rootScope, _, OrderService) {
        var vm = this;
        vm.CustomerService = CustomerService
        vm.orderLimit = $rootScope.isMobile ? 5 : 10
        vm.orderCount = vm.orderLimit
        vm.initialized = false
        vm.orders = []

        OrderService.getAllOrders().then(function(response) {
            vm.initialized = true
            vm.orders = response.data
            vm.ordersReversed = _.reverse(vm.orders);
        }, function() {
            vm.initialized = true
        })

        vm.loadMore = function() {
            vm.orderCount += vm.orderLimit
        }

        vm.ordercode = {
            "On Hold": {
                name: "On Hold",
                message: "Orders will be marked as 'on hold' in your order history if the items contained are currently in crowdfunding. Once this period ends, you will be officially charged for this order, and the order status will be marked as 'processing' until it ships."
            },
            "Complete": {
                name: "Complete",
                message: "Orders will be marked as 'complete' in your order history when at least one of your in-stock items has been shipped."
            },
            "Processing": {
                name: "Processing",
                message: "Orders will be marked as 'processing' in your order history until at least one item ships. If this order contains only pre-order items, it will remain as 'processing' until they ship."
            },
            "Closed": {
                name: "Refunded",
                message: "Orders will be marked as 'Refunded' when everything in the order has been fully refunded."
            }
        }
    }
})();


(function() {

    'use strict';

    ProfileController.$inject = ["$scope", "$q", "TrackingService", "$location", "ModelCitizenService", "CustomerService", "$routeParams", "ModalService", "PageService", "ConnectionsService", "_", "$log", "ProductService", "ThinkTankService", "ImageService", "$timeout", "$window", "resolveResponse", "initTinyMce"]

    function ProfileController($scope, $q, TrackingService, $location, ModelCitizenService, CustomerService, $routeParams, ModalService, PageService, ConnectionsService, _, $log, ProductService, ThinkTankService, ImageService, $timeout, $window, resolveResponse, initTinyMce) {

        var vm = this

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            "Source": "Profile page"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType("ProfilePage")
        PageService.setBodyClass("profile-page")

        vm.formatImages = ImageService.lazyFormatSrc

        vm.defaultImage = 'angular/images/user/user.png'

        //Added for user accounts.
        vm.profile = ''
        vm.section = $routeParams.section
        vm.loadedProductIds = []
        vm.loadedUpvotedSubmissionIds = []
        vm.random = Math.floor(Math.random() * 999999)
        vm.feed = {
            initialized: false
        }

        vm.section = $routeParams.section

        vm.currentFollowerPage = -1
        vm.countPerFollowerPage = 30

        var _profileInitialized = false

        vm.sectionConfig = {
            stream: { 'show': false, limit: 30 },
            funded: { 'show': false, limit: 9 },
            products: { 'show': false, limit: 9 },
            voted: { 'show': false, limit: 9 },
            ideas: { 'show': false, limit: 9 },
            followers: { 'show': false, limit: 30 },
            following: { 'show': false, limit: 30 },
            photos: { 'show': false, limit: 9 }
        }

        var _hideAllSections = function(sectionConfig) {
            sectionConfig = _.each(sectionConfig, function(section) {
                section.show = false
            })
            return sectionConfig
        }

        var _showSection = function(section) {
            vm.sectionConfig[section].show = true
        }

        if (vm.section == "followers") {
            vm.sectionConfig = _hideAllSections(vm.sectionConfig)
            vm.sectionConfig.followers.show = true;
            vm.sectionConfig.followers.limit = 30;
        }

        if (vm.section == "following") {
            vm.sectionConfig = _hideAllSections(vm.sectionConfig)
            vm.sectionConfig.following.show = true;
            vm.sectionConfig.following.limit = 30;
        }

        vm.getMoreUpvotedSubmissions = function() {
            console.log('getMoreUpvotedSubmissions');
            var remainingSubmissionIds = _.difference(vm.fullProfile.upvotes.submission, vm.loadedUpvotedSubmissionIds)
            console.log('remainingSubmissionIds', remainingSubmissionIds);
            ThinkTankService.getSubmissionsById(remainingSubmissionIds).then(function(response) {
                //concat the new data on the end of the existing list
                vm.fullProfile.votedListFull = vm.fullProfile.votedListFull.concat(response.data)
            })
        }

        vm.getMoreFundedProducts = function() {
            var remainingProductIds = _.difference(vm.fullProfile.crowdfundingOrderedProducts, vm.loadedProductIds)
            ProductService.getProducts(remainingProductIds, 'card', 'cf').then(function(response) {
                //concat the new data on the end of the existing list
                $scope.fullProfile.crowdfundingList = $scope.fullProfile.crowdfundingList.concat(response)
            })
        }

        vm.changeSection = function(section, option) {
            vm.toggleNavigation = false
            _hideAllSections(vm.sectionConfig);
            _showSection(section);
            $timeout(function() {
                angular.element($window).triggerHandler('scroll');
                if (typeof option !== 'undefined') {
                    $window.scrollTo(0, 0)
                }
            });
        }

        vm.showImageModal = function(data) {
            ModalService.showModal({
                templateUrl: "/angular/app/modelcitizen/modelcitizen-modal.html",
                controller: "ModelCitizenImageModalController",
                inputs: {
                    image: data.image,
                    images: vm.fullProfile.photoList
                }
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        vm.getNextFollowerPage = function() {
            vm.currentFollowerPage++;

            //load followers and folowing
            ConnectionsService.getFollowers(vm.userId, 'full', vm.currentFollowerPage, vm.countPerFollowerPage).then(function(response) {

                vm.fullProfile.followingCount = response.following_count;
                vm.fullProfile.followersCount = response.followers_count;
                vm.fullProfile.followingList = response.following;
                vm.fullProfile.followerList = response.followers;
            });

        }


        var _init = function() {

            CustomerService.getData().then(function(response) {
                vm.customer = response

                //if no profile id specified in route, then take action based on
                //log in status.  Logged in = redirect to customer's profile
                //logged out = redirect homepage
                if (typeof $routeParams.profileId == "undefined") {
                    if (vm.customer.loggedIn)
                        window.location = "/u/" + vm.customer.urlKey
                    else
                        $location.path("/")
                    return
                }

                if (!_profileInitialized)
                    _initProfile($routeParams.profileId)
            })
        }

        var _initProfile = function(profileId) {
            //switch profile to userId in case the page is loading by urlKey
            vm.userId = resolveResponse.data.id;
            vm.feedId = "user:" + resolveResponse.data.id

            vm.fullProfile = resolveResponse.data
                // response.submissions: run with returned idea IDs: getDesign
            vm.fullProfile.crowdfundingList = [];
            vm.fullProfile.designedList = [];
            vm.fullProfile.submissionList = [];
            vm.fullProfile.followingList = [];
            vm.fullProfile.followerList = [];
            vm.fullProfile.votedList = [];
            vm.fullProfile.votedListFull = [];

            ThinkTankService.getSubmissionsById(vm.fullProfile.submissions).then(function(response) {
                // Just retrieving the published submissions for your profile.
                _.each(response.data, function(item) {
                    if (_.includes(item.state, "published") || _.includes(item.state, "greenlit") || _.includes(item.state, "archived")) {
                        vm.fullProfile.submissionList.push(item);
                    }
                })
            })

            //build grouped list of CF products, voted products and designed products so we can make 1 request to product data end point

            var productList = [];
            vm.fullProfile.crowdfundingOrderedProducts = vm.fullProfile.crowdfundingOrderedProducts || []
            vm.fullProfile.upvotes.submission = vm.fullProfile.upvotes.submission || []
            vm.fullProfile.designedProducts = vm.fullProfile.designedProducts || []
            vm.fullProfile.crowdfundingOrderedProducts = vm.fullProfile.crowdfundingOrderedProducts || [];

            productList = productList
                .concat(vm.fullProfile.crowdfundingOrderedProducts.slice(0, vm.sectionConfig.funded.limit))
                .concat(vm.fullProfile.designedProducts);

            ProductService.getProducts(productList, 'card', 'cf').then(function(response) {
                //build section lists based on existence in profile design/vote/cf lists
                _.each(response, function(item) {
                    vm.loadedProductIds.push(item.id);
                    if (_.includes(vm.fullProfile.crowdfundingOrderedProducts, item.id) && _.findIndex(vm.fullProfile.crowdfundingList, { 'id': item.id }) == -1)
                        vm.fullProfile.crowdfundingList.push(item);
                    if (_.includes(vm.fullProfile.designedProducts, item.id) && _.findIndex(vm.fullProfile.designedList, { 'id': item.id }) == -1)
                        vm.fullProfile.designedList.push(item);
                })
            });

            ThinkTankService.getSubmissionsById(vm.fullProfile.upvotes.submission.slice(0, vm.sectionConfig.voted.limit)).then(function(response) {
                _.each(response.data, function(item) {
                    vm.loadedUpvotedSubmissionIds.push(item.id);
                    if (_.includes(vm.fullProfile.upvotes.submission, item.id) && _.findIndex(vm.fullProfile.votedList, { 'id': item.id }) == -1)
                        vm.fullProfile.votedList.push(item);
                    vm.fullProfile.votedListFull.push(item);
                })
            });

            vm.getNextFollowerPage()

            //grab modelcitizen photos
            ModelCitizenService.getPhotosByUserId(vm.userId).then(function(data) {
                vm.fullProfile.photoList = data
            })

            // If /submitted, /funded, etc, load the correct tab
            if (vm.section) {
                _hideAllSections(vm.sectionConfig)
                _showSection(vm.section)
            } else {
                _showSection('stream')
            }

            _profileInitialized = true

            $scope.$emit("viewLoaded")

        }

        //initialize page
        _init()

        //reinit page on log in and out
        $scope.$on('loggedIn', function(response) {
            _init()
        })

        $scope.$on('loggedOut', function(response) {
            _init()
        })

    }


    function config($routeProvider) {
        $routeProvider
            .when('/u/:profileId', {
                controller: 'ProfileController as vm',
                templateUrl: '/angular/app/account/profile.html',
                title: 'Betabrand - User Profile',
                resolve: {
                    resolveResponse: function(CustomerService, $route) {
                        return CustomerService.getProfile($route.current.params.profileId)
                    },
                    tinyMce: function(initTinyMce) {
                        return initTinyMce()
                    }
                }
            })
            .when('/u/:profileId/:section', {
                controller: 'ProfileController as vm',
                templateUrl: '/angular/app/account/profile.html',
                title: 'Betabrand - User Profile',
                resolve: {
                    resolveResponse: function(CustomerService, $route) {
                        return CustomerService.getProfile($route.current.params.profileId)
                    }
                }
            })
    }

    angular
        .module('BetabrandApp')
        .controller("ProfileController", ProfileController)
        .config(config);

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbAddress", bbAddress);

    function bbAddress() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {
                variety: "@",
                address: "=",
                addresses: "=addresses"
            },
            transclude: true,
            templateUrl: "/angular/app/addresses/address.html",
            link: linkFunc,
            controller: bbAddressController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    bbAddressController.$inject = ["$scope", "CustomerService", "ModalService", "_", "NotificationsService"];

    function bbAddressController($scope, CustomerService, ModalService, _, NotificationsService) {

        var vm = this;

        vm.deleted = false;

        vm.editAddress = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/addresses/address-edit-modal.html",
                controller: "AddressEditModalController as vm",
                inputs: { address: vm.address }
            }).then(function(modal) {
                modal.close.then(function(result) {
                    CustomerService.getAddresses(CustomerService.data.id).then(function(response) {
                        vm.addresses = response;
                    });
                });
            });
        };

        vm.deleteAddress = function(addressId) {
            CustomerService.deleteAddress(addressId).then(function(response) {
                vm.addresses = _.without(vm.addresses, vm.address);
            });
        };

        vm.saveAddress = function() {
            var nameParts = vm.address.name.split(" ")
            var firstname = nameParts.shift()
            var lastname = nameParts.join(" ") || "NA"
            var data = {
                "firstname": firstname,
                "lastname": lastname,
                "street-address": (typeof vm.address['street-address2'] != "undefined") ? vm.address['street-address'] + "\n" + vm.address['street-address2'] : vm.address['street-address'],
                "city": vm.address.locality,
                "region": vm.address.region,
                "region_id": vm.address.region_id,
                "country": vm.address.country,
                "postcode": vm.address['postal-code'],
                "telephone": vm.address.tel,
                "company": vm.address.company,
                "email": vm.address.email,
                "isDefaultBilling": vm.address.isDefaultBilling,
                "isDefaultShipping": vm.address.isDefaultShipping
            }

            if (vm.address.id) {
                CustomerService.updateAddress(vm.address.id, data).then(function(reponse) {
                    CustomerService.getAddresses(CustomerService.data.id).then(function(response) {
                        vm.addresses = response;
                    });

                    NotificationsService.addNotification({
                        message: "Your address is saved!",
                        type: "success"
                    })

                }, function(error) {
                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                })
            }
        }
    }
})();

(function() {

    angular
        .module('BetabrandApp')
        .controller('AddressEditModalController', AddressEditModalController);

    AddressEditModalController.$inject = ['$scope', '$timeout', 'close', 'address', 'CustomerService', 'hotkeys', 'NotificationsService', '$http', "_"]

    function AddressEditModalController($scope, $timeout, close, address, CustomerService, hotkeys, NotificationsService, $http, _) {

        var vm = this;

        vm.regions = {}
        vm.subRegions = false
        vm.address = angular.copy(address)
        vm.CustomerService = CustomerService

        vm.display = true
        vm.closing = false

        vm.isSavingAddress = false

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Sale Modal',
                callback: function() {
                    vm.close()
                }
            })

        $http({
            method: "GET",
            url: "/api/rest/sealthedeal/regions/list/"
        }).success(function(data) {
            vm.regions = data.regions
            vm.updateSubregions()
        }).error(function(data) {

        })

        vm.updateSubregions = function() {
            if (!vm.address)
                return;

            var country;

            if (vm.address.country) {
                country = _.find(vm.regions, { country_id: vm.address.country })
            }

            if (country && country.regions.length > 0) {
                vm.subRegions = country.regions
                vm.hasSubRegions = true
            } else {
                vm.subRegions = false
                vm.hasSubRegions = false
            }
        }

        vm.updateRegion = function(regionId) {
            if (vm.subRegions[regionId - 1]) {
                vm.address.region = vm.subRegions[regionId - 1].name
            } else {
                vm.address.region = null
            }
        }


        vm.saveAddress = function() {
            vm.isSavingAddress = true
            var nameParts = vm.address.name.split(" ")
            var firstname = nameParts.shift()
            var lastname = nameParts.join(" ") || "NA"
            var data = {
                "firstname": firstname,
                "lastname": lastname,
                "street-address": (typeof vm.address['street-address2'] != "undefined") ? vm.address['street-address'] + "\n" + vm.address['street-address2'] : vm.address['street-address'],
                "city": vm.address.locality,
                "region": vm.address.region,
                "region_id": vm.address.region_id,
                "country": vm.address.country,
                "postcode": vm.address['postal-code'],
                "telephone": vm.address.tel,
                "company": vm.address.company,
                "email": vm.address.email,
                "isDefaultBilling": vm.address.isDefaultBilling,
                "isDefaultShipping": vm.address.isDefaultShipping
            }

            if (vm.address.id) {
                CustomerService.updateAddress(vm.address.id, data).then(function(reponse) {
                    vm.isSavingAddress = false
                    vm.close()
                    NotificationsService.addNotification({
                        message: "Your address is saved!",
                        type: "success"
                    })

                }, function(error) {
                    vm.isSavingAddress = false
                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                })
            } else {
                CustomerService.getData().then(function(response) {
                    CustomerService.addAddress(response.id, data).then(function() {
                        vm.isSavingAddress = false
                        vm.close()
                        NotificationsService.addNotification({
                            message: "Your address is saved!",
                            type: "success"
                        })
                    }, function(error) {
                        vm.isSavingAddress = false
                        NotificationsService.addNotification({
                            message: error,
                            type: "error"
                        })
                    })
                }, function(error) {
                    vm.isSavingAddress = false
                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })
                })
            }
        }

        vm.cancel = function() {
            vm.close()
        }

        vm.close = function() {
            vm.closing = true
            $timeout(function() {
                vm.display = false
                close()
            }, 610)
        }

    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('bbAlert', bbAlert);

    function bbAlert() {
        var directive = {
            restrict: 'EA',
            replace: true,
            scope: {
                variety: '@'
            },
            transclude: true,
            templateUrl: '/angular/app/alert_new/alert.html',
            link: linkFunc,
            controller: bbAlertController,
            controllerAs: 'vm',
            bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {

        }
    }

    bbAlertController.$inject = ['$scope'];

    function bbAlertController($scope) {
        var vm = this;

        vm.focusAlert = function() {
            vm.focus();
        };

        vm.closeAlert = function(event, el) {
            var clickedElement = event.target;
            clickedElement.parentElement.remove();
        };
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("applePay", applePay);

    function applePay() {
        var directive = {
            restrict: "E",
            replace: false,
            scope: {},
            transclude: true,
            templateUrl: "/angular/app/applepay/applepay.html",
            link: linkFunc,
            controller: applePayController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    applePayController.$inject = ["$scope", '$rootScope', "AssetService", "$http", "CartService", "_", "CheckoutService", "APP_CONFIG", "TrackingService", 'AddressFormService', 'CustomerService', '$log'];

    function applePayController($scope, $rootScope, AssetService, $http, CartService, _, CheckoutService, APP_CONFIG, TrackingService, AddressFormService, CustomerService, $log) {

        var vm = this;
        vm.isAvailable = false;
        vm.CustomerService = CustomerService
        vm.CartService = CartService

        vm.geoLookupState = false

        vm.actions = {
            startApplePay: startApplePay
        }

        // Load the stripe library, but only if we have a publishable key
        if ('stripeApplepayPubKey' in APP_CONFIG && APP_CONFIG.stripeApplepayPubKey != '' && !$rootScope.isDesktop) {
            AssetService.waitForLibrary('stripe').then(function() {
                Stripe.setPublishableKey(APP_CONFIG.stripeApplepayPubKey);

                // Check for availability, only if we're using a live publishable key
                if (APP_CONFIG.stripeApplepayPubKey.indexOf('_test_') > -1) {
                    vm.isAvailable = true;
                } else {
                    Stripe.applePay.checkAvailability(function(available) {
                        vm.isAvailable = available
                    });
                }
            });
        }

        function convertAppleShippingContact(address) {
            return {
                "id": null,
                "name": address.givenName ? address.givenName + ' ' + address.familyName : "applepay",
                "email": address.emailAddress ? address.emailAddress : "applepay@betabrand.com",
                "tel": address.phoneNumber ? address.phoneNumber : "5555555555",
                "street-address": address.addressLines ? address.addressLines[0] : "111 Apple Pay Street",
                "street-address2": address.addressLines && address.addressLines[1] ? address.addressLines[1] : "",
                "postal-code": address.postalCode,
                "locality": address.locality,
                "country": address.countryCode,
                "region": address.administrativeArea ? address.administrativeArea : vm.geoLookupState,
                'ignore_validation': true
            }
        }

        function convertAppleBillingContact(address) {
            return {
                "id": null,
                "name": address.name ? address.name : "",
                "email": address.emailAddress ? address.emailAddress : "",
                "tel": address.phoneNumber ? address.phoneNumber : "",
                "street-address": address.address_line1 ? address.address_line1 : "",
                "street-address2": address.address_line2 ? address.address_line2 : "",
                "postal-code": address.address_zip,
                "locality": address.address_city,
                "country": address.address_country,
                "region": address.address_state,
                'ignore_validation': true
            }

            return convertedAddress
        }

        function copyShippingFieldsToBilling(shippingAddress, billingAddress) {

            billingAddress.name = billingAddress.name ? billingAddress.name : shippingAddress.name
            billingAddress.email = billingAddress.email ? billingAddress.email : shippingAddress.email
            billingAddress.tel = billingAddress.tel ? billingAddress.tel : shippingAddress.tel

            return billingAddress
        }

        function buildTotal() {
            var cartData = CheckoutService.data && CheckoutService.data.cart ? CheckoutService.data.cart : CartService.data;
            var grandTotal = _.find(cartData.totals, { code: 'grand_total' })

            return {
                "label": "Betabrand",
                "amount": parseFloat(grandTotal.value).toFixed(2)
            }
        }

        function buildLineItems() {
            var cartData = CheckoutService.data && CheckoutService.data.cart ? CheckoutService.data.cart : CartService.data;
            var lineItems = []

            // Add line items
            _.each(cartData.items, function(item) {
                var lineItem = {
                    type: 'final',
                    label: item.name,
                    amount: parseFloat(item.total).toFixed(2)
                };

                if (item.options && item.options.Size) {
                    lineItem.label += ' ' + item.options.Size;
                }

                if (item.qty > 1) {
                    lineItem.label += ' x' + item.qty
                }

                lineItems.push(lineItem);
            });

            // Add totals
            _.each(cartData.totals, function(total) {
                var value = parseFloat(total.value).toFixed(2);
                switch (total.code) {
                    case 'subtotal':
                    case 'grand_total':
                        break;
                    default:
                        lineItems.push({
                            type: 'final',
                            label: total.title,
                            amount: value
                        });
                        break;
                }
            });

            return lineItems
        }

        function buildShippingMethods() {
            var shippingMethodData = CheckoutService.data && CheckoutService.data.shipping_method ? CheckoutService.data.shipping_method : []
            var shippingMethods = [];

            _.each(shippingMethodData.methods, function(methodSection, label) {
                _.each(methodSection, function(method) {
                    shippingMethods.push({
                        label: label,
                        detail: method.title,
                        amount: parseFloat(method.price).toFixed(2),
                        identifier: method.code
                    })
                })
            })

            return shippingMethods
        }

        function buildPaymentRequest() {
            return {
                requiredBillingContactFields: ['postalAddress', 'phone', 'email', 'name'],
                requiredShippingContactFields: ['postalAddress', 'phone', 'email', 'name'],
                countryCode: 'US',
                currencyCode: 'USD',
                lineItems: buildLineItems(),
                total: buildTotal(),
                shippingMethods: buildShippingMethods(),
            };
        }

        function startApplePay() {
            TrackingService.trackEvent('Apple Pay Start');

            var session = Stripe.applePay.buildSession(buildPaymentRequest(),
                function(result, completion) {
                    $log.debug("Apple pay complete", result)
                    CheckoutService.data.shipping = convertAppleShippingContact(result.shippingContact)
                    CheckoutService.data.billing = convertAppleBillingContact(result.token.card)
                    CheckoutService.data.billing = copyShippingFieldsToBilling(CheckoutService.data.shipping, CheckoutService.data.billing)
                    CheckoutService.setPaymentData(result.token.id);
                    CheckoutService.submit({ shippingAddress: true, billingAddress: true, shippingMethod: true, payment: true }, { place: true }).then(function(response) {
                        completion(ApplePaySession.STATUS_SUCCESS);

                        TrackingService.trackEvent('Apple Pay Complete');
                    }, function(response) {
                        completion(ApplePaySession.STATUS_FAILURE);
                        $log.debug("Apple Pay Error", error);
                        TrackingService.trackEvent('Apple Pay Error', { step: 'Complete Purchase', error: error });
                    });
                },
                function(error) {
                    $log.debug("Apple Pay Error", error);
                    TrackingService.trackEvent('Apple Pay Error', { step: 'Complete Purchase', error: error.message });
                }
            );

            session.oncancel = function(event) {
                TrackingService.trackEvent('Apple Pay Cancel');
            };

            session.onshippingcontactselected = function(event) {

                //if applePay didn't give us a state, lets look it up for the user
                vm.geoLookupState = false
                if (event.shippingContact.postalCode && !event.shippingContact.administrativeArea) {
                    TrackingService.trackEvent('Apple Pay Geo Lookup', event.shippingContact);
                    var address = event.shippingContact
                    var addressString = [address.locality, address.countryCode, address.postalCode].join(" ")
                    AddressFormService.getGeocode(addressString).then(function(geo) {
                        event.shippingContact.administrativeArea = geo.region
                        vm.geoLookupState = geo.region
                        updateCheckoutShippingAddress()
                        TrackingService.trackEvent('Apple Pay Geo Lookup Complete', { region: geo.region });
                    }, function(fail) {
                        updateCheckoutShippingAddress()
                        TrackingService.trackEvent('Apple Pay Geo Lookup Error', event.shippingContact);
                    })
                }
                //we've got everything we need, submit to the backend
                else {
                    updateCheckoutShippingAddress()
                }

                function updateCheckoutShippingAddress() {
                    CheckoutService.data.shipping = convertAppleShippingContact(event.shippingContact)
                    CheckoutService.data.billing = convertAppleShippingContact(event.shippingContact)
                    CheckoutService.submit({ shippingAddress: true, billingAddress: true }).then(function(response) {
                        session.completeShippingContactSelection(ApplePaySession.STATUS_SUCCESS, buildShippingMethods(), buildTotal(), buildLineItems())
                    }, function(response) {
                        session.completeShippingContactSelection(ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS, buildShippingMethods(), buildTotal(), buildLineItems())
                        TrackingService.trackEvent('Apple Pay Error', { step: 'Shipping Contact', error: response });
                    });
                }
            }

            session.onshippingmethodselected = function(event) {
                CheckoutService.data.shipping_method.selected = event.shippingMethod.identifier
                CheckoutService.submit({ shippingMethod: true }).then(function(response) {
                    session.completeShippingMethodSelection(ApplePaySession.STATUS_SUCCESS, buildTotal(), buildLineItems())
                }, function(response) {
                    session.completeShippingMethodSelection(ApplePaySession.STATUS_SUCCESS, buildTotal(), buildLineItems())
                    TrackingService.trackEvent('Apple Pay Error', { step: 'Shipping Method', error: response });
                });
            }

            session.begin();
        }
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbAvatar", bbAvatar);

    function bbAvatar() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {
                variety: "@",
                user: "=",
                size: "@"
            },
            transclude: true,
            templateUrl: "/angular/app/avatars/avatar.html",
            link: linkFunc,
            controller: bbAvatarController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            ctrl.formatImages = ctrl.ImageService.lazyFormatSrc;
        }
    }

    bbAvatarController.$inject = ["$scope", "ImageService"];

    function bbAvatarController($scope, ImageService) {
        var vm = this;
        vm.ImageService = ImageService;
    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("bbAdminController", bbAdminController);

    bbAdminController.$inject = ["$scope", "$q", "TrackingService", "PageService", "CustomerService", "$window"]

    function bbAdminController($scope, $q, TrackingService, PageService, CustomerService, $window) {

        PageService.setBodyClass("bb-admin")

        var vm = this
        vm.CustomerService = CustomerService

        vm.CustomerService.getData().then(function(response) {
            if (response.loggedIn) {
                $scope.$emit("viewLoaded")
            } else {
                $window.history.back()
            }
        })

    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .config(config);

    function config($routeProvider) {
        $routeProvider
            .when("/bbadmin", {
                controller: "bbAdminController",
                controllerAs: "vm",
                templateUrl: "/angular/app/bbadmin/bbadmin.html",
                title: "Betabrand - Admin"
            })
            .when("/bbadmin/submissions", {
                controller: "SubmissionAdminController",
                controllerAs: "vm",
                templateUrl: "/angular/app/bbadmin/submissions/manager.html",
                title: "Betabrand - Manage Submissions",
                reloadOnSearch: false,
                resolve: {
                    resolveData: ["ThinkTankService", function(ThinkTankService) {
                        return ThinkTankService.getSubmissions("all", false)
                    }]
                }
            })
            .when("/bbadmin/submissions/:id", {
                controller: "SubmissionAdminPublishController",
                controllerAs: "vm",
                templateUrl: "/angular/app/bbadmin/submissions/submission-publish-form.html",
                title: "Betabrand - Manage Submissions",
                resolve: {
                    submission: ["ThinkTankService", function(ThinkTankService) {
                        // return ThinkTankService.getSubmissions("12111", false)
                        return ThinkTankService.getSubmissions("all", false)
                    }],
                    id: ["$route", function($route) {
                        return $route.current.params.id
                    }]
                }
            })
            .when("/bbadmin/variations", {
                controller: "VariationsController",
                controllerAs: "vm",
                templateUrl: "/angular/app/bbadmin/newsletter/variations.html",
                title: "Betabrand - Admin",
                reloadOnSearch: false,
                resolve: {
                    experiments: ["OptimizelyService", "CustomerService", "$q", function(OptimizelyService, CustomerService, $q) {
                        var deferred = $q.defer();
                        CustomerService.getData().then(function(response) {
                            var keys = response.keys || {}
                            OptimizelyService.consts = keys.optimizely
                            OptimizelyService.getProjectExperiments().then(function(response) {
                                return deferred.resolve(response)
                            })
                        })
                        return deferred.promise
                    }],
                    popups: ["PopupsService", function(PopupsService) {
                        return PopupsService.getPopups()
                    }],
                    id: function() {
                        return null
                    }
                }
            })
            .when("/bbadmin/variations/new", {
                controller: "VariationsController",
                controllerAs: "vm",
                templateUrl: "/angular/app/bbadmin/newsletter/variation.html",
                title: "Betabrand - Admin",
                resolve: {
                    experiments: ["OptimizelyService", "CustomerService", "$q", function(OptimizelyService, CustomerService, $q) {
                        var deferred = $q.defer();
                        CustomerService.getData().then(function(response) {
                            var keys = response.keys || {}
                            OptimizelyService.consts = keys.optimizely
                            OptimizelyService.getProjectExperiments().then(function(response) {
                                return deferred.resolve(response)
                            })
                        })
                        return deferred.promise
                    }],
                    popups: ["PopupsService", function(PopupsService) {
                        return PopupsService.getPopups()
                    }],
                    id: function() {
                        var id = window.location.search.match(/[\?|&]id=(\d+)/)
                        return id ? id[1] : null
                    }
                }
            })
            .when("/bbadmin/variations/:id", {
                controller: "VariationsController",
                controllerAs: "vm",
                templateUrl: "/angular/app/bbadmin/newsletter/variation.html",
                title: "Betabrand - Admin",
                resolve: {
                    experiments: ["OptimizelyService", "CustomerService", "$q", function(OptimizelyService, CustomerService, $q) {
                        var deferred = $q.defer();
                        CustomerService.getData().then(function(response) {
                            var keys = response.keys || {}
                            OptimizelyService.consts = keys.optimizely
                            OptimizelyService.getProjectExperiments().then(function(response) {
                                return deferred.resolve(response)
                            })
                        })
                        return deferred.promise
                    }],
                    popups: ["PopupsService", function(PopupsService) {
                        return PopupsService.getPopups()
                    }],
                    id: ["$route", function($route) {
                        return $route.current.params.id
                    }]
                }
            })
            .when("/bbadmin/experiments", {
                controller: "ExperimentsController as vm",
                templateUrl: "/angular/app/bbadmin/newsletter/experiments.html",
                title: "Betabrand - Admin",
                reloadOnSearch: false,
                resolve: {
                    experiments: ["OptimizelyService", "CustomerService", "$q", "_", function(OptimizelyService, CustomerService, $q, _) {
                        var deferred = $q.defer();
                        CustomerService.getData().then(function(response) {
                            var keys = response.keys || {}
                            OptimizelyService.consts = keys.optimizely
                            OptimizelyService.getProjectExperiments().then(function(response) {
                                var experiments = _.filter(response, function(experiment) {
                                    return experiment.description.indexOf("NL: ") > -1
                                })
                                return deferred.resolve(experiments)
                            })
                        })
                        return deferred.promise
                    }],
                    popups: ["PopupsService", function(PopupsService) {
                        return PopupsService.getPopups()
                    }],
                    id: function() {
                        return null
                    }
                }
            })
            .when("/bbadmin/experiments/:id", {
                controller: "ExperimentController as vm",
                templateUrl: "/angular/app/bbadmin/newsletter/experiment.html",
                title: "Betabrand - Admin",
                resolve: {
                    goals: ["OptimizelyService", "$q", "CustomerService", "_", function(OptimizelyService, $q, CustomerService, _) {
                        var deferred = $q.defer();
                        var getGoals = function() {
                            OptimizelyService.getGoals().then(function(response) {
                                var goals = _.filter(response, function(goal) {
                                    return [118399233, 4604346675232768, 68078232, 69105467].indexOf(goal.id) !== -1;
                                })

                                return deferred.resolve(goals)
                            })
                        }
                        if (OptimizelyService.consts.optimizely) {
                            getGoals()
                        } else {
                            CustomerService.getData().then(function(response) {
                                var keys = response.keys || {}
                                OptimizelyService.consts = keys.optimizely
                                getGoals()
                            })
                        }
                        return deferred.promise
                    }],
                    experiment: ["OptimizelyService", "CustomerService", "$q", "$route", function(OptimizelyService, CustomerService, $q, $route) {
                        var deferred = $q.defer();
                        CustomerService.getData().then(function(response) {
                            var keys = response.keys || {}
                            OptimizelyService.consts = keys.optimizely
                            OptimizelyService.getExperiment($route.current.params.id).then(function(response) {
                                return deferred.resolve(response)
                            })
                        })
                        return deferred.promise
                    }],
                    popups: ["PopupsService", function(PopupsService) {
                        return PopupsService.getPopups()
                    }],
                    id: ["$route", function($route) {
                        return $route.current.params.id
                    }]
                }
            })
    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("ExperimentController", ExperimentController);

    ExperimentController.$inject = ["$scope", "PopupsService", "$log", "CustomerService", "NewsletterService", "PageService", "experiment", "popups", "goals", "id", "NotificationsService", "$location", "_", "$upload", "$q", "$window", "OptimizelyService"];

    function ExperimentController($scope, PopupsService, $log, CustomerService, NewsletterService, PageService, experiment, popups, goals, id, NotificationsService, $location, _, $upload, $q, $window, OptimizelyService) {

        var vm = this
        vm.CustomerService = CustomerService
        vm.query = ""

        vm.variations = []
        vm.popups = popups.data || []
        vm.experiment = experiment || {}
        vm.experiment.description = vm.experiment.description.replace("NL: ", "")
        vm.goals = goals || []

        if (!_.isEmpty(vm.experiment)) {

            _.each(vm.experiment.variation_ids, function(variation) {
                OptimizelyService.getVariation(variation).then(function(response) {
                    var variation = response

                    variation.originalId = _.result(_.filter(vm.popups, { name: variation.description })[0], 'id')

                    _.each(vm.popups, function(popup) {
                        var match = variation.js_component.match(/id\s*\:\s*(\d+)/)
                        if (match) {
                            if (match[1] == popup.id) {
                                variation.previewUrl = popup.previewUrl
                                return
                            }
                        }
                    });

                    vm.variations.push(variation)
                    _.debounce(vm.updateWeights, 300)

                })
            })

        }

        vm.popupsFiltered = function() {
            return _.map(_.filter(vm.popups, function(popup) {
                return !_.some(vm.variations, { "previewUrl": popup.previewUrl })
            }))
        }

        vm.updateWeights = _.debounce(function() {
            var weight = Math.floor(10000 / vm.variations.length);
            angular.forEach(vm.variations, function(variation, index) {
                console.log(variation.id, index, weight)
                OptimizelyService.updateVariation(variation.id, {
                    weight: (index == 0 && vm.variations.length % 2 == 0) ? weight + 1 : weight
                });
            })
        }, 1500)

        vm.createVariation = function($item, $model, $label, $event) {

            OptimizelyService.createVariation(vm.experiment.id, $label, "angular.optimizely.popup={id:" + $item.id + "};").then(function(response) {
                response.previewUrl = $item.previewUrl
                vm.variations.push(response)
                vm.variationSelected = ""
                vm.updateWeights()

            }, function(error) {
                NotificationsService.addNotification({
                    message: error.message,
                    type: "error"
                })

            })

        }


        vm.deleteVariation = function(variation_id) {
            var test = 1
            OptimizelyService.deleteVariation(variation_id).then(function(response) {
                NotificationsService.addNotification({
                    message: "Deleted!",
                    type: "success",
                    ttl: 1000
                })
                _.remove(vm.variations, { id: variation_id })

                vm.updateWeights()

            }, function(error) {
                NotificationsService.addNotification({
                    message: error.message,
                    type: "error"
                })

            })
        }

        vm.toggleStatus = function() {
            vm.experiment.status == "Running" ? vm.experiment.status = "Paused" : vm.experiment.status = "Running"
            vm.updateExperiment()
        }

        vm.saveExperiment = function() {
            NotificationsService.addNotification({
                message: "Saved!",
                type: "success"
            })
        }

        vm.updateExperiment = function() {

            var experiment = angular.copy(vm.experiment)

            experiment.description = vm.experiment.description.indexOf("NL: ") == -1 ? "NL: " + vm.experiment.description : vm.experiment.description

            OptimizelyService.updateExperiment(experiment).then(function(response) {

                _.each(vm.goals, function(goal) {
                    if (!_.includes(goal.experiment_ids, experiment.id)) {
                        goal.experiment_ids.push(experiment.id)

                        OptimizelyService.updateGoal(goal.id, { experiment_ids: goal.experiment_ids }).then(function(response) {

                        }, function(error) {
                            NotificationsService.addNotification({
                                message: error.message,
                                type: "error"
                            })
                        })
                    }
                })

            }, function(error) {

                NotificationsService.addNotification({
                    message: error.message,
                    type: "error"
                })

            })
        }

        vm.deleteExperiment = function(experiment_id) {
            OptimizelyService.deleteExperiment(experiment_id).then(function(response) {
                if (vm.experiment.id) {
                    $location.path("/bbadmin/experiments")
                } else {
                    _.remove(vm.experiments, { id: experiment_id })
                }
            }, function(error) {
                NotificationsService.addNotification({
                    message: error.message,
                    type: "error"
                })

            })

        }

        vm.CustomerService.getData().then(function(response) {
            if (response.loggedIn) {
                $scope.$emit("viewLoaded")
            } else {
                $window.history.back()
            }
        })

        PageService.setMicrodataItemType("ItemPage")
        PageService.setBodyClass("Experiments-page")

    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .directive("contenteditable", contenteditable);

    function contenteditable() {
        return {
            restrict: "A",
            require: "ngModel",
            link: function($scope, element, attrs, ngModel) {

                function read() {
                    ngModel.$setViewValue(element.html());
                }

                ngModel.$render = function() {
                    element.html(ngModel.$viewValue || "");
                };

                element.bind("blur keyup change", function() {
                    $scope.$apply(read);
                });
            }
        };
    };

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("ExperimentsController", ExperimentsController);

    ExperimentsController.$inject = ["$scope", "PopupsService", "$log", "CustomerService", "NewsletterService", "PageService", "experiments", "popups", "id", "NotificationsService", "$location", "_", "$upload", "$q", "$window", "OptimizelyService"];

    function ExperimentsController($scope, PopupsService, $log, CustomerService, NewsletterService, PageService, experiments, popups, id, NotificationsService, $location, _, $upload, $q, $window, OptimizelyService) {

        var vm = this
        vm.CustomerService = CustomerService
        vm.query = ""

        vm.filterSorter = {}
        vm.filterOptions = []
        vm.sorterOptions = []

        // List view
        vm.experiments = experiments || []
        vm.popups = popups ? popups.data : []

        _.each(experiments, function(experiment) {
            OptimizelyService.getExperimentStats(experiment.id).then(function(response) {
                experiment.stats = response
            })
        })

        vm.search = function(item) {
            var result = false
            if (!vm.query || (item.description.toLowerCase().indexOf(vm.query) != -1) || (item.id.toString().indexOf(vm.query) != -1)) {
                result = true
            }
            return result
        };

        vm.changeSorter = function(sorter, label) {
            var newSorter = (vm.filterSorter.selectedSorter == sorter) ? "-" + sorter : sorter
            vm.showSorters = false
            vm.filterSorter.selectedSorter = newSorter
            $location.search("sort", newSorter)
        }

        vm.createExperiment = function() {
            OptimizelyService.createExperiment("betabrand.com", "New experiment").then(function(response) {
                $location.path("/bbadmin/experiments/" + response.id)
            }, function(error) {
                NotificationsService.addNotification({
                    message: error.message,
                    type: "error"
                })

            })

        }

        vm.deleteExperiment = function(experiment_id) {
            OptimizelyService.deleteExperiment(experiment_id).then(function(response) {
                _.remove(vm.experiments, { id: experiment_id })
            }, function(error) {
                NotificationsService.addNotification({
                    message: error.message,
                    type: "error"
                })

            })

        }

        vm.CustomerService.getData().then(function(response) {
            if (response.loggedIn) {
                $scope.$emit("viewLoaded")
            } else {
                $window.history.back()
            }
        })

        PageService.setMicrodataItemType("ItemPage")
        PageService.setBodyClass("Experiments-page")

    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("VariationsController", VariationsController);

    VariationsController.$inject = ["$scope", "PopupsService", "$log", "CustomerService", "NewsletterService", "PageService", "NotificationsService", "$location", "_", "$upload", "$q", "$window", "experiments", "popups", "id", "OptimizelyService"]

    function VariationsController($scope, PopupsService, $log, CustomerService, NewsletterService, PageService, NotificationsService, $location, _, $upload, $q, $window, experiments, popups, id, OptimizelyService) {

        PageService.setBodyClass("bb-admin")

        var vm = this
        vm.CustomerService = CustomerService
        vm.query = ""

        vm.filterSorter = {}

        vm.filterOptions = []

        vm.deviceSize = "desktop"

        // Style Defaults
        vm.customCss = {
            "bg": {
                "cbg": true
            },
            "pi": "",
            "hl": {
                "s": { "fs": 1 },
                "m": { "fs": 1 },
                "l": { "fs": 3 },
            },
            "shl": {
                "s": { "fs": 3 },
                "m": { "fs": 3 },
                "l": { "fs": 5 },
            }
        }

        vm.roadblockImage = "/angular/images/patterns/skulls.png"

        vm.sorterOptions = [
            { "label": "Name ↓", "attribute": "-name" },
            { "label": "Name ↑", "attribute": "name" },
            { "label": "Id ↓", "attribute": "-id" },
            { "label": "Id ↑", "attribute": "id" },
        ]


        // List view
        vm.newsletterForms = popups.data ? popups.data : []

        // Edit view
        vm.customModal = id ? _.find(popups.data, { id: id }) : {}

        var id = window.location.search.match(/[\?|&]id=(\d+)/)

        // duplicating another varation
        if (id)
            vm.customModal.id = null

        if (vm.customModal.customCss) {
            vm.customModal.customCss = JSON.parse(vm.customModal.customCss)
        }

        vm.search = function(item) {
            var result = false
            if (!vm.query || (item.name.toLowerCase().indexOf(vm.query) != -1) || (item.id.toString().indexOf(vm.query) != -1)) {
                result = true
            }
            return result
        };

        vm.changeSorter = function(sorter, label) {
            var newSorter = (vm.filterSorter.selectedSorter == sorter) ? "-" + sorter : sorter
            vm.showSorters = false
            vm.filterSorter.selectedSorter = newSorter
            $location.search("sort", newSorter)
        }

        var prepForSave = function() {
            var modal = angular.copy(vm.customModal)
            modal.customCss = JSON.stringify(modal.customCss)
            return modal
        }

        var renderPreview = function() {
            var deferred = $q.defer()
            html2canvas(document.getElementById("newsletter-preview"), {
                onrendered: function(canvas) {
                    canvas.toBlob(function(blob) {
                        blob.name = vm.customModal.id + "-preview.jpg"
                        $upload.upload({
                            url: '/all/index/upload?width=800&maintain_aspect=true',
                            file: blob
                        }).then(function(response) {
                            deferred.resolve(response.data.image)
                        }, function(error) {
                            deferred.reject(error)
                        }, function(evt) {
                            // var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                            // console.log('progress: ' + progressPercentage + '% ');
                        });

                    }, "image/jpeg");
                }
            });
            return deferred.promise
        }

        vm.createPopup = function(event, form) {
            if (!form.$valid) {
                NotificationsService.addNotification({
                    message: "Whoops! You need to name your popup",
                    type: "error"
                })
                return false;
            }

            var modal = prepForSave()

            PopupsService.createPopup(modal).then(
                function(response) {
                    renderPreview().then(function(response) {
                            modal.previewUrl = response

                            NotificationsService.addNotification({
                                message: "Created!",
                                type: "success"
                            })
                        },
                        function(response) {
                            NotificationsService.addNotification({
                                message: "Created, but couldn't create a preview image.",
                                type: "warning"
                            })
                        });
                },
                function(response) {
                    $log.debug("[PopupsService] Could not create popup")
                    NotificationsService.addNotification({
                        message: response.message,
                        type: "error"
                    })
                }
            )
        }

        vm.updatePopup = function() {
            var modal = prepForSave()

            renderPreview().then(function(response) {

                modal.previewUrl = response

                PopupsService.updatePopup(modal).then(
                    function(response) {

                        NotificationsService.addNotification({
                            message: "Updated!",
                            type: "success",
                            ttl: 4000
                        })
                    },
                    function(error) {
                        NotificationsService.addNotification({
                            message: response.status,
                            type: "error"
                        })
                    })
            })
        }

        vm.codeCopied = function() {
            vm.copyResponseText = "Code copied!"
        }

        vm.submitEmail = function(event, email, whichForm) {
            event.preventDefault();
            vm.isLoadingEmail = false
            vm.successView = true
        }

        vm.submitFacebook = function() {
            vm.isLoadingFacebook = false
            vm.facebookLogin = true
            vm.successView = true
        }

        vm.uploadImage = function(files) {

            var reader = new FileReader()

            reader.onload = function(evt) {
                var image = new Image();
                image.onload = function(evt) {
                    var width = this.width;

                    $upload.upload({
                        url: '/all/index/upload/?width=' + width + '&maintain-aspect=true',
                        file: files
                    }).then(function(response) {
                        console.log('Success ' + response.data.image + 'uploaded. Response: ' + response.data);
                        vm.customModal.imageUrl = response.data.image
                    }, function(response) {
                        console.log('Error status: ' + response.status);

                        NotificationsService.addNotification({
                            message: response.status,
                            type: "error"
                        })

                    }, function(evt) {
                        var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        console.log('progress: ' + progressPercentage + '% ');
                    });


                };
                image.src = evt.target.result;
            };
            reader.readAsDataURL(files[0]);
        }

        vm.createExperiment = function(variation) {
            OptimizelyService.createExperiment(variation.targeting, "NL: New experiment").then(function(response) {
                var experiment = response
                experiment.url_conditions[0].match_type = "substring"

                NotificationsService.addNotification({
                    message: "Creating your experiment...",
                    type: "warning"
                })
                OptimizelyService.updateVariation(response.variation_ids[0], {
                    js_component: "angular.optimizely.popup={id:" + variation.id + "};",
                    label: variation.name
                }).then(function() {
                    return OptimizelyService.deleteVariation(response.variation_ids[1]);
                }).then(function() {
                    return OptimizelyService.updateExperiment(experiment)
                }).then(function() {
                    $location.path("/bbadmin/experiments/" + response.id)
                })
            }, function(error) {
                NotificationsService.addNotification({
                    message: error.message,
                    type: "error"
                })
            })

        }

        vm.toggleActive = function(popup) {
            popup.active = !popup.active
            PopupsService.updatePopup(popup).then(
                function(response) {
                    NotificationsService.addNotification({
                        message: "Popup is now " + ((popup.active) ? "Active" : "Inactive"),
                        type: "success"
                    })
                }
            );
        }


        vm.CustomerService.getData().then(function(response) {
            if (response.loggedIn) {
                $scope.$emit("viewLoaded")
            } else {
                $window.history.back()
            }
        })

    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .factory("ActivityStreamService", ActivityStreamService);

    ActivityStreamService.$inject = ["$http", "$log"];

    function ActivityStreamService($http, $log) {
        return {
            addActivity: addActivity
        };

        function addActivity(verb, entityId) {
            return $http({
                    method: "POST",
                    url: "/api/rest/stream/activities",
                    data: {
                        verb: verb,
                        submission_id: entityId
                    }
                })
                .then(addActivityComplete)
                .catch(addActivityFailed);

            function addActivityComplete(response) {
                return response;
            }

            function addActivityFailed(error) {
                return error;
            }
        }
    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("SubmissionAdminController", SubmissionAdminController);

    SubmissionAdminController.$inject = ["$scope", "$rootScope", "ImageService", "ThinkTankService", "CustomerService", "PageService", "NotificationsService", "_", "resolveData", "$location", "TagFilterPrep", "$window", "TagsService"]

    function SubmissionAdminController($scope, $rootScope, ImageService, ThinkTankService, CustomerService, PageService, NotificationsService, _, resolveData, $location, TagFilterPrep, $window, TagsService) {

        PageService.setBodyClass("bb-admin")

        var vm = this
        vm.CustomerService = CustomerService
        vm.formattedThumbnails = ImageService.lazyFormatSrc
        vm.allSubmissionsCount = resolveData.data.length
        vm.originalSubmissions = TagFilterPrep.prepareSubmissionTags(resolveData.data)
        vm.allSubmissions = vm.originalSubmissions
        vm.filteredSubmissions = []
        vm.submissionManager = true
        vm.query = ""
        vm.view = localStorage["admin_submission_view"] || "list"

        TagsService.getTags().then(function(response) {
            vm.tags = response
        })

        vm.currentPage = $location.search().page || 1;

        vm.filterSorter = {}

        vm.filterOptions = [
            { "label": "Gender", "attribute": "gender", "position": 0, "active": true },
            { "label": "Category", "attribute": "tags", "position": 1, "active": true },
            { "label": "Collections", "attribute": "collection", "position": 2, "active": false },
            { "label": "Contests", "attribute": "contest", "position": 3, "active": false }
        ]

        vm.sorterOptions = [
            { "label": "Submitted ↓", "attribute": "-createdAt" },
            { "label": "Submitted ↑", "attribute": "createdAt" },
            { "label": "Name ↓", "attribute": "-name" },
            { "label": "Name ↑", "attribute": "name" },
            { "label": "Id ↓", "attribute": "-id" },
            { "label": "Id ↑", "attribute": "id" },
            { "label": "State ↓", "attribute": "-state" },
            { "label": "State ↑", "attribute": "state" },
        ]


        vm.changeSorter = function(sorter, label) {
            var newSorter = (vm.filterSorter.selectedSorter == sorter) ? "-" + sorter : sorter
            vm.showSorters = false
            vm.filterSorter.selectedSorter = newSorter
            $location.search("sort", newSorter)
        }

        vm.toggleView = function() {
            vm.view = (vm.view == "list") ? "grid" : "list"
            localStorage["admin_submission_view"] = vm.view;
        }

        vm.search = function(item) {
            var result = false
            if (!vm.query || (item.name.toLowerCase().indexOf(vm.query.toLowerCase()) != -1) || (item.id.toString().indexOf(vm.query) != -1) || (item.state.toLowerCase().indexOf(vm.query.toLowerCase()) != -1)) {
                result = true
            }
            _.each(item.designers, function(designer, i) {
                if (designer.label.toLowerCase().indexOf(vm.query.toLowerCase()) != -1 || designer.email.toLowerCase().indexOf(vm.query.toLowerCase()) != -1) {
                    result = true
                }
            })
            _.each(item.tags, function(tag, i) {
                if (tag.toLowerCase().indexOf(vm.query.toLowerCase()) != -1) {
                    result = true
                }
            })
            if (item.contest) {
                if (item.contest.toLowerCase().indexOf(vm.query.toLowerCase()) != -1) {
                    result = true
                }
            }
            if (item.collection) {
                if (item.collection.toLowerCase().indexOf(vm.query.toLowerCase()) != -1) {
                    result = true
                }
            }
            return result
        };

        vm.update = function(submission, oldVal) {

            var publishedStates = new RegExp(/published|greenlit|crowdfunding|archived/)

            var match = publishedStates.exec(submission.state)

            if (match) {
                if (!submission.urlKey || !submission.seoFriendlyTagline) {

                    NotificationsService.addNotification({
                        message: "Please enter a URL Key and SEO Fiendly Tagline in order to change the state",
                        type: "error"
                    })
                    submission.state = oldVal
                    return
                }
            }

            submission.isAdmin = true

            var data = _.cloneDeep(submission)
                // Get just the tag id
            data.tags = _.map(submission.tags, function(tag) { return parseInt(_.chain(_.find(vm.tags, { 'tag': tag })).value().id) })

            ThinkTankService.updateDesign(data).then(
                function() {
                    NotificationsService.addNotification({
                        message: "Updated!",
                        type: "success"
                    })
                },
                function(error) {
                    NotificationsService.addNotification({
                        message: "Couldn't update this entry! \n" + error.data.messages.error[0].message,
                        type: "error"
                    })
                })
        }

        vm.setQueryParam = function(newPageNumber) {
            $location.search("page", newPageNumber);
        }

        vm.CustomerService.getData().then(function(response) {
            if (response.loggedIn) {
                $scope.$emit("viewLoaded")
            } else {
                $window.history.back()
            }
        })

        $scope.$on('$routeUpdate', function(event) {
            vm.currentPage = $location.search().page || 1;
        });
    }
})();


(function() {
    'use strict';

    angular
        .module("BetabrandApp")
        .filter('dateToISO', function() {
            return function(input) {
                input = (input == "0000-00-00 00:00:00") ? "2010-02-19 00:00:00" : input
                input = new Date(input).toISOString();
                return input;
            };
        })

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .factory("TagFilterPrep", TagFilterPrep);

    TagFilterPrep.$inject = ["_"];

    function TagFilterPrep(_) {
        return {
            prepareSubmissionTags: function(submissions) {

                _.each(submissions, function(submission, index) {
                    submission.tags = _.uniq(_.map(submission.tags, "tag"))

                    if (submission.gender == "Not specified" || !submission.gender || submission.gender == null || submission.gender == undefined) {
                        submission.gender =
                            _.includes(submission.tags, 'Womens') ? "women" :
                            _.includes(submission.tags, 'Mens') ? 'men' : "unisex"

                    }

                    // if submission tags contains a tag starting with contest, add a contest key to the submission

                    submission.contest = _.remove(submission.tags, _.method('includes', 'contest:'))[0];
                    submission.collection = _.remove(submission.tags, _.method('includes', 'collection:'))[0];

                    _.remove(submission.tags, function(tag) {
                        return tag === 'Womens' || tag === 'Mens' || tag === 'Unisex'
                    });
                })

                return submissions

            }
        };

    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("SubmissionAdminPublishController", SubmissionAdminPublishController);

    SubmissionAdminPublishController.$inject = ["$scope", "$window", "$timeout", "submission", "id", "PageService", "ThinkTankService", "TagsService", "ActivityStreamService", "CustomerService", "NotificationsService", "_", "$location"];

    function SubmissionAdminPublishController($scope, $window, $timeout, submission, id, PageService, ThinkTankService, TagsService, ActivityStreamService, CustomerService, NotificationsService, _, $location) {

        PageService.setBodyClass("bb-admin")

        var vm = this
        vm._ = _
        var id = parseInt(id)
        vm.CustomerService = CustomerService
        vm.submissionManager = true

        vm.updateSuccess = false
        vm.submission = id ? _.find(submission.data, { id: id }) : {}

        var clearQuery = function() {
            vm.query = "";
        }

        vm.loadTags = function($query) {
            return TagsService.getTags().then(function(response) {
                return response.filter(function(tag) {
                    return tag.tag.toLowerCase().indexOf($query.toLowerCase()) != -1;
                });
            });
        };

        vm.cancel = function() {
            $window.history.back()
        }

        vm.createTag = function(tag) {
            TagsService.createTag(tag).then(
                function(response) {
                    vm._.remove(vm.submission.tags, tag)
                    vm.submission.tags.push(response)
                },
                function(response) {
                    vm._.remove(vm.submission.tags, tag)
                    NotificationsService.addNotification({
                        message: "Couldn't update this entry! \n" + response.data.messages.error[0].message,
                        type: "error"
                    })
                })
        }

        vm.update = function() {

            var data = _.cloneDeep(vm.submission)
            data.tags = [];
            // Get just the tag id
            if (vm.submission.tags.length) {
                for (var i = 0; i < vm.submission.tags.length; i++) {
                    data.tags.push(vm.submission.tags[i].id)
                }
            }
            data.media.video = [data.videoLink]
            data.isAdmin = true

            ThinkTankService.updateDesign(data).then(
                function() {
                    NotificationsService.addNotification({
                        message: "Updated!",
                        type: "success"
                    })
                },
                function(response) {
                    NotificationsService.addNotification({
                        message: "Couldn't update this entry! \n" + response.data.messages.error[0].message,
                        type: "error"
                    })
                })
        }

        vm.publishToThinktank = function() {
            if (window.confirm("Are you sure you want to publish this submission to everyone's activity feed?\nThis cannot be undone.")) {
                ActivityStreamService.addActivity("new_submission", vm.submission.id).then(
                    function(response) {
                        if (response.status == 200) {
                            vm.submission.published = true

                            NotificationsService.addNotification({
                                message: "CONGRATS! You just published the " + vm.submission.name,
                                type: "success"
                            })

                        }
                    },
                    function(response) {
                        NotificationsService.addNotification({
                            message: "UH OH! There was a problem publishing the " + vm.submission.name + ". It was probably already released.",
                            type: "error"
                        })
                    }
                )
            }
        }

        vm.addDesigner = function() {
            vm.submission.designers.push({ "email": "" })
        }

        vm.delete = function() {
            // Should be implemented
        }

        vm.CustomerService.getData().then(function(response) {
            if (response.loggedIn) {
                $scope.$emit("viewLoaded")
            } else {
                $window.history.back()
            }
        })

    }

})();

BetabrandApp.factory('TagsService', ["$http", "$q",
    function TagsService($http, $q) {
        return {
            getTags: function(id) {

                var deferred = $q.defer();

                var request = $http
                    .get('/api/rest/tags')
                    .success(function(response) {
                        deferred.resolve(response)
                    })
                    .error(function(error) {
                        deferred.reject(error)
                    })

                return deferred.promise;
            },

            createTag: function(tag) {
                var deferred = $q.defer()

                $http({
                    method: "post",
                    url: '/api/rest/tags/create',
                    data: tag
                }).success(
                    function(response) {
                        deferred.resolve(response)
                    }
                ).error(
                    function(response) {
                        deferred.reject(response)
                    }
                )
                return deferred.promise

            }
        }
    }
]);

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('bbBillboard', bbBillboard);

    function bbBillboard() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {
                variety: "@",
                alignment: "@",
                theme: "@",
                headline: "@",
                body: "@",
                buttonText: "@",
                url: "@",
                image: "@",
            },
            transclude: true,
            templateUrl: "/angular/app/billboards/billboards.html",
            link: linkFunc,
            controller: bbBillboardController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {

        }
    }

    bbBillboardController.$inject = ["$scope"];

    function bbBillboardController($scope) {
        var vm = this;
    }
})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("buybar", buyBarDirective);

    function buyBarDirective() {
        var directive = {
            restrict: "E",
            scope: {
                product: "=",
                quicklook: "&",
                discreetAddToCart: "@?"
            },
            transclude: true,
            templateUrl: "/angular/app/buybar/buybar.html",
            link: linkFunc,
            controller: buyBarDirectiveController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    buyBarDirectiveController.$inject = ["$scope", "$log", "$document", "$rootScope", "$timeout", "CartService", "ProductService", "ModalService", "_", "NotificationsService", "CustomerService", "TrackingService", "PageService", "OptimizelyService"];

    function buyBarDirectiveController($scope, $log, $document, $rootScope, $timeout, CartService, ProductService, ModalService, _, NotificationsService, CustomerService, TrackingService, PageService, OptimizelyService) {

        var vm = this;

        vm._ = _;
        vm.selectedAttributes = {};
        vm.attributesList = [];
        vm.selectedLabel = (vm.product.id == 4407) ? "Choose amount" : "Choose size";
        vm.options = { isOpen: false };
        vm.question = { email: "" };
        vm.containsUnavailable = false;
        vm.discreetAddToCart = vm.discreetAddToCart || null;
        var addToCartDefault = "Add to Cart";

        vm.addToCartError = "Please Choose a Size";
        vm.addToCartText = addToCartDefault;

        CustomerService.getData().then(function(data) {
            if (vm.question.email == "") {
                vm.question.email = data.email;
            }
        })

        vm.initializeBuyBar = function() {

            //store original configurable prices so we can revert to them if needed
            vm.product.originalPrices = vm.product.prices;

            vm.attributeCount = (vm.product.attributes == undefined) ? 0 : _.keys(vm.product.attributes).length;

            switch (vm.product.state) {
                case 'crowdfunding':
                    vm.addToCartText = 'Fund It';
                    break
                case 'preorder':
                    vm.addToCartText = 'Pre-order';
                    break
                default:
                    vm.addToCartText = 'Add to Cart';
            }

            var selectedRemains = [];
            vm.attributesList = [];
            //initialize values
            angular.forEach(vm.product.attributes, function(attribute, aKey) {
                angular.forEach(attribute, function(option, oKey) {
                    // Create a list of attribute keys
                    vm.attributesList.push(option.label);

                    option.available = vm.isAttributeAvailable(option);
                    option.preorder = vm.isAttributePreorder(option);

                    if (typeof vm.selectedAttributes[option.label] != "undefined" && vm.selectedAttributes[option.label].value == option.value && option.available) {
                        option.selected = true;
                        selectedRemains.push(option.label);
                    } else {
                        option.selected = false;
                    }
                })
            })

            if (selectedRemains.length != vm.attributeCount) {
                vm.selectedLabel = (vm.product.id == 4407) ? "Choose amount" : "Choose size";
                vm.selectedAttributes = {};
                vm.enableButton = (vm.product.attributes == false) ? true : false;
            } else {
                angular.forEach(vm.selectedAttributes, function(value, index) {
                    if (selectedRemains.indexOf(index) == -1) {
                        delete vm.selectedAttributes[index];
                    }
                })
                if (Object.keys(vm.selectedAttributes).length == vm.attributeCount) {
                    vm.enableButton = true;
                }
                vm.updateSelectedAttributes();
            }

            // Remove duplicates
            vm.attributesList = _.uniq(vm.attributesList, true);

            vm.updateAttributes();

            vm.updatePreorderData();
        }

        vm.addToCart = function(item) {

            if ($rootScope.isMobile) {
                $rootScope.mobileBuybar = false;
            }

            vm.addToCartText = (vm.product.state == 'crowdfunding') ? 'Fund it' : 'Add to Cart';
            if (vm.enableButton) {
                item.selectedAttributes = vm.selectedAttributes;
                item.preorder = vm.product.preorder;
                item.crowdfunding = vm.product.crowdfundingActivated;

                CartService.addProduct(angular.copy(item)).then(
                    function(response) {},
                    function(error) {

                        NotificationsService.addNotification({
                            message: error,
                            type: "error"
                        })

                    })

                // Close quicklook if available
                vm.quicklook();

                ProductService.showSidebar = false;

                if (vm.discreetAddToCart != "true") {
                    if (!$rootScope.isMobile) {
                        vm.showAddToCartModal(angular.copy(item));

                    } else {
                        CartService.showCart = true;
                    }
                }

            } else {
                // Find the attributes that aren't currently selected
                var labels = _.pull(vm.attributesList, Object.keys(vm.selectedAttributes).toString());

                vm.addToCartError = "Select a " + labels.join(" & ");

                vm.addToCartText = vm.addToCartError;
                vm.showOptions();
            }

        }

        vm.showAddToCartModal = function(item) {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/add-to-cart/add-to-cart-modal.html",
                controller: "AddToCartModalController",
                inputs: {
                    item: item
                }
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        vm.updateAttributes = function() {
            angular.forEach(vm.product.attributes, function(attribute, aKey) {
                angular.forEach(attribute, function(option, oKey) {
                    option.available = vm.isAttributeAvailable(option);
                    option.preorder = vm.isAttributePreorder(option);
                    // Set if any attribute options are out of stock
                    if (!vm.isAttributeAvailable(option)) {
                        vm.containsUnavailable = true;
                    }
                })
            })
        }

        vm.updateSelectedAttributes = function() {

            angular.forEach(vm.product.attributes, function(attribute, aKey) {
                angular.forEach(attribute, function(option, oKey) {
                    if (option.selected) {
                        vm.selectedAttributes[option.label] = option;
                    }
                })
            })
            vm.selectedLabel = _.map(vm.selectedAttributes, function(att) {
                return att.label + ": " + att.value
            }).join(", ");

            CustomerService.selectedAttributes = vm.selectedAttributes;
        }

        vm.selectAttribute = function(index, attribute) {

            vm.addToCartText = (vm.product.state == 'crowdfunding') ? 'Fund it' : 'Add to Cart'

            $log.debug("[BUYBAR]", vm.product.attributes[index])
                //unset any selected options for this attribute
            angular.forEach(vm.product.attributes[index], function(option, oKey) {
                if (option.value == attribute.value) {
                    option.selected = true;
                } else {
                    option.selected = false;
                }
            })

            vm.updateSelectedAttributes();

            vm.updateAttributes();

            vm.updatePreorderData();

            vm.enableButton = (Object.keys(vm.selectedAttributes).length == Object.keys(vm.product.attributes).length)
                //if the buy button is now enabled auto close the menu
            vm.options.isOpen = !vm.enableButton

        }

        vm.isAttributeAvailable = function(attribute) {
            //reduce down all selected attributes into a single object
            var availableConditions = _.reduce(vm.selectedAttributes, function(memo, value) {
                    var add = {}
                    add[value.label] = value.value
                    return _.assignIn(memo, add)
                }, {})
                //add in stock condition
            availableConditions['in_stock'] = true

            //add in the condition in consideration.
            availableConditions[attribute.label] = attribute.value

            //get a list of simple products which match conditions
            var products = _.filter(vm.product.simpleProducts, availableConditions).length

            return (products > 0)

        }

        vm.isAttributePreorder = function(attribute) {
            //Only applies to single attribute products, or multi-attribute if they've selected
            //at least one attribute so far. Otherwise, return
            if (Object.keys(vm.selectedAttributes).length == 0 && vm.attributeCount > 1)
                return false;

            ///Update preorder flag
            var availableConditions = _.reduce(vm.selectedAttributes, function(memo, value) {
                var add = {}
                if (attribute.label != value.label)
                    add[value.label] = value.value
                return _.assignIn(memo, add);
            }, {})

            availableConditions[attribute.label] = attribute.value;

            var simpleProduct = _.filter(vm.product.simpleProducts, availableConditions)[0] || {};

            return simpleProduct.preorder
        }

        vm.showPreOrderModal = function(item) {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/pre-order/pre-order-modal.html",
                controller: "PreOrderModalController",
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        vm.updatePreorderData = function() {
            //Only applies to single attribute products, or multi-attribute if they've selected
            //at least one attribute so far. Otherwise, return
            if (Object.keys(vm.selectedAttributes).length == 0)
                return

            //Retrieve our simple product
            var availableConditions = _.reduce(vm.selectedAttributes, function(memo, value) {
                var add = {}
                add[value.label] = value.value
                return _.assignIn(memo, add)
            }, {})

            var simpleProduct = _.filter(vm.product.simpleProducts, availableConditions)[0]

            //Update product price data

            if (simpleProduct.preorder) {
                vm.product.prices = simpleProduct.prices;
            } else {
                vm.product.prices = vm.product.originalPrices;
            }

            vm.product.preorderSelected = simpleProduct.preorder;
        }

        vm.isAttributeSelected = function(attribute) {

            if (Object.keys(vm.selectedAttributes).length > 0 && typeof vm.selectedAttributes[attribute.label] !== "undefined")
                return vm.selectedAttributes[attribute.label].value == attribute.value

            return false
        }

        vm.showOutOfStockModal = function(attribute) {

            var attributes = [];

            if (attribute) {
                // build the out of stock attribute combination
                var attributes = [attribute.label + ":" + attribute.value];
                angular.forEach(vm.selectedAttributes, function(selAttr, key) {
                    if (selAttr.label != attribute.label) {
                        attributes.push(selAttr.label + ":" + selAttr.value);
                    }
                })
            }

            ModalService.showModal({
                templateUrl: "/angular/app/modal/product/out-of-stock-modal.html",
                controller: "OutOfStockModalController",
                inputs: {
                    product: vm.product,
                    attributes: attributes.sort().join()
                }
            }).then(function(modal) {
                modal.close.then(function(result) {
                    // $log.debug("[BUYBAR]","Closed modal")
                })
            })

        }

        vm.showOptions = function() {
            vm.options.isOpen = !vm.options.isOpen;
        }

        vm.setOpenState = function(event) {
            vm.options.isOpen = !vm.options.isOpen;
            vm.previousButton = event.target;
            if (vm.options.isOpen) {
                $timeout(function() {
                    event.target.nextElementSibling.focus();
                }, 100)
            } else {
                return;
            }
        }

        vm.closeDropdown = function() {
            vm.options.isOpen = !vm.options.isOpen;
            $timeout(function() {
                vm.previousButton.focus();
            }, 100)
        }

        $scope.$watch('vm.product.id', function(current, original) {
            vm.initializeBuyBar()
        });

        $timeout(function() {
            vm.initializeBuyBar()
        }, 1000);

    }
})();


(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .filter('toArray', function() {
            return function(obj, addKey) {
                if (!angular.isObject(obj)) return obj
                if (addKey === false) {
                    return Object.keys(obj).map(function(key) {
                        return obj[key]
                    })
                } else {
                    return Object.keys(obj).map(function(key) {
                        var value = obj[key]
                        return angular.isObject(value) ?
                            Object.defineProperty(value, '$key', { enumerable: false, value: key }) : { $key: key, $value: value }
                    })
                }
            }
        })
})();

BetabrandApp.directive('outOfStockForm', ['ProductService', 'TrackingService',
    function(ProductService, TrackingService) {
        return {
            restrict: 'E',
            templateUrl: '/angular/app/buybar/out-of-stock-form.html',
            replace: true,
            scope: {
                ngModel: '=',
                product: '=',
                attributes: '=?'
            },

            link: function(scope, $document) {
                scope.data = { email: '' }
                scope.restockSubmitted = false

                scope.submitQuestion = function() {
                    scope.data.productId = scope.product.id
                    scope.data.comment = scope.attributes

                    ProductService.submitFeedback('restock', scope.data).then(function() {
                        TrackingService.trackEvent('Subscribe to OOS', { 'Attributes': scope.attributes })
                        scope.restockSubmitted = true
                    })
                }
            }
        }
    }
]);

//Off Click
(function() {
    'use strict';

    BetabrandApp
        .directive("bbCallout", bbCallout);

    function bbCallout() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {
                variety: "@",
                alignment: "@",
                theme: "@",
                headline: "@",
                title: "@",
                image: "@",
                iconImage: "@",
                body: "@",
                icon: "@"
            },
            transclude: true,
            templateUrl: "/angular/app/callouts/callouts.html",
            link: linkFunc,
            controller: bbCalloutController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {

        }
    }

    bbCalloutController.$inject = ["$scope"];

    function bbCalloutController($scope) {
        var vm = this;
    }

})();

(function() {

    "use strict";

    function carousel() {
        var directive = {
            restrict: "EA",
            scope: {
                autoPlay: "@?"
            },
            link: linkFunc,
            controller: carouselController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            ctrl.$timeout(function() {
                var flkty = new Flickity(el[0], {
                    // options
                    cellAlign: "left",
                    wrapAround: true,
                    contain: true,
                    cellSelector: ".carousel-cell",
                    pageDots: false,
                    autoPlay: $scope.autoPlay || 10000
                });

            }, 1000);

        }
    }

    carouselController.$inject = ["$scope", "$timeout"];

    function carouselController($scope, $timeout) {

        var vm = this;
        vm.$timeout = $timeout

    }

    angular
        .module("BetabrandApp")
        .directive("carousel", carousel);

})();

(function() {
    'use strict';
    angular
        .module('BetabrandApp')
        .controller("CartController", cartController);
    cartController.$inject = ['$scope', '$window', '$location', 'CartService', '$document', 'NotificationsService', '$timeout', 'TrackingService', 'hotkeys', '$rootScope', 'CustomerService', '_']

    function cartController($scope, $window, $location, CartService, $document, NotificationsService, $timeout, TrackingService, hotkeys, $rootScope, CustomerService, _) {
        var vm = this
        vm.initialized = false

        vm.CartService = CartService
        vm.discountCode = null
        vm.discountMessage = null
        vm.initialized = false
        vm.CustomerService = CustomerService
        vm.cartContext = 'offscreen'

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Cart',
                callback: function() {
                    vm.closeCart()
                }
            })
            .add({
                combo: 'tab',
                description: 'focus Next',
                callback: function(e) {
                    vm.focusNext(e)
                }
            })
            .add({
                combo: 'shift+tab',
                description: 'focus prev',
                callback: function(e) {
                    vm.focusPrevious(e)
                }
            })


        vm.focusNext = function(e) {
            if (CartService.showCart) {
                e.preventDefault();
                var potentiallyTabbableChildren = document.getElementById("cart").querySelectorAll('input, button, select, textarea, a[href], *[tabindex]');
                var tabbables = Array.prototype.filter.call(potentiallyTabbableChildren, function(item) {
                    return item.tabIndex >= 0;
                });
                if (tabbables.indexOf(e.target) < (tabbables.length - 1)) {
                    tabbables[(tabbables.indexOf(e.target) + 1)].focus();
                } else {
                    tabbables[0].focus();
                }
            }
        }

        vm.focusPrevious = function(e) {
            if (CartService.showCart) {
                console.log('focusPrevious');
                e.preventDefault();
                var potentiallyTabbableChildren = document.getElementById("cart").querySelectorAll('input, button, select, textarea, a[href], *[tabindex]');
                var tabbables = Array.prototype.filter.call(potentiallyTabbableChildren, function(item) {
                    return item.tabIndex >= 0;
                });
                if (tabbables.indexOf(e.target) == 0) {
                    tabbables[(tabbables.length - 1)].focus();
                } else {
                    tabbables[(tabbables.indexOf(e.target) - 1)].focus();
                }
            }
        }

        vm.removeProduct = function(item, index) {
            CartService.removeProduct(item, index).then(
                function(response) {

                },
                function(error) {
                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                }
            )
        }

        vm.updateTotal = function(item) {

            CartService.updateTotal(item).then(
                function(response) {

                },
                function(error) {
                    NotificationsService.addNotification({
                            message: error,
                            type: "error"
                        })
                        // Update the cart data so that the old Qty of the cart is set
                    CartService.getCartData()
                }
            )
        }

        vm.debouncedUpdateTotal = _.debounce(vm.updateTotal, 500)

        vm.toggleCart = function() {
            CartService.showCart = !CartService.showCart

            if ($rootScope.isMobile) {
                $rootScope.mobileBuybar = false
            }
        }

        vm.closeCart = function() {
            CartService.showCart = false
            document.getElementById("cart-toggle").focus();
        }

        vm.openCheckout = function() {

            CartService.fireCartFlames.activated = true
            CartService.fireCartChug.activated = false
            CartService.fireCartDrive.activated = true
                //stop the firecart in 4 seconds
            $timeout(function() {
                CartService.fireCartFlames.activated = false
                CartService.fireCartDrive.activated = false
            }, 4000);


            CartService.showCart = false

            if ($rootScope.isMobile) {
                $rootScope.mobileBuybar = false
            }

            TrackingService.trackEvent("Click Checkout")

            $timeout(function() {
                $location.url('/cart/checkout')
            }, 260);

        }

        vm.applyCoupon = function(code) {

            CartService.applyCoupon(code).then(
                function(data) {
                    vm.discountSuccessMessage = "Successfully applied coupon!"
                    $timeout(function() {
                        vm.discountSuccessMessage = false
                    }, 4000);
                },
                function(data) {
                    if ((data.messages.error[0].message.toLowerCase() == 'code betabucks25 is not valid') && (CartService.data.totals.grand_total.value < 125)) {
                        data.messages.error[0].message = "Please add $" + parseFloat(Math.round((125 - CartService.data.totals.grand_total.value) * 100) / 100).toFixed(2) + " to activate discount"
                    }
                    vm.discountErrorMessage = data.messages.error[0].message
                    vm.discountError = data.messages.error[0]

                    $timeout(function() {
                        vm.discountErrorCode = data.messages.error[0].message;
                        vm.discountErrorMessage = false
                        vm.discountError = false
                    }, 10000);
                }
            )
        }

        vm.removeCoupon = function() {
            CartService.removeCoupon().then(
                function(response) {

                },
                function(error) {
                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                }
            )
        }

        vm.paypalCheckout = function() {
            TrackingService.trackEvent('Page Interaction', { 'Type': 'Paypal Express Checkout Link' })
            $window.location.href = '/betapaypal/index/initiate/'
        }

        $scope.$watch('vm.CartService.showCart', function(newVal, oldVal) {

            if (newVal == true) {

                CartService.showDiscount = false

                $timeout(function() {

                    hotkeys.bindTo($scope)
                        .add({
                            combo: 'esc',
                            description: 'Close Cart',
                            callback: function() {
                                vm.closeCart()
                            }
                        })

                }, 610);

                TrackingService.trackEvent("View Cart")
            }
        })

        $scope.$on('loggedIn', function(response) {
            CartService.getCartData()
        });

        $scope.$on('loggedOut', function(response) {
            CartService.getCartData()
        });

        $scope.$on('checkoutSuccess', function(response) {
            CartService.getCartData()
        });

        //initialize cart
        $rootScope.$on('viewLoaded', function(event, current) {
            if (!vm.initialized) {
                CartService.getCartData().then(function() {
                    vm.initialized = true
                })
                vm.initialized = true;
            }
        })

        //hack to make cart abandonment work
        var search = $location.search()
        if (search.open_cart != undefined) {
            $timeout(function() {
                CartService.showCart = true;
            })
        }

    }
})();

BetabrandApp.factory('CartService', ['$rootScope', 'TrackingService', '_', '$http', '$q', '$log', '$timeout', 'LoggingService', 'OptimizelyService',
    function($rootScope, TrackingService, _, $http, $q, $log, $timeout, LoggingService, OptimizelyService) {

        function CartService() {
            var self = this

            self.products = []
            self.discount = 0
            self.total = 0
            self.subTotal = 0
            self.quantity = 0
            self.totals = []
            self.data = {}
            self.outOfStockItems = []
            self.mostRecentPromise = $q.defer()
            self.showDiscount = false
            self.hasCrowdfundingItems = false
            self.showCart = false
            self.fireCartFlames = { activated: false }
            self.fireCartChug = { activated: false }
            self.fireCartDrive = { activated: false }
            self.cartClearedByUser = false
            self.initialized = false
            self.freeTshirtEligible = false

            self.addProductIllusion = function(product) {
                if (product == undefined)
                    return

                var exists = -1

                //check to see if item already exists in cart
                if (self.data.items) {
                    exists = _.findIndex(self.data.items, function(prod) {

                        var selectedOptions = _.reduce(product.selectedAttributes, function(memo, value) {
                            var add = {};
                            add[value.label] = value.value;
                            return _.assignIn(memo, add)
                        }, {})

                        if (prod.options) {
                            return prod.productId == product.id && JSON.stringify(selectedOptions).toLowerCase() == JSON.stringify(prod.options).toLowerCase()
                        } else {
                            return prod.productId == product.id
                        }
                    })
                }

                if (exists !== -1) {
                    self.data.items[exists].qty++
                } else {
                    //build a fake cart item so it looks like the item has been added before the backend responds
                    var cartItem = {
                        illusion: true,
                        image: product.thumbnail,
                        price: product.prices.final,
                        qty: 1,
                        name: product.name,
                        url: product.canonicalUrl,
                        options: _.reduce(product.selectedAttributes, function(memo, value) {
                            var add = {};
                            add[value.label] = value.value;
                            return _.assignIn(memo, add)
                        }, {})
                    }

                    self.data.items ? self.data.items.push(cartItem) : self.data.items = [cartItem]
                }
            }

            self.addProduct = function(product) {
                var deferred = $q.defer()
                self.mostRecentPromise = deferred

                if (product == undefined)
                    return deferred.reject("No Product")

                //start the fire cart
                self.fireCartFlames.activated = true
                self.fireCartChug.activated = false
                    //stop the firecart in 1.5 seconds
                $timeout(function() { self.fireCartFlames.activated = false }, 2500);

                TrackingService.trackEvent('Add To Cart')

                //build add to cart data structure
                var addToCartData = {
                    "product": product.id,
                    "attributes": []
                }

                //loop over selected simple attributes add to above data structure
                angular.forEach(product.selectedAttributes, function(obj, key) {
                    var attribute = { id: obj.id, value: obj.value_id }
                    addToCartData.attributes.push(attribute)
                })


                var dataBackup = {}
                dataBackup = _.merge(dataBackup, self.data)
                    //make product show up instantly without waiting for server
                self.addProductIllusion(product)
                LoggingService.clientDebugLog(self.data, "Cart Data Before Add")
                var request = $http({
                    method: "post",
                    url: "/api/rest/cart/",
                    data: addToCartData
                }).success(function(response) {
                    if (deferred == self.mostRecentPromise) {
                        self.updateCart(response)
                        LoggingService.clientDebugLog(self.data, "Cart Data After Add")
                    }

                    TrackingService.track('addedToCart', self.data)

                    deferred.resolve(response)
                }).error(function(error) {
                    //remove illusory product
                    self.data = dataBackup
                    deferred.reject(error)
                })

                return deferred.promise

            }

            self.removeProduct = function(item, index) {

                //firecart chug
                self.fireCartChug.activated = true
                $timeout(function() { self.fireCartChug.activated = false }, 1000);

                var deferred = $q.defer()
                self.mostRecentPromise = deferred

                TrackingService.trackEvent('Remove Product From Cart', { 'Quantity': (item || {}).qty })

                //latency compensation for product remove
                self.data.items.splice(index, 1)

                var request = $http({
                    method: "delete",
                    url: "/api/rest/cart/remove/" + item.cartItemId,
                    data: ""
                }).success(function(response) {
                    if (deferred == self.mostRecentPromise) {
                        self.getCartData()
                    }

                    TrackingService.track('removedFromCart', response)

                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })

                if (self.products.length <= 0) {
                    self.cartClearedByUser = true;
                }

                return deferred.promise
            }

            self.applyCoupon = function(code, method) {
                var deferred = $q.defer()

                if (method == "term")
                    var data = { term: code }
                else
                    var data = { code: code }

                if (code) {
                    self.mostRecentPromise = deferred
                    LoggingService.clientDebugLog(self.data, "Cart Data Before Coupon")
                    var request = $http({
                        method: "post",
                        data: data,
                        url: "/api/rest/coupon/"
                    }).success(function(response) {

                        if (deferred == self.mostRecentPromise) {
                            self.getCartData()
                        }
                        deferred.resolve(response)
                    }).error(function(response) {
                        $log.debug("[cart] Coupon not applied", response)
                        if (deferred == self.mostRecentPromise) {
                            self.getCartData()
                        }
                        deferred.reject(response)
                    })

                    TrackingService.trackEvent('Used Coupon Code')
                }

                return deferred.promise
            }

            self.removeCoupon = function() {
                var deferred = $q.defer()
                self.mostRecentPromise = deferred
                var request = $http({
                    method: "delete",
                    url: "/api/rest/coupon/delete"
                }).success(function(response) {
                    if (deferred == self.mostRecentPromise) {
                        self.getCartData()
                    }
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })

                return deferred.promise
            }

            self.clearCart = function() {

            }

            self.getTotal = function() {
                var total = 0;
                if (self.data.totals) {
                    var grandTotal = _.find(self.data.totals, { 'code': 'grand_total' })
                    if (grandTotal) {
                        total = grandTotal.value;
                    }
                }
                return total
            }

            self.getSubTotal = function() {
                var total = 0;
                if (self.data.totals) {
                    var subTotal = _.find(self.data.totals, { 'code': 'subtotal' })
                    if (subTotal) {
                        total = subTotal.value;
                    }
                }
                return total
            }

            self.getQuantity = function() {
                var totalQuantity = 0
                angular.forEach(self.data.items, function(obj, key) {
                    totalQuantity += obj.qty
                })
                return totalQuantity
            }

            self.updateTotal = function(item) {

                //firecart chug
                self.fireCartChug.activated = true
                $timeout(function() { self.fireCartChug.activated = false }, 1000);

                var deferred = $q.defer()
                self.mostRecentPromise = deferred
                var updateData = { id: item.cartItemId, qty: item.qty }


                var request = $http({
                    method: "put",
                    url: "/api/rest/cart/update/",
                    data: updateData
                }).success(function(response) {
                    if (deferred == self.mostRecentPromise) {
                        TrackingService.track('updateCartData', self.data)
                        self.getCartData()
                    }
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            }

            self.getCartData = function() {
                var deferred = $q.defer()
                this.mostRecentPromise = deferred

                var request = $http({
                    method: "get",
                    url: "/api/rest/cart/get/"
                }).success(function(response) {
                    if (deferred == self.mostRecentPromise) {
                        self.updateCart(response)
                        TrackingService.track('updateCartData', self.data)
                    }
                    deferred.resolve(response)
                    self.initialized = true
                }).error(function(error) {
                    self.initialized = true
                    deferred.reject(error)
                })

                return deferred.promise
            }

            self.updateCart = function(cartData) {

                    //if we didn't get an object, don't update the data
                    if (typeof cartData !== "object")
                        return

                    self.hasCrowdfundingItems = _.find(cartData.items, { crowdfunding: 'crowdfunding' }) !== undefined ? true : false

                    //Check if any cartItems are in catergory 49 (Men's Pants) and set flag for free t-shirts
                    if (!OptimizelyService.handle('showTshirtOffer')) {
                        self.freeTshirtEligible = false
                    } else if ((_.find(cartData.items, function(item) { return _.includes(item.categories, "72") }) !== undefined) || self.hasCrowdfundingItems) {
                        self.freeTshirtEligible = false
                    } else if (_.find(cartData.items, function(item) { return _.includes(item.categories, "49") }) !== undefined) {
                        self.freeTshirtEligible = true
                    } else {
                        self.freeTshirtEligible = false
                    }

                    //grab out of stock items and put them in a new array for display
                    self.outOfStockItems = _.union(self.outOfStockItems, _.filter(cartData.items, { salable: false }))

                    //remove out of stock items from the of cart items
                    _.remove(cartData.items, { salable: false })

                    self.data = cartData
                    LoggingService.clientDebugLog(self.data, "Cart Data Update")
                    self.calculatingTotals = false

                    $rootScope.$emit('updateCart');
                },

                self.hasPreOrderItems = function() {
                    if (typeof self.data.items == "undefined")
                        return false

                    // Good ol' for loop because it's impossible to break out of a angular.forEach()
                    for (var i = 0; i < self.data.items.length; i++) {
                        if (self.data.items[i].preorder) {
                            return true
                        }
                    }

                    return false
                }
        }

        return new CartService()
    }
]);

(function() {

    "use strict";

    CategoryController.$inject = ["$scope", "$rootScope", "$filter", "$q", "CategoryService", "ProductService", "CartService", "TrackingService", "LookupService", "_", "$window", "$timeout", "$location", "PageService", "$route", "OptimizelyService", "$routeParams", "ImageService"]

    function CategoryController($scope, $rootScope, $filter, $q, CategoryService, ProductService, CartService, TrackingService, LookupService, _, $window, $timeout, $location, PageService, $route, OptimizelyService, $routeParams, ImageService) {

        var vm = this

        vm.cart = CartService
        vm.templateUrl = LookupService.templateUrl
        vm._ = _
        vm.collectionLogo = false
        vm.crosssells = []
        vm.$rootScope = $rootScope
        vm.PageService = PageService

        // Advocate Vars

        vm.email = $routeParams.email
        vm.productId = $routeParams.productId
        vm.souce = $routeParams.source
        vm.optimizely = angular.optimizely
        vm.formattedThumbnails = ImageService.lazyFormatSrc
        vm.shardUrl = ImageService.formatImgSrc

        var category = {}

        vm.configurator = {
            travelProducts: [],
            otherProducts: [],
            styles: {}
        }

        vm.filterSorter = {}

        vm.filterOptions = [
            { "label": "Gender", "attribute": "gender", "position": 0, "active": true },
            { "label": "Category", "attribute": "classification", "position": 1, "active": true },
            { "label": "Discount", "attribute": "prices.discount_percentage", "position": 2, "active": true }

            // { "label": "Type", "attribute": "subClassification" },
            // { "label": "Color", "attribute": "color" },
        ]

        vm.sorterOptions = [
            { "label": "Recommended", "attribute": "position", "default": true },
            { "label": "Hot", "attribute": "hotness" },
            { "label": "Price (Low > High)", "attribute": "prices.final" },
            { "label": "Price (High > Low)", "attribute": "-prices.final" }
        ]

        // send a promise to the Tracking service for page tracking data
        var trackingData = null
        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)

        function _buildTrackingData(data) {
            // Analytics: Set up Page Tracking Data
            // ACHTUNG!: This is used to fire GTM events
            var source = ''
            if (data) {
                if (data['isThinkTank'])
                    source = "Think Tank "

                if (data['isCollection'])
                    source += "Collection"
                else
                    source += "Category"
            } else
                source = "Category"


            trackingData = {
                'Source': source + ' Page',
                'Shop Section': data.shopSection,
                'Shop Category': data.key
            }

            trackingDeferred.resolve(trackingData)
        }

        var category_id = $route.current.categoryId || LookupService.id || null

        // Only show on Women's Pants category

        // vm.showSwimlanes = (category_id == 119)

        category = $route.current.locals.category || $route.current.locals.lookupResolve.category

        vm.collectionLogo = (category.logo !== "") ? true : false

        _buildTrackingData(category)

        vm.setUpDPYP = function() {

            var styles = {
                'boot-cut': 0,
                'straight-leg': 1,
                'leggings': 2,
                'cropped-leg': 3,
            }
            var otherProductIds = ['18067', '12790', '12792', '11256', '18659', '19512', '19556', '21774', '21460', '21426']
            var travelProductIds = ['17673', '17639', '10845', '17237', '17239', '11000', '10948', '10847', '8714']

            _.each(vm.data.products, function(product, i) {
                if (_.includes(travelProductIds, product.id)) {
                    vm.configurator.travelProducts.push(product)
                }
                if (_.includes(otherProductIds, product.id)) {
                    vm.configurator.otherProducts.push(product)
                }
            })

            var filteredProducts = vm.data.products

            _.remove(filteredProducts, function(product) {
                return _.includes(travelProductIds, product.id)
            })
            _.remove(filteredProducts, function(product) {
                return _.includes(otherProductIds, product.id)
            })
            _.remove(filteredProducts, function(product) {
                return product.state === "out-of-stock"
            })

            // Grab each style

            var subClassifications = _.compact(_.uniq(_.flattenDeep(_.map(filteredProducts, 'subClassification'))))

            // Separate the styles and get the products, label, and colors for each

            _.each(subClassifications, function(key, i) {
                var products = _.filter(filteredProducts, function(product) {
                    return product.subClassification && product.subClassification.indexOf(key) >= 0
                })
                vm.configurator.styles[key] = {
                    'products': products,
                    'label': key,
                    'position': styles[key],
                    'url': products[0].url,
                    'image': 'https://www.betabrand.com/media/configurator/dpyp/category-images/' + key + '.jpg',
                    'hoveredStyle': products.length + ' Styles'
                }
            })

            vm.otherProducts = OptimizelyService.handle("otherProductsOnDpyp");

        }

        var setUpProducts = function() {
            // Convert API object to array if not already
            var categoryProducts = $route.current.locals.products || $route.current.locals.lookupResolve.products
            category.products = angular.isArray(categoryProducts) ? categoryProducts : Object.keys(categoryProducts).map(function(k) {
                return categoryProducts[k]
            })

            _.each(category.products, function(product, i) {
                if (product.counts) {
                    // Check if all products in voting for vote count sorters
                    if (product.counts.state == 'voting') {
                        category.isVotingCategory = true
                    } else {
                        category.isVotingCategory = false
                    }
                } else {
                    // For filtering when mixed CF and RTW products
                    product.counts = { crowdfunding: { activated: 0, count: 0, days_remaining: 0, end_date: "1970/01/01 00:00:00", min: null, tiers: [] }, state: "voting", voting: { activated: 0, count: 0, min: 0, start_date: "1970/01/01 00:00:00" } }
                }
                // For filtering when mixed CF and RTW products
                if (product.counts.comments == undefined) {
                    product.counts.comments = { count: 0 }
                }

                // handle unisex products based on the category
                if ($location.path().indexOf('/womens/') > -1) {
                    product.gender = "women"
                } else if ($location.path().indexOf('/mens/') > -1) {
                    product.gender = "men"
                } else {
                    product.gender = (product.gender == "unisex") ? ["men", "women"] : product.gender
                }

            })

            vm.data = category
            vm.categoryData = category

            vm.PageService.setTitle(category.title)
            afterCategoryLoad()

        }

        if (category.children) {
            for (var i = 0; i < category.children.length; i++) {
                if (category.children[i].includeInMenu) {
                    // Top Level Category
                    vm.data = category
                    vm.data.children = _.filter(category.children, { includeInMenu: true })

                    afterCategoryLoad()
                }
                if (category.children[i].isCrosssell) {
                    // Crosssells
                    ProductService.getProductsForCategoryId(category.children[i].id).then(function(catData) {
                        // Convert API object to array if not already
                        var crosssells = angular.isArray(catData) ? catData : Object.keys(catData).map(function(k) {
                            return catData[k]
                        })
                        angular.forEach(crosssells, function(cross) {
                            // Fix breadcrumbs when clicking through by using canonicalUrl
                            cross.url = cross.canonicalUrl
                            vm.crosssells.push(cross)
                        })
                    })
                }
            }
        } else {
            setUpProducts()
            if (category_id == 88)
                vm.setUpDPYP()
        }

        function afterCategoryLoad() {
            TrackingService.track('updateCategoryData', category)
        }

        vm.PageService.setBodyClass('category__page')
        vm.PageService.setMicrodataItemType('CollectionPage')

        $timeout(function() {
            angular.element($window).triggerHandler('scroll')
        });
        $scope.$emit('viewLoaded')

    }

    angular
        .module("BetabrandApp")
        .controller("CategoryController", CategoryController);


})();

(function() {
    'use strict';

    angular
        .module("BetabrandApp")
        .filter('removeCollectionPrefix', function() {
            return function(value) {
                return (!value) ? '' : value.replace("Men's ", "").replace("Women's ", "")
            }
        })
        .filter("sanitize", ['$sce', function($sce) {
            return function(htmlCode) {
                return $sce.trustAsHtml(htmlCode);
            }
        }]);

})();

BetabrandApp.factory('CategoryService', ['$http', '$q',
    function($http, $q) {

        function CategoryService() {

            var self = this
            var id = null

            self.getCategory = function(id) {
                this.id = id
                var deferred = $q.defer()
                $http
                    .get('/api/rest/categories/' + id)
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }
        }
        return new CategoryService()
    }
]);

(function() {

    'use strict';

    function filterBreadcrumbsDirective() {
        var directive = {
            restrict: "E",
            scope: {
                filterSorters: "="
            },
            transclude: true,
            templateUrl: "/angular/app/category/filter-breadcrumbs.html",
            link: linkFunc,
            controller: filterBreadcrumbsDirectiveController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    filterBreadcrumbsDirectiveController.$inject = ["$scope", '_', '$location', 'PageService'];

    function filterBreadcrumbsDirectiveController($scope, _, $location, PageService) {

        var vm = this;
        vm._ = _
        vm.PageService = PageService

        vm.hasSelectedFilters = function() {
            return _.some(vm.filterSorters.selectedFilter, function(f) {
                return f !== "!!"
            })
        }

        vm.clearFilter = function(key) {
            vm.filterSorters.selectedFilter[key] = "!!"
            vm.filterSorters.selectedFilterLabels[key] = "!!"
            $location.search(key, null)
        }
    }

    angular
        .module('BetabrandApp')
        .directive("filterBreadcrumbs", filterBreadcrumbsDirective);


})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("filterSorter", filterSorterDirective);

    function filterSorterDirective() {
        var directive = {
            restrict: "E",
            scope: {
                collection: "=",
                filterOptions: "=",
                sorterOptions: "=",
                filterSorters: "="
            },
            transclude: true,
            templateUrl: "/angular/app/category/filter-sorter.html",
            link: linkFunc,
            controller: filterSorterDirectiveController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            if (attr.hideSorters)
                ctrl.hideSorters = true

        }
    }

    filterSorterDirectiveController.$inject = ["$scope", '$filter', '_', 'TrackingService', '$location', '$rootScope', '$log', '$timeout', 'OptimizelyService', '$window', '$document', 'PageService'];

    function filterSorterDirectiveController($scope, $filter, _, TrackingService, $location, $rootScope, $log, $timeout, OptimizelyService, $window, $document, PageService) {

        var vm = this;
        vm._ = _
        vm.originalCollection = vm.collection
        vm.PageService = PageService
        vm.filters = {}
        vm.filterLabel = 'all'
        vm.filterSorters = {
            selectedFilter: {},
            selectedFilterLabels: {},
            selectedSorter: "",
            selectedSorterLabel: ""
        }
        vm.sorterLabel = ""
        vm.showFilters = false
        vm.showSorters = false
        vm.initialized = false

        function _addFilterOption(filter, options) {
            if (!(filter.attribute in vm.filters)) {
                vm.filters[filter.attribute] = { label: filter.label, attribute: filter.attribute, options: [], position: filter.position, active: filter.active }
            }

            //cast to array so we only have to write push logic once below
            if (typeof options != "object") {
                options = [options]
            }

            _.forEach(options, function(option) {
                //if we haven't already added this to the list
                if (!_.find(vm.filters[filter.attribute].options, { value: option })) {
                    vm.filters[filter.attribute].options.push({ value: option, matching: 0 })
                }
            })
        }

        function _buildFilterSorterLists() {
            _.forEach(vm.collection, function(item) {
                _.forEach(vm.filterOptions, function(filter, key) {
                    //look for item[classification]
                    //look for item[tags.tag]
                    _addFilterOption(filter, _extractProperty(item, filter.attribute))

                })
            })
        }

        function _buildFilterSorterStateObject() {
            _.each(vm.filterOptions, function(filter) {
                vm.filterSorters.selectedFilter[filter.attribute] = "!!"
                vm.filterSorters.selectedFilterLabels[filter.attribute] = "!!"
            })

            var defaultSorter = _.find(vm.sorterOptions, { default: true })
            if (!defaultSorter && vm.sorterOptions.length) {
                defaultSorter = vm.sorterOptions[0]
            }

            if (defaultSorter) {
                vm.filterSorters.selectedSorter = defaultSorter.attribute
                vm.filterSorters.selectedSorterLabel = defaultSorter.label
                vm.sorterLabel = defaultSorter.label
            }
        }

        _buildFilterSorterLists()
        _buildFilterSorterStateObject()

        function _updateFilterCounts() {
            _.each(vm.filters, function(filter, attribute) {
                var count = 0;
                _.each(filter.options, function(option) {
                    var selectedFilters = angular.copy(vm.filterSorters.selectedFilter)
                    selectedFilters[attribute] = option.value
                    var tempCollection = $filter('filterFields')(vm.originalCollection, selectedFilters);
                    option.matching = tempCollection.length
                })

            })

        }

        //This function takes an object {tags:[{tag:red},{tag:blue}]}
        //and a string "tags.tag" and returns the reduced
        //properties ['red', 'blue']
        function _extractProperty(object, propertyString) {
            object = angular.copy(object)
            var propertyArray = propertyString.split(".")
            _.each(propertyArray, function(p) {
                var reduced = []
                if (typeof object == "undefined") {
                    return ""
                }
                if (object.constructor == Array) {
                    _.each(object, (function(item) {
                        reduced.push(_.get(item, p))
                    }))
                } else {
                    reduced = _.get(object, p)
                }

                object = reduced
            })
            return object
        }

        function _filterAndSortCollection() {

            $rootScope.$broadcast("resetRevealCount")
            vm.collection = $filter('filterFields')(vm.originalCollection, vm.filterSorters.selectedFilter);
            //remove leading -, then reverse the list if we were sorting by -something
            var sortProperty = vm.filterSorters.selectedSorter.replace(/^-/, "").trim()

            vm.collection = _.sortBy(vm.collection, function(item) {
                return _.get(item, sortProperty)
            })
            if (vm.filterSorters.selectedSorter.match(/^-/)) {
                vm.collection.reverse()
            }
            _updateFilterCounts()
            vm.PageService.showMobileFilters = false
        }

        vm.noFilters = function() {
            return _.every(_.values(vm.filterSorters.selectedFilter), function(v) {
                return v == '!!';
            })
        }

        vm.changeFilter = function(type, filter, label, matching) {
            vm.showFilters = false
            vm.filterLabel = label
            if (matching == 0) {
                vm.clearAllFilters()
            }
            if (vm.filterSorters.selectedFilter[type] == filter) {
                vm.clearFilter(type)
            } else {
                $location.search(type, filter)
                vm.filterSorters.selectedFilter[type] = filter
                vm.filterSorters.selectedFilterLabels[type] = label
                TrackingService.trackEvent("Shop Page Interaction", { "Interaction Type": "Filter", "Control Name": type, "Control Selection": label })
            }
            _filterAndSortCollection()

        }

        vm.changeSorter = function(sorter, label) {
            vm.showSorters = false
            vm.filterSorters.selectedSorter = sorter
            vm.sorterLabel = label
            if (vm.initialized) {
                $location.search("sort", sorter)
                TrackingService.trackEvent("Shop Page Interaction", { "Interaction Type": "Sorter", "Control Name": sorter, "Control Selection": label })
            }
            _filterAndSortCollection()


        }
        vm.clearFilter = function(key) {
            vm.filterSorters.selectedFilter[key] = "!!"
            vm.filterSorters.selectedFilterLabels[key] = "!!"
            $location.search(key, null)
            _filterAndSortCollection()
        }
        vm.clearAllFilters = function() {
            angular.forEach(vm.filterSorters.selectedFilter, function(value, key) {
                vm.filterSorters.selectedFilter[key] = "!!"
                vm.filterSorters.selectedFilterLabels[key] = "!!"
                $location.search(key, null)
            })
            vm.filterLabel = 'all'
            _filterAndSortCollection()
        }
        vm.handleFilterClick = function() {
            vm.showFilters = !vm.showFilters
            vm.showSorters = false
        }
        vm.handleSorterClick = function() {
            vm.showSorters = !vm.showSorters
            vm.showFilters = false
        }

        vm.selectedSubmission = function(selected) {
            if (selected) {
                $location.path(selected.originalObject.url)
            }
        }

        vm.initializeFilters = function() {
            //initialize filters and sorters from query params
            var search = $location.search()
            angular.forEach(vm.filterSorters.selectedFilter, function(value, key) {
                if (search[key] && search[key] !== value) {
                    label = search[key]
                    if (label == "men")
                        label = "men's"

                    if (label == "women")
                        label = "women's"

                    vm.changeFilter(key, search[key], label)
                }
            })

            if (search.sort || vm.filterSorters.selectedSorter) {
                var reverse = false
                var sorter = search.sort || vm.filterSorters.selectedSorter
                var sortObject = _.find(vm.sorterOptions, { 'attribute': sorter })
                if (sortObject !== undefined) {
                    var label = sortObject.label
                    vm.changeSorter(sorter, label)
                }
            }

            vm.initialized = true
        }

        $scope.$watch('vm.filterSorters.selectedFilter', function(newVal, oldVal) {
            if (newVal !== oldVal) {
                _filterAndSortCollection()
            }
        }, true)

        $scope.$watch('vm.filterSorters.selectedSorter', function(newVal, oldVal) {
            if (newVal !== oldVal) {
                _filterAndSortCollection()
            }
        }, true)

        $scope.$on('filterSorterInit', function() {

            var debouncedInit = _.debounce(function() {
                _buildFilterSorterLists()
                _buildFilterSorterStateObject()
                vm.initializeFilters()
                _filterAndSortCollection()
            }, 200)()

        })

        $scope.$on('chooseGender', function(event, gender, label) {
            vm.changeFilter('gender', gender, label)
        })

        $scope.$on('changeFilter', function(event, type, filter, label) {
            vm.changeFilter(type, filter, label)
        })

        vm.initializeFilters()

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .filter('filterFields', ["$filter", "_", function($filter, _) {
            return function(list, filterFields) {
                // quick check if no filters are set
                var show = true;
                angular.forEach(filterFields, function(filterItem, fieldName) {
                    if (filterItem && filterItem != "!!") {
                        show = false;
                    }
                })
                if (show) {
                    return list;
                } else {
                    // return a function that matches each item against all filters
                    return $filter("filter")(list, function(listItem) {
                        var show = true;
                        angular.forEach(filterFields, function(filterItem, fieldName) {
                            if (filterItem && filterItem != "!!") {
                                var property = _.get(listItem, fieldName)
                                if (angular.isArray(property)) {
                                    //For an array of values,
                                    if (property.indexOf(filterItem) == -1) {
                                        show = false;
                                    }
                                } else {
                                    if (property != filterItem) {
                                        show = false;
                                    }
                                }
                            }
                        })
                        return show
                    })
                }
            }
        }])
        .filter('cleanOptions', function() {
            return function(s) {
                s = (s === undefined || s === null) ? '' : s + ''
                s = s.replace(/\-/g, " ")
                s = s.replace(/\+/, " & ")
                s = s.replace(/\s+/, " ")
                return s.toString().toLowerCase().replace(/\b([a-z])/g, function(ch) {
                    return ch.toUpperCase()
                })
            }
        })
})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller("CheckoutController", CheckoutController);

    CheckoutController.$inject = ["$scope", "$rootScope", "$route", "$kookies", "NotificationsService", "CheckoutService", "CartService", "ProductService", "LoggingService", "TrackingService", "$document", "$sce", "$q", "$log", "_", "CustomerService", "$timeout", "$window", "ModalService", "$location", "PageService", "hotkeys"]

    function CheckoutController($scope, $rootScope, $route, $kookies, NotificationsService, CheckoutService, CartService, ProductService, LoggingService, TrackingService, $document, $sce, $q, $log, _, CustomerService, $timeout, $window, ModalService, $location, PageService, hotkeys) {
        var vm = this


        vm.CartService = CartService
        vm.CheckoutService = CheckoutService
        vm.CustomerService = CustomerService
        vm.TrackingService = TrackingService
        vm.ProductService = ProductService
        vm._ = _
            // Cart initialized
        vm.initialized = true

        vm.shippingAddressIsSaved = false
        vm.addShippingAddress = false
        vm.addBillingAddress = false
        vm.addCreditCard = false
        vm.shippingFormMode = "default"
        vm.billingFormMode = "default"
        vm.recompilePaymentMethods = false
        vm.shippingValid = false
        vm.billingValid = false
        vm.shippingMethodValid = false
        vm.paymentValid = false
        vm.allValid = false
        vm.options = { saveAsDefault: true }
        vm.swipeString = ""
        vm.currentStep = 0
        vm.showshippingErrors = false
        vm.showbillingErrors = false

        hotkeys.del('/')

        PageService.setBodyClass('in__checkout')
        PageService.setMicrodataItemType('CheckoutPage')

        // send a promise to the Tracking service for page tracking data
        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)

        var trackingData = {
            shippingInfo: { defer: $q.defer(), lastVal: false },
            billingInfo: { defer: $q.defer(), lastVal: false },
            shippingMethod: { defer: $q.defer(), lastVal: false },
            paymentMethod: { lastVal: false }
        }

        function _initTracking(data) {

            trackingDeferred.resolve({
                'Source': 'Checkout Page'
            })
        }

        vm.trackSelectShippingInfo = function() {
            var shipping = CheckoutService.data.shipping
                //only show 'default' if they are using a saved address
            var def = (shipping.id && trackingData.shippingInfo.lastVal === false)
            trackingDeferred.promise.then(function() {
                TrackingService.track('updateAddressData', {
                    'orderName': shipping["name"],
                    'orderEmail': shipping["email"],
                    'orderAddressStreet1': shipping["street-address"],
                    'orderAddressStreet2': shipping["street-address2"],
                    'orderAddressCity': shipping["locality"],
                    'orderAddressRegion': shipping["region"],
                    'orderAddressPostcode': shipping["postal-code"],
                    'orderAddressCountry': shipping["country"]
                })
                TrackingService.trackEvent("Select Shipping Info", {
                    'Default Shipping Info': def
                })
                trackingData.shippingInfo.lastVal = shipping.id ? shipping.id : null
                trackingData.shippingInfo.defer.resolve()
            })
        }
        vm.trackSelectBillingInfo = function() {
            var billing = CheckoutService.data.billing
            var shippingIsSameAsBilling = !!CheckoutService.shippingIsSameAsBilling
            var def = (billing.id && trackingData.billingInfo.lastVal === false)
                // wait for the preious funnel step promise
            trackingData.shippingInfo.defer.promise.then(function() {
                TrackingService.trackEvent("Select Billing Info", {
                    'Billing Same as Shipping': shippingIsSameAsBilling,
                    'Default Billing Info': def
                })
                trackingData.billingInfo.lastVal = billing.id ? billing.id : null
                trackingData.billingInfo.defer.resolve()
            })
        }
        vm.trackSelectShippingMethod = function() {
            var shippingMethod = CheckoutService.data.shipping_method.selected
            if (trackingData.shippingMethod.lastVal != shippingMethod) {
                var def = (trackingData.shippingMethod.lastVal === false)
                    // wait for the preious funnel step promise
                trackingData.billingInfo.defer.promise.then(function() {
                    TrackingService.trackEvent("Select Shipping Method", {
                        'Shipping Method': shippingMethod,
                        'Default Shipping Method': def
                    })
                    trackingData.shippingMethod.defer.resolve()
                })
                trackingData.shippingMethod.lastVal = shippingMethod
            }
        }
        vm.trackSelectPaymentMethod = function() {
            var paymentMethod = CheckoutService.data.payment.selected.method
            if (trackingData.paymentMethod.lastVal != paymentMethod) {
                var def = (trackingData.paymentMethod.lastVal === false)
                    // wait for the preious funnel step promise
                trackingData.shippingMethod.defer.promise.then(function() {
                    TrackingService.trackEvent("Select Payment Method", {
                        'Payment Method': paymentMethod,
                        'Default Payment Method': def
                    })
                })
                trackingData.paymentMethod.lastVal = paymentMethod
            }
        }

        vm.getUtmz = function() {
            var parsedUtm = {},
                utmz = $kookies.get('__utmz')

            //grab betabrand session cookies
            parsedUtm.bbCampaignFirst = $kookies.get('betabrand-campaign-first')
            parsedUtm.bbCampaignSession = $kookies.get('betabrand-campaign-session')
            parsedUtm.bbCampaignLast = $kookies.get('betabrand-campaign-last')

            if (!utmz) {
                return parsedUtm
            }

            //utmz format example
            //207700493.1429061330.27.9.utmcsr=Facebook|utmccn=DPYP_10|utmcmd=Lookalike|utmctr=hhsalkald

            var source = utmz.match(/utmcsr=([^|]+)/)
            if (source && source[1]) {
                parsedUtm.source = source[1]
            }
            var campaign = utmz.match(/utmccn=([^|]+)/)
            if (campaign && campaign[1]) {
                parsedUtm.campaign = campaign[1]
            }
            var medium = utmz.match(/utmcmd=([^|]+)/)
            if (medium && medium[1]) {
                parsedUtm.medium = medium[1]
            }
            var term = utmz.match(/utmctr=([^|]+)/)
            if (term && term[1]) {
                parsedUtm.term = term[1]
            }

            //console.log(parsedUtm)
            return parsedUtm
        }

        vm.submitShippingAddress = function() {


            //clear shipping id if user is submitting a new address
            if (vm.addShippingAddress) {
                delete CheckoutService.data.shipping.id
            }

            var checkoutPromise = CheckoutService.submit({ shippingAddress: true })

            checkoutPromise.then(function(data) {
                vm.shippingFormMode = "preview"
                vm.shippingAddressIsSaved = true
                $log.debug("submitShippingAddress", data)
                vm.trackSelectShippingInfo()
                if (CheckoutService.shippingIsSameAsBilling) {
                    vm.trackSelectBillingInfo()
                }
            }, function(error) {
                vm.shippingFormMode = "default"
                vm.addShippingAddress = true
                vm.shippingAddressIsSaved = false
            })

            return checkoutPromise

        }

        vm.submitBillingAddress = function() {

            if (vm.shippingFormMode == "default" || vm.shippingFormMode == "edit")
                vm.submitShippingAddress()

            if (vm.addBillingAddress) {
                delete CheckoutService.data.billing.id
            }

            var checkoutPromise = CheckoutService.submit({ billingAddress: true })

            checkoutPromise.then(function(data) {
                vm.shippingAddressIsSaved = true
                $log.debug("submitShippingAddress", data)

            }, function(error) {
                vm.billingFormMode = "default"
                vm.shippingAddressIsSaved = false
                vm.addBillingAddress = true
            })

            vm.validateCheckout()

            return checkoutPromise

        }

        vm.submitShippingBillingStep = function() {
            var hasErrors = false
            vm.clearCheckoutErrors()

            if (!vm.shippingValid) {
                vm.shippingFormMode = 'edit'
                vm.showshippingErrors = true
                hasErrors = true
            }

            if (!vm.billingValid) {
                vm.showbillingErrors = true
                vm.billingFormMode = 'edit'
                hasErrors = true
            }

            if (hasErrors) {
                $timeout(function() {
                    $document.scrollTo(angular.element(document.querySelector('.required--focus')), 100, 1000)
                }, 0);
                return
            }

            var sections = CheckoutService.shippingIsSameAsBilling ? { "shippingAddress": 1 } : { "shippingAddress": 1, "billingAddress": 1 }

            //clear saved address id if user is submitting a new address
            if (vm.addShippingAddress) {
                delete CheckoutService.data.shipping.id
            }

            if (vm.addBillingAddress) {
                delete CheckoutService.data.billing.id
            }


            CheckoutService.submit(sections, {}).then(function(data) {
                    $log.debug("address submit success", data)
                    vm.shippingFormMode = "preview"
                    vm.billingFormMode = "preview"
                    vm.shippingAddressIsSaved = true
                    vm.trackSelectShippingInfo()
                    vm.trackSelectBillingInfo()

                    //shiping method is set by default, so lets track it now
                    vm.trackSelectShippingMethod()
                    $timeout(function() {
                        $document.scrollTo(angular.element(document.querySelector('.betabrand-shipping-1')), 136, 1000)
                    }, 1000);
                },
                function(data) {
                    $log.debug("address submit error", data)
                    vm.shippingFormMode = "edit"
                    vm.billingFormMode = "edit"
                    $document.scrollTo(angular.element(document.querySelector('.checkout-shipping')), 100, 1000)
                })
        }

        vm.paypalCheckout = function() {
            TrackingService.trackEvent('Page Interaction', { 'Type': 'Paypal Express Checkout Link' })
            $window.location.href = '/betapaypal/index/initiate/'
        }
        vm.submitShippingMethod = function() {

            var checkoutPromise

            checkoutPromise = CheckoutService.submit({ shippingMethod: true })

            checkoutPromise.then(function(data) {
                    //CartService.getCartData()
                    vm.shippingAddressIsSaved = true
                    $log.debug("submitShippingMethod", data)

                    vm.selectedShippingMethodTitle = data.shipping_method.selectedTitle

                    vm.trackSelectShippingMethod()
                }),
                function(error) {

                }

            vm.validateCheckout()

            return checkoutPromise

        }

        vm.toggleAddAddress = function(type) {

            //if they are mucking with address we always put them in 'addressIsNotSaved' mode
            vm.shippingAddressIsSaved = false

            if (type == "billing") {

                if (angular.element(document.querySelector('.billing__address')).length) {
                    $document.scrollTo(angular.element(document.querySelector('.billing__address')), 50, 400)
                }


                vm.addBillingAddress = !vm.addBillingAddress
                if (vm.addBillingAddress) {
                    delete CheckoutService.data.billing.id
                    vm.shippingFormMode = "edit"
                    CheckoutService.clearAddress(type)
                }
                vm.validateBilling()
            } else if (type == "shipping") {

                if (angular.element(document.querySelector('.shipping-select__container')).length) {
                    $document.scrollTo(angular.element(document.querySelector('.shipping-select__container')), 50, 400)
                };

                vm.addShippingAddress = !vm.addShippingAddress
                if (vm.addShippingAddress) {

                    //delete the address id
                    delete CheckoutService.data.shipping.id
                    CheckoutService.clearAddress(type)

                    //delete the billing address id if checkbox is checked
                    if (CheckoutService.shippingIsSameAsBilling) {
                        delete CheckoutService.data.billing.id
                    }

                    vm.shippingFormMode = "edit"

                }
                vm.validateCheckout()
            }
        }

        vm.submitPaymentMethod = function(options) {

            var shippingMethodData = {}

            if (options && options.shippingMethod) {
                shippingMethodData = { shipping_method: CheckoutService.data.shipping_method.selected }
            }

            CheckoutService.submitPaymentMethod(shippingMethodData).then(function(data) {
                vm.shippingAddressIsSaved = true
                $log.debug("submitPaymentMethod", data)
                    //display order success page
                    //$document.scrollTo(angular.element(document.getElementById('review__order')), 100, 400)
            })
        }

        vm.clearCheckoutErrors = function() {
            vm.showbillingErrors = false
            vm.showshippingErrors = false
            vm.showShippingMethodErrors = false
            vm.showPaymentErrors = false
        }

        vm.handleInvalidOrder = function() {
            var sections = []

            if (!vm.billingValid && CheckoutService.shippingIsSameAsBilling == false) {
                vm.showbillingErrors = true
                vm.addBillingAddress = true
                vm.billingFormMode = 'edit'
                vm.shippingAddressIsSaved = false
                sections.push("billing address")
            }
            if (!vm.shippingValid) {
                vm.showshippingErrors = true
                vm.addShippingAddress = true
                vm.shippingAddressIsSaved = false
                vm.shippingFormMode = 'edit'
                sections.push("shipping address")
            }
            if (!vm.shippingMethodValid) {
                vm.showShippingMethodErrors = true
                sections.push("shipping method")
            }
            if (!vm.paymentValid) {
                vm.showPaymentErrors = true
                sections.push("payment method")
            }

            if (sections.length > 0) {
                // console.log(sections)
            }

            var checkoutData = angular.copy(CheckoutService.data)

            if (checkoutData.payment.selected.cc_number) {
                checkoutData.payment.selected.cc_number = "XXXX-XXXX-XXXX-XXXX"
            }

            var loggingData = {
                userAgent: navigator.userAgent,
                customer: CustomerService.data,
                state: checkoutData,
                validation: {
                    shipping: vm.shippingValid,
                    billing: vm.billingValid,
                    shippingMethod: vm.shippingMethodValid,
                    payment: vm.paymentValid
                },
                options: {
                    shippingSaved: vm.shippingAddressIsSaved,
                    addShipping: vm.addShippingAddress,
                    addBilling: vm.addBillingAddress,
                    addCreditCard: vm.addCreditCard,
                    shippingFormMode: vm.shippingFormMode,
                    billingFormMode: vm.billingFormMode,
                    shippingSameAsBilling: CheckoutService.shippingIsSameAsBilling
                },
                optimizely: angular.optimizely
            }

            if (typeof FS != "undefined") {
                loggingData.fullStoryUrl = FS.getCurrentSessionURL()
            } else {
                loggingData.fullStoryUrl = "Unavailable"
            }

            LoggingService.serverSideLog(loggingData, "checkout")
        }

        vm.placeOrder = function(sections, options) {

            vm.showshippingErrors = false
            vm.showbillingErrors = false
            vm.showShippingMethodErrors = false
            vm.showPaymentErrors = false

            if (!vm.allValid && !window.location.pathname.match(/paypal\/?$/)) {
                vm.handleInvalidOrder()
                return
            }
            //to submit order, user must have entered payment info
            vm.trackSelectPaymentMethod()

            vm.loadingSpinner = true

            sections = sections || {}
            options = options || {}
            _.assignIn(options, { place: true, utm: vm.getUtmz() })
            CheckoutService.submit(sections, options).then(function(data) {
                    $log.debug(data)
                },
                function(error) {
                    var errorMessage = ""
                    vm.loadingSpinner = false
                    if (error.messages && error.messages.error && error.messages.error[0]) {
                        errorMessage = error.messages.error[0].message
                    }

                    //if the error message mentions address problems, lets pop open the address edit form            
                    if (errorMessage.match(/shipping address/i)) {
                        vm.shippingFormMode = "default"
                        vm.addShippingAddress = true
                        vm.shippingAddressIsSaved = false
                        vm.showshippingErrors = true
                    }

                    if (errorMessage.match(/billing address/i)) {
                        vm.billingFormMode = "default"
                        vm.addBillingAddress = true
                        vm.shippingAddressIsSaved = false
                        vm.showbillingErrors = true
                    }

                    //Pop open the credit card add form if there is a problem with a saved card
                    if (errorMessage.match(/postal code associated with your saved card/i)) {
                        vm.toggleSavedCards()
                    }

                })
        }

        vm.deleteSavedCard = function(cardId) {
            CheckoutService.deleteSavedCard(cardId).then(function(data) {
                $log.debug("deleted saved credit card", data)

                if ((!data.cards || data.cards.length == 0) && CheckoutService.data.payment.selected) {
                    vm.addCreditCard = true
                    CheckoutService.data.payment.selected = { method: CheckoutService.data.payment.selected.method }
                }

                CheckoutService.getCheckoutState()
                vm.validateCheckout()
            })
        }

        vm.toggleSavedCards = function() {
            //save method, we'll delete everything else
            vm.addCreditCard = !vm.addCreditCard
            var method = CheckoutService.data.payment.selected.method
            CheckoutService.data.payment.selected = { method: method }
            vm.validateCheckout()
        }

        vm.closeCheckout = function() {
            vm.shippingAddressIsSaved = false
            CheckoutService.reset()
            window.scrollTo(0, 0)

        }

        //CART FUNCTIONS
        vm.applyCoupon = function(code) {

            CartService.applyCoupon(code).then(
                function(data) {
                    CheckoutService.getCheckoutState(['shipping_method', 'payment'])
                    vm.discountSuccessMessage = "Successfully applied coupon!"
                    $timeout(function() {
                        vm.discountSuccessMessage = false
                    }, 4000);
                },
                function(data) {
                    CheckoutService.getCheckoutState(['shipping_method', 'payment'])
                    vm.discountErrorMessage = data.messages.error[0].message
                    $timeout(function() {
                        vm.discountErrorMessage = false
                    }, 10000);
                }
            )
        }

        vm.removeCoupon = function() {
            CartService.removeCoupon().then(
                function(response) {
                    CheckoutService.getCheckoutState(['shipping_method', 'payment'])
                },
                function(error) {

                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                    CheckoutService.getCheckoutState(['shipping_method', 'payment'])
                }
            )
        }

        vm.removeProduct = function(item, index) {

            CartService.removeProduct(item, index).then(
                function(response) {
                    CheckoutService.getCheckoutState(['shipping_method', 'payment'])
                },
                function(error) {
                    CheckoutService.getCheckoutState(['shipping_method', 'payment'])

                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                }
            )
        }

        vm.updateTotal = function(item) {

            CartService.updateTotal(item).then(
                function(response) {
                    CheckoutService.getCheckoutState(['shipping_method', 'payment'])
                },
                function(error) {

                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                    CheckoutService.getCheckoutState(['shipping_method', 'payment'])
                        // Update the cart data so that the old Qty of the cart is set
                    CartService.getCartData()
                }
            )
        }
        vm.debouncedUpdateTotal = _.debounce(vm.updateTotal, 500)
            //END CART FUNCTIONS


        vm.viewStoreMap = function() {
            vm.showStoreMap = true
            $document.scrollTo(angular.element(document.querySelector('.checkout-shipping__container')), 50, 400)
        }

        $scope.$on('loggedIn', function(response) {
            CheckoutService.initialize()
            vm.initializeCheckout()
        })

        $scope.$on('loggedOut', function(response) {
            // vm.initializeCheckout()
            $location.path("/")
        })

        vm.updateAllValid = function() {
            if (vm.paymentValid && vm.shippingValid && vm.billingValid && vm.shippingMethodValid) {
                vm.allValid = true
            } else {
                vm.allValid = false
            }
            $rootScope.$broadcast('stickyBoxUpdate')
        }

        vm.validateCheckout = function() {
            vm.validateShipping()
            vm.validateBilling()
            vm.validateShippingMethod()
            vm.validatePayment()
        }

        vm.setupValidationWatchers = function() {
            $scope.$watch(function() {
                return CheckoutService.data ? CheckoutService.data.shipping : false
            }, vm.validateShipping, true)
            $scope.$watch(function() {
                return CheckoutService.data ? CheckoutService.data.billing : false
            }, vm.validateBilling, true)
            $scope.$watch(function() {
                return CheckoutService.data && CheckoutService.data.shipping_method ? CheckoutService.data.shipping_method.selected : false
            }, vm.validateShippingMethod, true)
            $scope.$watch(function() {
                    return CheckoutService.data && CheckoutService.data.payment ? CheckoutService.data.payment.selected : false
                }, vm.validatePayment, true) //last true says to 'deep watch' the object in question i.e. see if any value in the object changes
        }

        vm.validatePayment = _.debounce(function() {
            if (!CheckoutService.data.payment) {
                vm.paymentValid = false
                vm.updateAllValid()
                return
            }
            //timeout allows the validate function to run after template updates occur
            $timeout(function() {
                $log.debug('validating payment')
                var paymentMethod = CheckoutService.data.payment && CheckoutService.data.payment.selected ? CheckoutService.data.payment.selected.method : false
                if (paymentMethod) {
                    var paymentFormScope = angular.element(document.getElementById('payment-' + paymentMethod)).scope()
                    if (paymentFormScope) {
                        vm.paymentValid = paymentFormScope[paymentMethod].$valid
                    }
                }
                vm.updateAllValid()
            })

        }, 50)


        vm.validateShippingMethod = _.debounce(function() {
            if (!CheckoutService.data.shipping_method) {
                vm.shippingMethodValid = false
                vm.updateAllValid()
                return
            }
            //timeout allows the validate function to run after template updates occur
            $timeout(function() {
                $log.debug('validating shipping method')
                vm.shippingMethodValid = CheckoutService.data.shipping_method.selected ? true : false
                vm.updateAllValid()
            })
        }, 50)

        vm.validateShipping = _.debounce(function() {
            if (!CheckoutService.data.shipping) {
                vm.shippingValid = false
                if (CheckoutService.shippingIsSameAsBilling) {
                    vm.billingValid = false
                }
                vm.updateAllValid()
                return
            }

            //timeout allows the validate function to run after template updates occur
            $timeout(function() {
                $log.debug('validating shipping address')
                vm.shippingValid = vm.isShippingValid()
                if (CheckoutService.shippingIsSameAsBilling) {
                    vm.billingValid = vm.shippingValid
                }
                vm.updateAllValid()
            })
        }, 50)

        vm.validateBilling = _.debounce(function() {
            if (!CheckoutService.data.billing) {
                vm.billingValid = false
                vm.updateAllValid()
                return
            }
            //timeout allows the validate function to run after template updates occur
            $timeout(function() {
                $log.debug('validating billing address')
                if (CheckoutService.shippingIsSameAsBilling) {
                    vm.billingValid = vm.isShippingValid()
                } else {
                    if (!vm.addBillingAddress && CheckoutService.data.billing.id) {
                        vm.billingValid = true
                    } else if (!vm.addBillingAddress && CheckoutService.data.saved_addresses) {
                        vm.billingValid = false
                    } else {
                        var billingAddressForm = angular.element(document.getElementById('address-billing')).scope()
                        if (billingAddressForm) {
                            vm.billingValid = billingAddressForm.billing.$valid
                        }
                    }
                }
                vm.updateAllValid()
            })
        }, 50)

        vm.isShippingValid = function() {
            if (!vm.addShippingAddress && CheckoutService.data.shipping.id) {
                return true
            } else if (!vm.addShippingAddress && CheckoutService.data.saved_addresses) {
                return false
            }

            var shippingAddressForm = angular.element(document.getElementById('address-shipping')).scope()

            if (shippingAddressForm) {
                return shippingAddressForm.shipping.$valid
            }

            return false
        }

        vm.swipeHandler = _.debounce(function() {
            vm.swiping = false
            vm.parseSwipe()
            vm.swipeString = ""
            $scope.$digest()
        }, 300)

        vm.swiperListener = function() {
            $document.bind('keypress', function(event) {
                if (event.target == document.body) {
                    event.preventDefault()
                    vm.swiping = true
                    vm.swipeString += String.fromCharCode(event.which)
                    vm.swipeHandler()
                }

            })
        }

        vm.parseSwipe = function() {
            //some computers are mixing up ^ with & and = with ^, making this more flexible to handle both options
            var processed_swipe = vm.swipeString.split(';')[0].replace(/%B/g, '').replace(/\?/g, '').split('^')

            //if we didn't get 3 fields back, try parsing a different way
            if (processed_swipe.length != 3) {
                processed_swipe = vm.swipeString.split(';')[0].replace(/%B/g, '').replace(/\?/g, '').split('&')
            }

            //not a good swipe, bail out
            if (processed_swipe.length != 3) {
                return
            }

            // get name
            var lastname = String(processed_swipe[1].split('/')[0]).trim()
            var firstname = String(processed_swipe[1].split('/')[1].split(' ')[0]).trim()

            // get cc number
            var cc_number = String(processed_swipe[0].trim())

            // get expiration
            var exp_year = '20' + processed_swipe[2].charAt(0) + processed_swipe[2].charAt(1)
            var exp_month = processed_swipe[2].charAt(2) + processed_swipe[2].charAt(3)

            if (exp_month.indexOf('0') === 0) {
                exp_month = exp_month.split('')[1]
            }

            // quick check to see if this card is expired
            if (!vm.isExpired(exp_month, exp_year)) {
                // set fields
                CheckoutService.data.payment.selected.cc_number = cc_number
                CheckoutService.data.payment.selected.cc_exp_year = exp_year
                CheckoutService.data.payment.selected.cc_exp_month = exp_month
                CheckoutService.data.payment.selected.method = "cryozonic_stripe"

                CheckoutService.data.shipping.name = firstname + " " + lastname
                CheckoutService.data.billing.name = firstname + " " + lastname
                vm.shippingFormMode = "edit"
            } else {
                alert('The card is expired!')
            }
        }

        vm.isExpired = function(month, year) {
            var date = new Date(),
                current_month = date.getMonth() + 1,
                current_year = date.getFullYear(),
                is_expired = false

            if (year < current_year) {
                is_expired = true
            } else if (year === current_year && month < current_month) {
                is_expired = true
            }

            return is_expired
        }

        vm.paypalCheckout = function() {
            TrackingService.trackEvent('Page Interaction', { 'Type': 'Paypal Express Checkout Link' })
            $window.location.href = '/betapaypal/index/initiate/'
        }

        vm.initializeCheckout = function() {

            var data = $route.current.locals.checkout

            vm.shippingAddressIsSaved = false
            vm.addShippingAddress = false
            vm.addBillingAddress = false
            vm.addCreditCard = false
            vm.shippingFormMode = "default"
            vm.billingFormMode = "default"

            //if we have no saved addresses lets expand the address forms
            if (!data.saved_addresses || data.saved_addresses.length == 0) {
                vm.addShippingAddress = true
                vm.addBillingAddress = true
            }

            //if billing and shipping IDs are different then uncheck the sameAsShipping button
            if (data.shipping.id && data.billing.id && data.shipping.id != data.billing.id) {
                CheckoutService.shippingIsSameAsBilling = false
            }

            if (data.saved_addresses && data.shipping.id) {
                vm.shippingAddressIsSaved = true
                vm.trackSelectShippingInfo()
                if (CheckoutService.shippingIsSameAsBilling == true) {
                    vm.trackSelectBillingInfo()
                }
            }

            if (data.saved_addresses && data.billing.id && CheckoutService.shippingIsSameAsBilling != true) {
                vm.trackSelectBillingInfo()
            }

            //if an address data comes back from the server then we'll assume its been posted too previously
            if (!data.shipping.id && CheckoutService.addressHasRequiredData(data.shipping)) {
                vm.shippingFormMode = "preview"
                vm.shippingAddressIsSaved = true
                vm.addShippingAddress = true
                vm.trackSelectShippingInfo()
                if (CheckoutService.shippingIsSameAsBilling == true) {
                    vm.trackSelectBillingInfo()
                }
            }

            if (!data.billing.id && CheckoutService.addressHasRequiredData(data.billing)) {
                vm.billingFormMode = "preview"
                vm.addBillingAddress = true
                vm.trackSelectBillingInfo()
            }

            if (window.location.pathname.match(/paypal\/?$/)) {
                vm.shippingFormMode = "edit"
                vm.shippingAddressIsSaved = false
                vm.addShippingAddress = true
                vm.options.saveAsDefault = false
            }

            if (vm.shippingAddressIsSaved) {
                //addresses have been submitted already the default shipping method has been selected, track it
                vm.trackSelectShippingMethod()
            }

            if (vm.isPOS) {
                vm.shippingFormMode = "edit"
                vm.addShippingAddress = true
                vm.options.saveAsDefault = false
            }

            CustomerService.getData().then(function(data) {
                if (!CheckoutService.data.shipping.id && !CheckoutService.data.shipping.name && data.firstname) {
                    CheckoutService.data.shipping.name = data.firstname + ' ' + data.lastname
                }
                if (!CheckoutService.data.shipping.id && !CheckoutService.data.shipping.email && data.email) {
                    CheckoutService.data.shipping.email = data.email
                }
            })

            angular.element(document.querySelector('body')).removeClass('cart__open mobile__menu-open mobile-buybar--open')

            // vm.initialized = true
            $log.debug("Checkout State", data)

            vm.validateCheckout()
            vm.setupValidationWatchers()

            _initTracking(data)
            $scope.$emit('viewLoaded')

            _getRecomendedProducts()

        }

        vm.initializeCheckout()

        vm.swiperListener()

        function _getRecomendedProducts() {
            //TODO: replace with better recommendations
            ProductService.getProductsForCategoryId(69).then(function(products) {
                vm.recommendedProducts = products;
            })
        }

        //Launch Free Underwear Modal
        vm.showUnderwearModal = function() {
            ProductService.getProduct(19193).then(function(undies) {

                ModalService.showModal({
                    templateUrl: "/angular/app/modal/single-product/single-product-modal.html",
                    controller: "SingleProductModal as vm",
                    inputs: {
                        product: undies,
                        isFree: true
                    }
                }).then(function(modal) {
                    modal.close.then(function(result) {});
                });

            })
        }

    }

})();

(function() {
    'use strict';
    angular
        .module('BetabrandApp')
        .filter('zeroToFree', function() {
            return function(input) {
                return (input == '$0.00') ? 'Free' : input;
            }

        });
})();

BetabrandApp.factory('CheckoutService', ['TrackingService', '$rootScope', '$http', '$q', '_', 'NotificationsService', '$location', '$window', 'ConfigService', 'CartService', '$log', 'LoggingService',
    function CheckoutService(TrackingService, $rootScope, $http, $q, _, NotificationsService, $location, $window, ConfigService, CartService, $log, LoggingService) {

        return {
            shippingIsSameAsBilling: true,
            saveCreditCard: true,
            usePaymentFallbackMethod: false,
            joinNewsletter: true,

            mostRecentPromise: $q.defer, //used to decide when to update the or wait for another request in process
            //(updating UI if user has made multiple requests can feel clunky and confusing on the frontend)
            data: {},
            successData: {},

            initialize: function() {
                var self = this
                var promise = null

                LoggingService.clientDebugLog(CartService.data, "initialize checkout cart data")
                promise = self.submit({}, { initialize: true })

                promise.then(
                    function(response) {
                        $log.debug("[Checkout] Initialize successful", response)
                    },
                    function(error) {
                        $log.debug("[Checkout] Initialize failed", error)
                        LoggingService.clientDebugLog(error, "initialize checkout failed")
                    }
                )

                return promise
            },

            //checks to see if all required fields in an address are filled out
            addressHasRequiredData: function(address) {

                if (address.name && address["street-address"] && address["postal-code"] && address.country && address.region && address.locality)
                    return true
                else
                    return false

            },

            clearAddress: function(type) {
                var emptyAddress = {
                    "name": "",
                    "email": "",
                    "tel": "",
                    "company": "",
                    "street-address": "",
                    "street-address2": "",
                    "postal-code": "",
                    "locality": "",
                    "country": "",
                    "region": "",
                    "region_id": "",
                    "save_in_address_book": ""
                }

                if (type === "shipping") {
                    this.data.shipping = emptyAddress
                }

                if (type === "billing") {
                    this.data.billing = emptyAddress
                }

            },

            getCheckoutState: function(onlyUpdateTheseSections) {
                var deferred = $q.defer()
                this.mostRecentPromise = deferred

                var self = this

                var request = $http({
                    method: "GET",
                    url: "/api/rest/sealthedeal/status"
                }).success(function(data) {
                    self.setCheckoutState(data, deferred, onlyUpdateTheseSections)
                    deferred.resolve(data)
                }).error(function(data) {
                    self.handleError(data)
                    deferred.reject(data)
                })

                return deferred.promise
            },

            //function looks at return data and either updates state or redirects to success/external payment
            setCheckoutState: function(data, promise, onlyUpdateTheseSections) {
                var self = this

                LoggingService.clientDebugLog(data, "set checkout state start")

                //order success
                if (data.summary) {

                    // console.log("setCheckoutState: data.summary present")

                    //NotificationsService.showSuccess("Successfully Checked out")
                    $rootScope.$broadcast('checkoutSuccess')

                    // analytics won't exist if a given order/success url is visited in the future.
                    if (data.summary.analytics) {
                        TrackingService.track('checkoutSuccess', data.summary)
                    }


                    //reset the checokut data
                    self.reset()

                    if (data.redirect) {
                        if (data.redirect.method == "url") {
                            $rootScope.$broadcast('viewLoading', "Redirecting to payment service to complete your order.")
                            $window.location.href = data.redirect.url
                        } else if (data.redirect.method == "affirm") {
                            $rootScope.$broadcast('viewLoading', "Redirecting to Affirm to complete your order.")
                            affirm.checkout(data.redirect.data)
                            affirm.checkout.post()
                        }
                    } else {
                        $location.url("/cart/checkout/success/" + data.orderIds + "/" + data.orderHashes)
                    }
                } else if (!promise || promise == self.mostRecentPromise) {
                    //preserve payment data
                    var paymentBackup = {}
                    if (self.data.payment) {
                        _.merge(paymentBackup, self.data.payment.selected)
                    }

                    if (onlyUpdateTheseSections) {
                        _.each(onlyUpdateTheseSections, function(section) {
                            if (data && data[section])
                                self.data[section] = data[section]
                        })
                    } else {
                        self.data = data
                    }

                    //restore payment data from the front end
                    if (self.data.payment) {
                        self.data.payment.selected = _.extend(paymentBackup, self.data.payment.selected)
                    }

                    //hack to clean up after apple pay
                    //TODO: allow partially complete addresses in magento
                    if (self.data.shipping && self.data.shipping.name.match(/applepay/)) {
                        self.clearAddress('shipping')
                    }
                    if (self.data.billing && self.data.billing.name.match(/applepay/)) {
                        self.clearAddress('billing')
                    }

                    self.handleMessage(data)
                    LoggingService.clientDebugLog(self.data, "set checkout state complete")
                }
            },

            submit: function(type, options) {
                var deferred = $q.defer()
                this.mostRecentPromise = deferred
                var self = this
                var postData = {}
                var valid = true

                type = type || {}
                options = options || {}

                if (type.shippingAddress) {
                    _.extend(postData, this.getShippingAddressData())
                }

                if (type.billingAddress && !this.shippingIsSameAsBilling) {
                    _.extend(postData, this.getBillingAddressData())
                }

                if (type.shippingMethod) {
                    _.extend(postData, this.getShippingMethodData())
                }

                if (type.payment) {
                    _.extend(postData, this.getPaymentData())
                }

                _.extend(postData, options)

                //send newsletter opt-in data
                if (postData.place && self.joinNewsletter == true) {
                    _.extend(postData, { newsletter: true })
                }

                //if the form isn't valid, lets reject
                if (postData.place && !this.validate()) {
                    deferred.reject()
                } //otherwise lets try to place the order
                else {
                    var f = ""
                    if ("Fingerprint" in window) {
                        f = new Fingerprint().get()
                    }
                    _.extend(postData, { f: f })
                    $log.debug("[Checkout] Submitting data", postData)
                    LoggingService.clientDebugLog(postData, "submit checkout data")
                    var request = $http({
                        method: "POST",
                        url: "/api/rest/sealthedeal/",
                        data: postData
                    }).success(function(data) {
                        var billing = self.getBillingAddressData()
                        if (Object.keys(billing).length > 0) {
                            TrackingService.track('identifyCustomer', {
                                'displayName': billing.billing_address_name,
                                'email': billing.billing_address_email
                            })
                        }
                        CartService.getCartData()
                        self.setCheckoutState(data, deferred)
                        deferred.resolve(data)
                    }).error(function(data, status) {
                        self.handleError(data)
                        self.getCheckoutState()
                        CartService.getCartData()
                        deferred.reject(data)
                    })
                }


                return deferred.promise

            },

            validate: function() {
                return true
            },

            getShippingAddressData: function() {
                var self = this
                var shippingBilling = {}

                angular.forEach(self.data.shipping, function(value, key) {

                    if (key == "region_id" && self.data.shipping.hasSubRegions)
                        key = "region"

                    shippingBilling["shipping_address_" + key] = value

                    if (self.shippingIsSameAsBilling) {
                        shippingBilling["billing_address_" + key] = value
                    }

                })

                return shippingBilling
            },
            getBillingAddressData: function() {
                var self = this
                var billingAddress = {}

                var address = self.data.billing
                if (self.shippingIsSameAsBilling) {
                    address = self.data.shipping
                }

                angular.forEach(address, function(value, key) {

                    if (key == "region_id" && address.hasSubRegions)
                        key = "region"

                    billingAddress["billing_address_" + key] = value

                })

                return billingAddress
            },
            getShippingMethodData: function() {
                var self = this
                return { shipping_method: self.data.shipping_method.selected }
            },
            getPaymentData: function() {
                var self = this
                var paymentData = {}


                angular.forEach(self.data.payment.selected, function(value, key) {
                    paymentData["payment_" + key] = value
                    if (key == "cc_number") {
                        paymentData["payment_cc_type"] = self.getCardType(value)
                    }
                })

                //overly complicated code to handle the fact annoyance of switching between authorize and authorize_cim if we aren't or are saving the card
                if (self.usePaymentFallbackMethod && self.data.payment.selected.fallbackMethod) {
                    paymentData["payment_method"] = self.data.payment.selected.fallbackMethod
                }

                return paymentData
            },
            setPaymentData: function(cardId) {
                if (typeof this.data.payment == 'undefined') {
                    this.data.payment = {}
                }
                this.data.payment.selected = {
                    cc_stripejs_token: cardId,
                    method: 'cryozonic_stripe'
                }
            },
            submitShippingAddress: function() {

                var deferred = $q.defer()
                var self = this

                var request = $http({
                    method: "POST",
                    url: "/api/rest/sealthedeal/",
                    data: self.getShippingAddressData()
                }).success(function(data) {
                    self.setCheckoutState(data)
                    deferred.resolve(data)
                }).error(function(data) {
                    self.handleError(data)
                    deferred.reject(data)
                })

                return deferred.promise

            },
            submitBillingAddress: function() {

                var deferred = $q.defer()
                var self = this

                var request = $http({
                    method: "POST",
                    url: "/api/rest/sealthedeal/",
                    data: self.getBillingAddressData()
                }).success(function(data) {
                    self.setCheckoutState(data)
                    deferred.resolve(data)
                }).error(function(data) {
                    self.handleError(data)
                    deferred.reject(data)
                })

                return deferred.promise

            },
            submitShippingMethod: function(options) {
                var self = this
                var deferred = $q.defer()
                this.mostRecentPromise = deferred

                var request = $http({
                    method: "POST",
                    url: "/api/rest/sealthedeal/",
                    data: self.getShippingMethodData()
                }).success(function(data) {
                    CartService.getCartData()
                    self.setCheckoutState(data, deferred)
                    deferred.resolve(data)
                }).error(function(data) {
                    self.handleError(data)
                    deferred.reject(data)
                })

                return deferred.promise
            },

            submitPaymentMethod: function(options) {

                var deferred = $q.defer()
                this.mostRecentPromise = deferred
                var self = this
                var data = options || self.getPaymentData();

                console.log(data);

                var request = $http({
                    method: "POST",
                    url: "/api/rest/sealthedeal/",
                    data: data
                }).success(function(data) {
                    self.setCheckoutState(data, deferred)
                    deferred.resolve(data)
                }).error(function(data) {
                    self.handleError(data)
                    deferred.reject(data)
                })

                return deferred.promise

            },

            getCardType: function(number) {
                var self = this
                var cardType = false

                var cardTypes = {
                    // these regular expression came from here: http://www.regular-expressions.info/creditcard.html
                    'VI': {
                        card_name: 'Visa',
                        re: /^4[0-9]{12}(?:[0-9]{3})?$/,
                        id: 'visa'
                    },
                    'MC': {
                        card_name: 'Master Card',
                        re: /^5[1-5][0-9]{14}$/,
                        id: 'mastercard'
                    },
                    'AE': {
                        card_name: 'American Express',
                        re: /^3[47][0-9]{13}$/,
                        id: 'amex'
                    },
                    'DI': {
                        card_name: 'Discover',
                        re: /^6(?:011|5[0-9]{2})[0-9]{12}$/,
                        id: 'discover'
                    }
                }

                angular.forEach(cardTypes, function(card, key) {
                    if (number.match(card.re)) {
                        cardType = key
                    }
                })

                return cardType

            },

            deleteSavedCard: function(cardId) {
                var deferred = $q.defer()
                var self = this
                this.mostRecentPromise = deferred

                var request = $http({
                    method: "DELETE",
                    url: "/api/rest/savedcreditcards/delete/" + cardId,
                }).success(function(data) {
                    self.getSavedCards().then(function(data) {
                            deferred.resolve(data)
                        },
                        function(data) {
                            deferred.reject(data)
                        })
                }).error(function(data) {
                    self.handleError("Could not delete saved card")
                    deferred.reject(data)
                })

                return deferred.promise
            },

            getSavedCards: function() {
                var deferred = $q.defer()
                var self = this
                this.mostRecentPromise = deferred
                var request = $http({
                    method: "GET",
                    url: "/api/rest/savedcreditcards/get",
                }).success(function(data) {

                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })
                return deferred.promise
            },

            saveCard: function(data) {
                var deferred = $q.defer()
                var self = this
                this.mostRecentPromise = deferred
                var request = $http({
                    method: "POST",
                    url: "/api/rest/savedcreditcards/create",
                    data: data
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })
                return deferred.promise
            },

            getCheckoutSuccess: function(orders, hashes) {
                var deferred = $q.defer()
                var self = this
                var request = $http({
                    method: "GET",
                    url: "/api/rest/sealthedeal/success/" + orders + "/" + hashes
                }).success(function(data) {
                    self.successData = data
                    if (self.successData.orders) {
                        self.successData.orderString = _.map(self.successData.orders, 'id').join()
                    }
                    deferred.resolve(data)
                }).error(function(data) {
                    self.handleError(data)
                    deferred.reject(data)
                })

                return deferred.promise
            },

            reset: function() {
                this.data = {}
                this.successData = {}
            },

            handleMessage: function(response) {
                if (response.message) {

                    NotificationsService.addNotification({
                        message: response.message,
                        type: "alert"
                    })

                }
            },
            //hacky way to handle crappy error messages coming from magento and other 3rd party api services
            translateErrorMessages: function(error) {
                if (error.messages && error.messages.error && error.messages.error[0]) {
                    errorMessage = error.messages.error[0].message
                        //cryptic message from the stripe api where the customers billing zipcode no longer
                        //matches the zipcode on file with the saved card
                    if (errorMessage.match(/zip code you supplied failed validation/i)) {
                        errorMessage = "The postal code associated with your saved card does not match your billing postal code.  Please reenter your payment information."
                    }

                    error.messages.error[0].message = errorMessage
                }

                return error
            },

            handleError: function(response) {
                response = this.translateErrorMessages(response)

                NotificationsService.addNotification({
                    message: response,
                    type: "error"
                })

            }

        }

    }
]);


(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .controller("CheckoutSuccessController", CheckoutSuccessController);

    CheckoutSuccessController.$inject = ['$scope', 'CheckoutService', 'CartService', 'TrackingService', '$document', '$sce', '$q', '$log', '_', 'CustomerService', '$routeParams', 'ModalService', '$rootScope', 'PageService', 'ProductService', 'OptimizelyService']

    function CheckoutSuccessController($scope, CheckoutService, CartService, TrackingService, $document, $sce, $q, $log, _, CustomerService, $routeParams, ModalService, $rootScope, PageService, ProductService, OptimizelyService) {

        var vm = this

        vm.cart = CartService
        vm.checkoutService = CheckoutService
        vm.customerService = CustomerService
        vm.orders = $routeParams.orders
        vm._ = _

        //Remember to set this to a static number when removing the test//
        vm.numberOfVoteCards = 16; //OptimizelyService.handle("successVoteCards");
        vm.replaceVoted = true;
        //////////////////////////////////////////////////////////////////

        $log.debug($routeParams)

        // send a promise to the Tracking service for page tracking data
        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)

        function _initTracking(data) {
            trackingDeferred.resolve({
                'Source': 'Order Success Page'
            })
            if (data.summary && 'analytics' in data.summary) {
                TrackingService.track('checkoutSuccess', data.summary)
            }
        }

        CheckoutService.getCheckoutSuccess($routeParams.orders, $routeParams.hashes).then(
            function(response) {
                $scope.$emit('viewLoaded')
                PageService.setBodyClass('home')
                PageService.setMicrodataItemType('CheckoutPage')
                _initTracking(response)
                _getProductGender(CheckoutService.successData.items[0].id)
            },
            function(error) {
                $scope.$emit('viewLoaded')
            }
        )

        vm.showReferralModal = function(productId, productName) {
            $rootScope.$broadcast('toggleModal')

            ModalService.showModal({
                templateUrl: "/angular/app/modal/referrals/referral-modal.html",
                controller: "ReferralModalController",
                inputs: { productId: productId, productName: productName }
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        function _getProductGender(id) {
            ProductService.getProduct(id).then(function(response) {
                vm.productGender = _.capitalize(response.gender + 's')
            })
        }



    }

})();

(function() {

    "use strict";

    CmsController.$inject = ["$scope", "$rootScope", "CmsService", "CustomerService", "CartService", "TrackingService", "LookupService", "_", "PageService", "$sce", "$route", "ReferralsService", "$location"]

    function CmsController($scope, $rootScope, CmsService, CustomerService, CartService, TrackingService, LookupService, _, PageService, $sce, $route, ReferralsService, $location) {

        var vm = this

        vm.templateUrl = LookupService.templateUrl
        vm.pageId = LookupService.id
        vm.CustomerService = CustomerService
        vm.ReferralsService = ReferralsService
        vm.$rootScope = $rootScope

        vm.data = $route.current.locals.lookupResolve

        PageService.setBodyClass(vm.data.urlKey)
        PageService.setTitle(vm.data.title)

        var microdataItemType;
        switch (vm.data.urlKey) {
            case "about":
                microdataItemType = "AboutPage"
                break
            case "contact":
                microdataItemType = "ContactPage"
                break
            case "shipping":
            case "returns":
            case "group-discounts":
            case "gift-certificates":
            case "bitcoin":
                microdataItemType = "QAPage"
                break
        }

        PageService.setMicrodataItemType(microdataItemType)

        $scope.$emit("viewLoaded")

        vm.loginThenProfile = function() {
            CustomerService.showLoginModal().then(function() {
                if (CustomerService.data.loggedIn) {
                    $location.path("/account/dashboard")
                }
            })
        }


    }

    angular
        .module("BetabrandApp")
        .controller("CmsController", CmsController);

})();

BetabrandApp.factory('CmsService', ['$http', '$q', '$location',
    function CmsService($http, $q, $location) {
        return {
            getCmsPage: function(id) {
                var deferred = $q.defer()
                $http
                    .get('/api/rest/cms/page/' + id)
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }
        }
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("colorselector", colorselector);

    function colorselector() {
        var directive = {
            restrict: "E",
            scope: {
                product: "=",
                context: "@?"
            },
            templateUrl: "/angular/app/colorselector/colorselector.html",
            link: linkFunc,
            controller: colorselectorController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    colorselectorController.$inject = ["$scope", "ProductService", "$rootScope", "$document", "$timeout", "_", "$location"];

    function colorselectorController($scope, ProductService, $rootScope, $document, $timeout, _, $location) {

        var vm = this;
        vm._ = _

        var activate = function() {
            vm.colorProducts = {}
            _.each(vm.product.colorProducts, function(obj, id) {
                ProductService.getProduct(id).then(function(data) {
                    vm.colorProducts[id] = data
                })
            })
        }

        $scope.$watch('vm.product.id', function(current, original) {
            if (current !== original) {
                activate()
            }
        })

        vm.changeColor = function(id) {
            if (vm.context == "product-page") {
                var url = document.createElement('a');
                url.href = vm.colorProducts[id].url;
                $location.url(url.pathname)
            } else {
                vm.product = vm.colorProducts[id]
            }
        }

        activate()
    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .filter('orderObjectBy', function() {
            return function(items, field, reverse) {
                var filtered = [];
                angular.forEach(items, function(item) {
                    filtered.push(item);
                });
                filtered.sort(function(a, b) {
                    return (a[field] > b[field] ? 1 : -1);
                });
                if (reverse) filtered.reverse();
                return filtered;
            };
        });


})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("comment", ["RecursionHelper", commentDirective]);

    function commentDirective(RecursionHelper) {
        var directive = {
            restrict: "E",
            replace: true,
            scope: {
                "comment": "=",
                "threadId": "=",
                "customer": "=",

                "thread": "=",
                "disableReply": "=",
                "replies": "=",

                "votes": "=",
                "highlights": "=",
                "activity": "=",
                "activityPosition": "=",
                "archived": "@"
            },
            transclude: true,
            templateUrl: "/angular/app/comments/comment.html",
            compile: compileFunc,
            controller: commentDirectiveController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function compileFunc(tElement, tAttrs, transclude) {
            return RecursionHelper.compile(tElement, function($scope, element, attrs, controller, transcludeFn) {
                //check for a need to scroll to comment when directive links
                controller.handleScroll(element)
            })
        }
    }

    commentDirectiveController.$inject = ["$scope", "CommentsThreadService", "_", "$compile", "RecursionHelper", "$log", "CustomerService", "$location", "$anchorScroll", "$document", "$timeout", "$rootScope"];

    function commentDirectiveController($scope, CommentsThreadService, _, $compile, RecursionHelper, $log, CustomerService, $location, $anchorScroll, $document, $timeout, $rootScope) {

        var vm = this;
        vm.reply = {}
        vm.directLink = false
        vm.CommentsThreadService = CommentsThreadService

        vm.handleScroll = function(element) {
            // Scroll to comment if the comment param is present
            var search = $location.search()
            if (element && search.comment && search.comment == vm.comment.id) {
                $location.search('comment', null)
                $timeout(function() { $document.scrollTo(element, 200, 400) }, 1000)
                vm.comment.directLink = true
            }
        }

        var _submitReply = function(parentId) {
            var newReply = {
                threadId: vm.threadId,
                parent: parentId,
                body: vm.reply.body
            }


            if (vm.activity) {
                newReply.activity = vm.activity
                newReply.position = vm.activityPosition
            }

            var bodyBackup = vm.reply.body
            vm.reply.body = ""

            CommentsThreadService.create(newReply).then(
                function(response) {
                    if (typeof vm.replies == "object" && typeof vm.replies.push == "function")
                        vm.replies.push(response)
                    else
                        vm.replies = [response]

                },
                function(error) {
                    vm.reply.body = bodyBackup
                }
            )
        }

        $scope.$on('closeCommentReplies', function(event, comment) {
            // Close all reply forms
            vm.comment.showReplyForm = false
                // Activate the current reply form
            comment.showReplyForm = true
            CommentsThreadService.currentCommentIdBeingReplied = comment.id
            $timeout(function() {
                var replyForm = angular.element(document.getElementById('reply-form-' + comment.id))
                $document.scrollTo(replyForm, 200, 400)
            })
        })

        vm.toggleReply = function(comment) {
            $rootScope.$broadcast("closeCommentReplies", comment)
        }

        vm.submitReply = function(parentId) {
            if (!CustomerService.data.loggedIn) {
                CustomerService.showLoginModal({ "action": "comment" }).then(function() {
                    _submitReply(parentId)
                })
            } else {
                _submitReply(parentId)
                vm.comment.showReplyForm = false
            }
        }

        vm.submitEdit = function(comment) {

            var bodyBackup = comment.body
            comment.edit = false

            CommentsThreadService.edit(comment).then(
                function(response) {
                    // don't need to do anything
                },
                function(error) {
                    vm.comment.body = bodyBackup
                    comment.edit = true
                }
            )
        }

        vm.toggleEdit = function(comment) {
            comment.edit = !comment.edit
            if (comment.edit) {
                comment.newbody = comment.body
                $timeout(function() {
                    $document.scrollTo(angular.element(document.getElementById('edit-input-' + vm.comment.id)), 250, 400).then(function() {
                        if (!$rootScope.isMobile) {
                            $timeout(function() {
                                angular.element(document.querySelector('.edit__input'))[0].focus()
                            })
                        }
                    })
                })
            }

        }


        vm.delete = function(comment) {
            console.log('Comment', comment);
            var deleteConfirmText = "Your comment will be deleted forever.";
            if ((typeof comment.user.id === null) || (comment.user.id != vm.customer.id)) {
                console.log('Deleting this comment');
                deleteConfirmText = "You are about to delete someone else's comment."
            }


            // Removed from 'swal' to just delete directly until it's ready for showtime.
            CommentsThreadService.delete(comment.id).then(
                function(response) {
                    comment.body = "[DELETED]"
                    comment.deleted = true
                },
                function(error) {
                    $log.debug("failed deleting comment. TODO: implement me.")
                }
            )
        }

        vm.edit = function(comment) {
            CommentsThreadService.edit(comment).then(
                function(response) {
                    var commentDOM = angular.element(angular.element(document.querySelector("#comment-" + commentId))[0])
                    commentDOM.remove()
                },
                function(error) {
                    $log.debug("failed editing comment. TODO: implement me.")
                }
            )
        }


        var _upvote = function(commentId, which) {
            CommentsThreadService.vote(commentId, which).then(
                function(response) {
                    vm.votes.data = response

                    var change = which == "down" ? -1 : 1;
                    vm.comment.score += change;

                },
                function(error) {
                    $log.debug(error)
                }
            )
        }

        vm.upvote = function(commentId, which) {
            if (!CustomerService.data.loggedIn) {
                CustomerService.showLoginModal({ "action": "comment" }).then(function() {
                    _upvote(commentId, which)
                })
            } else {
                _upvote(commentId, which)
            }
        }

        vm.viewDiscussion = function(url, commentId) {
            //Hack to pull relative paths out of product canonical urls
            if (url.includes('http')) {
                url = url.split('/')[3];
            }
            var commentUrl = url + '?comment=' + commentId;
            $location.url(commentUrl);
        }
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("commentsThread", commentThreadDirective);

    function commentThreadDirective() {
        var directive = {
            restrict: "E",
            replace: true,
            scope: {
                "customer": "=",
                "threadId": "=",
                "highlights": "=",
                "defaultOrder": "=",
                "hideNewCommentForm": "@",
                "totalCommentCount": "=?",
                "archived": "@",
                "commentLimit": "=?",
                "afterCommentCallback": "=?",
                "focusOnLoad": "=?"
            },
            transclude: true,
            templateUrl: "/angular/app/comments/commentsThread.html",
            link: linkFunc,
            controller: commentThreadDirectiveController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            if (ctrl.focusOnLoad) {
                ctrl.timeout(function() {
                    tinymce.execCommand('mceFocus', false, 'newCommentBox');
                }, 500)
            }
        }
    }

    commentThreadDirectiveController.$inject = ["$scope", "CommentsThreadService", "_", "CustomerService", "$log", "$timeout", "$document", "$rootScope", "OptimizelyService"];

    function commentThreadDirectiveController($scope, CommentsThreadService, _, CustomerService, $log, $timeout, $document, $rootScope, OptimizelyService) {

        var vm = this;

        vm.comment = { body: "" }
        vm.reply = {}
        vm.votes = { data: [] }
        vm.orderField = vm.defaultOrder || "-date"
        vm._ = _
        vm.timeout = $timeout

        var commentLimit = $rootScope.isMobile ? 8 : 20
        vm.commentLimit = (typeof vm.commentLimit !== "undefined") ? parseInt(vm.commentLimit) : commentLimit
        vm.commentCount = vm.commentLimit
        vm.isSubmitting = false
        vm.hideNewCommentForm = vm.hideNewCommentForm || false

        CommentsThreadService.getThread(vm.threadId).then(
            function(response) {
                vm.thread = {
                    "data": response,
                    "currentCommentBeingReplied": false
                }
            },
            function(err) {
                $log.debug("error", err)
            })

        CommentsThreadService.getVotes(vm.threadId).then(
            function(response) {
                vm.votes.data = response
            },
            function(error) {
                $log.debug(error)
            }
        )

        var _submitComment = function() {
            var newComment = {
                threadId: vm.threadId,
                body: vm.comment.body
            }
            vm.isSubmitting = true

            var bodyBackup = vm.comment.body
            vm.comment.body = ""

            CommentsThreadService.create(newComment).then(
                function(response) {
                    vm.isSubmitting = false
                    vm.thread.data.unshift(response)
                    vm.totalCommentCount++;
                    $timeout(function() { $document.scrollTo(angular.element(document.getElementById('comment-' + response.id)), 200, 400) }, 200);
                    vm.afterCommentCallback = vm.afterCommentCallback || function() {}
                    vm.afterCommentCallback()
                },
                function(error) {
                    vm.isSubmitting = false
                    vm.comment.body = bodyBackup
                }
            )
        }

        vm.submitComment = function() {

            if (!CustomerService.data.loggedIn) {
                CustomerService.showLoginModal({ "action": "comment" }).then(function() {
                    _submitComment()
                })
            } else {
                _submitComment()
            }
        }

        vm.order = function(field) {
            vm.orderField = field
        }

        vm.loadMore = function() {
            vm.commentCount += vm.commentLimit
            $rootScope.$broadcast('stickyBoxUpdate')
        }

    }

})();

(function() {

    'use strict';
    angular
        .module('BetabrandApp')
        .filter('timeAgo', ['$filter', function($filter) {
            return function(time, showActualDate) {
                var showActualDate = showActualDate || false
                var oldTime = new Date(time)
                var currentTime = new Date()
                var time = (currentTime - oldTime) / 1000
                var unit = "second"

                if (time >= 60) {
                    unit = "minute"
                    time = time / 60

                    if (time >= 60) {
                        unit = "hour"
                        time = time / 60

                        if (!showActualDate) {

                            if (time >= 24) {
                                unit = "day"
                                time = time / 24

                                if (time >= 7) {
                                    unit = "week"
                                    time = time / 7

                                    if (time >= 4) {
                                        unit = "month"
                                        time = time / 4

                                        if (time >= 12) {
                                            unit = "year"
                                            time = time / 12
                                        }
                                    }
                                }
                            }


                        }


                    }
                }

                if (unit == "second" && time < 30)
                    return "just now"

                time = Math.floor(time);
                if (time > 1) {
                    unit = unit + "s"
                }

                if (showActualDate) {
                    return $filter('date')(oldTime, 'mediumDate')
                } else {
                    return time + " " + unit + " ago"
                }

            }
        }]);

})();

BetabrandApp.factory('CommentsThreadService', ['$http', '$q', '$log', 'TrackingService',
    function CommentsService($http, $q, $log, TrackingService) {

        return {
            getComment: function(id) {
                var self = this
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: "/api/rest/comments/get/" + id
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            },

            getThread: function(threadId) {
                var self = this
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: "/api/rest/comments/thread/" + threadId
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            },

            create: function(comment) {
                $log.debug("creating comment", comment)
                var self = this
                var deferred = $q.defer()
                var request = $http({
                    method: "POST",
                    url: "/api/rest/comments/create/",
                    data: comment
                }).success(function(data) {
                    deferred.resolve(data)

                    var eventData = {
                        'Participation Type': 'Comment',
                        'Comment Depth': (comment && comment.parent > 0) ? 'Reply' : 'Top Level'
                    };

                    // Optionally add activity data if the comment came from the stream
                    if (comment.activity) {
                        eventData.Source = 'Stream'
                        eventData.content = {
                                foreign_id: comment.activity.foreign_id
                            },
                            eventData.position = comment.position
                    }

                    TrackingService.trackEvent('Participate', eventData)
                    TrackingService.track('comment', data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            },

            delete: function(commentId) {
                $log.debug("Deleting comment", commentId)
                var self = this
                var deferred = $q.defer()
                var request = $http({
                    method: "DELETE",
                    url: "/api/rest/comments/delete/" + commentId
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            },


            vote: function(commentId, type) {
                $log.debug("voting on comment")
                var deferred = $q.defer()
                var request = $http({
                    method: "POST",
                    url: "/api/rest/comments/votes/create",
                    data: { "commentId": commentId, "type": type }
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            },

            edit: function(comment) {
                $log.debug("editing comment", comment)
                var deferred = $q.defer()
                var request = $http({
                    method: "PUT",
                    url: "/api/rest/comments/update/" + comment.id,
                    data: comment
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            },

            getVotes: function(threadId) {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: "/api/rest/comments/votes/thread/" + threadId
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            },

            currentCommentIdBeingReplied: false


        }
    }
]);

//Off Click
(function() {
    'use strict';

    BetabrandApp
        .directive('communication', communication);

    function communication() {
        var directive = {
            restrict: 'E',
            replace: true,
            templateUrl: '/angular/app/communication/communication.html',
            scope: {
                customer: "=",
                product: "=",
                submission: "=",
                drafts: "=",
                user: "=",
                type: "="
            },
            transclude: true,
            link: linkFunc,
            controller: CommunicationController,
            controllerAs: 'vm',
            bindToController: true
        };

        return directive;
        //set default value for sender


        function linkFunc(scope, el, attr, ctrl) {
            scope.data = {};
            scope.attr = attr;

            var initiateTinyMce = function() {
                return scope.vm.initTinyMce();
            };
            // // Done without closure to make explicit.

            var editMessage = function(id) {
                var message;
                message = document.querySelector('#draft-' + id);
                message.classList.toggle('editing');
            };


            scope.toggleUpdateForm = function() {

                // ctrl.$timeout(function () {
                //     initiateTinyMce();
                // }, 10000);

                scope.showUpdateForm = !scope.showUpdateForm
            };

            // Clear message placeholder.
            scope.resetMessage = function() {
                scope.update = {
                    authorCustomerId: scope.vm.CustomerService.customerId,
                    senderCustomerId: scope.vm.CustomerService.customerId,
                    subject: '',
                    body: '',
                    communicationType: 'snippet',
                    destinationId: '',
                    publishToPage: true
                }
            };

            scope.resetMessage();

            scope.getPotentialSenders = function() {
                scope.vm.CommunicationService.getPotentialSenders(attr.destinationId).then(function(response) {
                    if (typeof response !== "undefined") {
                        scope.potentialSenders = response.data;
                    }
                }, function(error) {

                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })

                });
            };

            scope.getDrafts = function() {
                // only do this if the current user is an employee or the author
                scope.vm.CommunicationService.getProductDrafts(attr.destinationId).then(function(response) {
                    if (typeof response !== "undefined") {
                        scope.drafts = response.data;
                    }
                }, function(error) {
                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })

                });
            };
            // Invoke and retrieve draft content.  Replace with promise.
            scope.getDrafts();
            scope.getPotentialSenders();

            // Wait until we're inside an 'inbox-like' view, or adding notifications to the primary nav.
            scope.getInbox = function() {
                scope.vm.CommunicationService.getInbox().then(function(response) {
                    // Response is coming back null.
                }, function(error) {
                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })
                });
            }

            scope.submitDraft = function(event) {

                // scope.update.authorCustomerId = scope.vm.CustomerService.customerId;
                // scope.update.communicationType = 'snippet'; // Types: NULL, milestone, snippet, internal, chat
                scope.update.destinationId = scope.attr.destinationId; // destinationId is the product where the message should show.
                scope.update.destinationType = 'submission';
                //Not if you don't want to.
                // scope.update.publishToPage = true;
                // {"subject":"this is a subjectyyy","body":"this is the XDFGSDFGFDSG","destinationId":2693,"destinationType":"submission","publishToPage":1}

                scope.vm.CommunicationService.createDraft(scope.update).then(function(response) {
                    // console.log('scope.update', scope.update, 'response', response);
                    //  Rerun get drafts on submission.
                    scope.showUpdateForm = false
                    scope.getDrafts();
                    scope.resetMessage();
                }, function(error) {
                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })
                });
            }

            scope.submitStreamPost = function(event) {

                // Do not go through the draft phase, just publish directly

                scope.update.destinationType = 'user';
                scope.update.destinationId = scope.vm.CustomerService.customerId; // always post to own stream
                scope.update.publishToStream = true;

                scope.vm.CommunicationService.createDraft(scope.update).then(function(response) {

                    scope.update.messageId = response.data.id;
                    scope.vm.CommunicationService.sendMessage(scope.update).then(function(sendResponse) {
                        scope.resetMessage();

                        var container = document.getElementsByClassName('stream-activities')[0];
                        var updateContent = document.createElement('div');
                        updateContent.innerHTML = 'Published to stream: Update ' + ' \"' + response.data.subject + '\"';
                        updateContent.className = 'response-update';
                        container.insertBefore(updateContent, container.childNodes[0]);

                    }, function(error) {
                        scope.vm.NotificationsService.addNotification({
                            message: error.data,
                            type: "error"
                        })
                    });
                }, function(error) {
                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })
                });
            }

            scope.publishDraft = function(data) {
                data.publishToPage = true;
                // {"messageId":1, "destinationType":"customer", "destinationId":111, "senderCustomerId":11, publishToPage: 1}
                scope.vm.CommunicationService.sendMessage(data).then(function(response) {}, function(error) {
                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })

                });

            }

            scope.sendMessage = function(event) {
                scope.update = {
                    messageId: '',
                    destinationType: "customer",
                    destinationId: scope.vm.product.id, // destinationId is the product where the message should show.
                    senderCustomerId: scope.vm.CustomerService.customerId,
                    publishToPage: true
                }
                var l = Ladda.create(el[0].querySelector('.ladda-button'));
                l.start();
                // HTTP POST with body: {"messageId":1, "destinationType":"customer", "destinationId":111, "senderCustomerId":11, publishToPage: true}
                scope.vm.CommunicationService.sendMessage(scope.update).then(function(response) {
                    l.stop();
                }, function(error) {
                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })
                    l.stop()
                });
            }

            //Delete message needs all the collect parameters.
            // These need to be filled in correctly.
            // For real.
            scope.deleteMessage = function(id) {
                // Delete a message by ID:
                // https://www.betabrand.io/api/rest/message/delete/:id
                // HTTP DELETE with body: {"messageId":1, "senderCustomerId":11, "destinationType":"product", "destinationId":2693}
                scope.deletedMessage = {
                    messageId: id, // ID here is passed in as the specific draft to delete.
                    destinationType: "submission",
                    destinationId: scope.attr.destinationId, // destinationId is the product where the message should show.
                    senderCustomerId: scope.vm.CustomerService.customerId,
                    publishToPage: true
                }
                var draftId = '#draft-' + id + '-delete';
                var l = Ladda.create(document.querySelector(draftId));
                l.start();
                scope.vm.CommunicationService.deleteMessage(id, scope.deletedMessage).then(function(response) {
                    scope.getDrafts();
                }, function(error) {
                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })
                    l.stop()
                });
            }


            // editMessage

            scope.editMessage = function(id) {
                // Publish message by ID.

                scope.editedMessage = {
                    // id: id, // ID here is passed in as the specific draft to delete.
                    messageId: id, // ID here is passed in as the specific draft to delete.
                    destinationType: "submission",
                    destinationId: scope.attr.destinationId, // destinationId is the product where the message should show.
                    senderCustomerId: scope.vm.CustomerService.customerId,
                    publishToPage: true
                }
                var draftId = '#draft-' + id + '-edit';
                var l = Ladda.create(document.querySelector(draftId));
                editMessage(id);
            }

            scope.editMessageSave = function(data) {

                // Publish message by ID.

                // Get contents of the current editing fields.
                // Use the current clicked ID to put / patch updates to this message.

                // HTTP POST with body: {"id":1,"subject":"this is a subject updated","body":"this is the body updated"}
                scope.editedMessage = data;


                // update message (draft or published) message/update
                // HTTP POST with body: {"id":1,"subject":"this is a subject updated","body":"this is the body updated"}

                // Get submission in form content.
                var draftId = '#draft-' + data.id + '-save';
                var l = Ladda.create(document.querySelector(draftId));
                l.start();
                // Check to see if updateMessage exists.  Just put / update existing thing on hitting submit, but edit should just trigger the form that allows you to exit replacement content.
                scope.vm.CommunicationService.updateMessage(scope.editedMessage).then(function(response) {
                    l.stop();
                    editMessage(data.id);
                });

            }


            scope.publishMessage = function(id, senderId) {
                // Publish message by ID.

                scope.publishedMessage = {
                    // id: id, // ID here is passed in as the specific draft to delete.
                    messageId: id, // ID here is passed in as the specific draft to delete.
                    destinationType: "submission",
                    destinationId: scope.attr.destinationId, // destinationId is the product where the message should show.
                    senderCustomerId: senderId,
                    publishToPage: true
                };

                var draftId = '#draft-' + id + '-publish';
                var l = Ladda.create(document.querySelector(draftId));
                l.start();

                scope.vm.CommunicationService.sendMessage(scope.publishedMessage).then(function(response) {
                    var container = document.getElementsByClassName('product-updates')[0];
                    var updateContent = document.createElement('div');
                    updateContent.innerHTML = 'Published to page: Update ' + response.data.communication_type + ' ' + ' \"' + response.data.subject + '\"';
                    updateContent.className = 'response-update update-' + scope.publishedMessage.messageId;
                    container.insertBefore(updateContent, container.childNodes[0]);

                    l.stop();
                    scope.getDrafts();
                }, function(error) {
                    scope.vm.NotificationsService.addNotification({
                        message: error.data,
                        type: "error"
                    })
                    l.stop()
                });

            }
        }
    }

    CommunicationController.$inject = ['$scope', 'CommunicationService', 'CustomerService', 'ProductService', 'TrackingService', 'initTinyMce', '$rootScope', '$document', 'NotificationsService', '$timeout'];

    function CommunicationController($scope, CommunicationService, CustomerService, ProductService, TrackingService, initTinyMce, $rootScope, $document, NotificationsService, $timeout) {
        var vm = this;
        vm.CommunicationService = CommunicationService;
        vm.CustomerService = CustomerService;
        vm.ProductService = ProductService;
        vm.NotificationsService = NotificationsService;
        vm.TrackingService = TrackingService;
        vm.initTinyMce = initTinyMce;
        vm.$timeout = $timeout;
    }


})();

BetabrandApp.factory('ConfigService', ['$http', '$q', '$location', function($http, $q, $location) {

    function ConfigService() {
        var self = this

        self.getConfig = function(fields) {
            var deferred = $q.defer()
            var self = this
            $http
                .get('/api/rest/config?fields[]=' + fields.join("&fields[]="))
                .success(function(data) {
                    deferred.resolve(data)
                })
                .error(function(data) {
                    deferred.reject(data)
                })
            return deferred.promise
        }
    }
    return new ConfigService();
}]);

BetabrandApp.factory('ConnectionsService', ['$http', '_', '$rootScope', '$log', '$q',
    function($http, _, $rootScope, $log, $q) {

        function ConnectionsService() {

            var self = this
            self.connectionCache = {}

            self.getFollowers = function(userId, view, page, count) {
                var defer = $q.defer();

                self.getConnections(userId, view, page, count)
                    .then(function(connections) {
                        defer.resolve(connections.data)
                    }, function(error) {
                        defer.reject(error)
                    })

                return defer.promise
            }

            self.getConnections = function(userId, view, page, count) {

                if (typeof view === "undefined")
                    view = "min"

                //connection cache of $http promises keyed on userId and view
                //connection['12345']['full'] or connection['4567']['min']
                if (userId in self.connectionCache && view in self.connectionCache[userId])
                    return self.connectionCache[userId][view]

                var url = '/api/rest/connections/get/' + userId;

                //if view exists then add extra view param to api endpoint
                if (view)
                    url = url + "?view=" + view;

                self.connectionCache[userId] = {}
                self.connectionCache[userId][view] = $http({
                    method: "GET",
                    url: url
                })

                return self.connectionCache[userId][view]
            }

            self.createConnection = function(userId, targetUserId, type) {

                var connectionData = {
                    userId: userId,
                    targetUserId: targetUserId,
                    connectionType: type
                }

                return $http({
                    method: "POST",
                    url: '/api/rest/connections/create',
                    data: connectionData
                })
            }
            _doesConnectionExist = function(connections, targetUserId, type) {
                return connections.data.following.indexOf(targetUserId) > -1
            }

            self.doesConnectionExist = function(userId, targetUserId) {
                var defer = $q.defer();

                self.getConnections(userId, 'min').then(function(connections) {
                    defer.resolve(_doesConnectionExist(connections, targetUserId))
                }, function(error) {
                    defer.reject(error)
                })

                return defer.promise
            }

            self.removeConnection = function(userId, targetUserId, type) {
                return $http({
                    method: "DELETE",
                    url: '/api/rest/connections/delete/' + userId + '/' + type + '/' + targetUserId,
                })
            }
        }

        return new ConnectionsService()
    }
]);

BetabrandApp.factory('CustomerService', ['$http', '$rootScope', '$facebook', '$log', '$q', '$kookies', 'TrackingService', '$location', 'NotificationsService', 'ModalService', '$upload', '_', 'ProductService', 'LoggingService', '$window', 'FBAppId', 'OptimizelyService',
    function($http, $rootScope, $facebook, $log, $q, $kookies, TrackingService, $location, NotificationsService, ModalService, $upload, _, ProductService, LoggingService, $window, FBAppId, OptimizelyService) {

        function CustomerService() {

            var self = this
            var dataDeferred = null // the latest getData deferred obj
            var INIT = -1
            var lastLoginId = INIT

            self.initialized = false

            self.data = {}
            self.customerId = false
            self.facebookConnected = false
            self.newUser = true
            self.selectedAttributes = {}
            self.joinNewsletter = true

            function _updateData(newData) {
                self.data = newData
                self.customerId = newData.id
                TrackingService.track('updateCustomerData', self.data)
            }

            function _create(method, data) {
                var deferred = $q.defer()
                data = data || {};
                data.method = method

                if (self.joinNewsletter == true) {
                    data.newsletter = true
                } else {
                    data.newsletter = false
                }

                $http({
                    method: "post",
                    url: "/api/rest/auth/create/",
                    data: data
                }).success(
                    function(response) {
                        self.getData(true).then(function(response) {
                            TrackingService.track('createCustomer', method, response)
                            deferred.resolve(response)
                        })
                    }
                ).error(
                    function(response) {
                        deferred.reject(response)
                        $log.error('create failed')
                    }
                )
                return deferred.promise
            }

            function _login(method, data) {
                var deferred = $q.defer()
                data = data || {};
                data.method = method

                if (method == "facebook" && self.joinNewsletter) {
                    data.newsletter = true
                } else {
                    delete data.newsletter
                }

                $http({
                    method: "post",
                    url: "/api/rest/auth/login/",
                    data: data
                }).success(
                    function(response) {
                        self.getData(true).then(function(response) {
                            TrackingService.track('loginCustomer', method, self.data)

                            // clear FB logout cookie if it exists
                            $kookies.remove('fbLogout', { path: '/' })

                            deferred.resolve(response)
                        })
                    }
                ).error(
                    function(response) {
                        deferred.reject(response)
                        $log.error('login failed')
                    }
                )
                return deferred.promise
            }

            function _facebookLogout() {
                var deferred = $q.defer()
                $facebook.logout(function(response) {
                    // user is now logged out
                    $log.debug(response)
                    self.facebookConnected = false
                    deferred.resolve(response)
                })
                return deferred.promise
            }

            function _getFacebookLoginStatus() {
                // use the promise in code
                $facebook.getLoginStatus().then(
                    function(response) {
                        if (response.status == "connected") {
                            self.facebookConnected = true
                            $log.debug('facebook connected')
                        }
                    },
                    function(response) {
                        self.facebookConnected = false
                        $log.error('Facebook getLoginStatus error', response)
                    }
                );
            }

            /**
             * getData
             * Returns a promise which returns the customer data
             * @param forceRefresh
             * @returns {*}
             */
            self.getData = function(forceRefresh) {
                self.initialized = true;
                if (forceRefresh || !dataDeferred) {
                    var deferred = $q.defer()
                    dataDeferred = deferred // save ourselves as the latest deferred

                    $http
                        .get('/api/rest/customers/me')
                        .success(function(response) {
                            if (response.loggedIn) {
                                _updateData(response)
                                TrackingService.track('identifyCustomer', self.data)
                                if (self.data.keys && self.data.keys.mixpanel)
                                    TrackingService.setKey('mixpanel', self.data.keys.mixpanel);

                                if (self.data.keys && self.data.keys.optimizely)
                                    OptimizelyService.setKeys(self.data.keys.optimizely);

                                if (lastLoginId != response.id &&
                                    lastLoginId != INIT) {
                                    $rootScope.$broadcast('loggedIn')
                                }

                                lastLoginId = response.id

                                // Retrieve crowdfunding products by id if any exist.
                                if (response.crowdfundedProducts) {
                                    ProductService.getProducts(response.crowdfundedProducts.slice(0, 3)).then(function(products) {
                                        response.crowdfundingList = products.data
                                    })
                                }
                                deferred.resolve(response)
                            } else {
                                _updateData(response)

                                if (lastLoginId &&
                                    lastLoginId != INIT) {
                                    $rootScope.$broadcast('loggedOut')
                                }
                                lastLoginId = null
                                deferred.resolve(response)
                            }
                        })
                        .error(function(response) {
                            $log.error('CustomerService.getData fail:', response)
                            deferred.reject(response)
                        })

                }

                return dataDeferred.promise // return the latest deferred
            }

            self.emailCreateAccount = function(createAccountData) {
                return _create('email', createAccountData)
            }


            self.facebookLogin = function(source) {
                var deferred = $q.defer()
                var permissionScope = "email,user_birthday,user_likes,user_interests,user_location"
                    //handle login differently on chrome IOS
                if (!self.facebookConnected && navigator.userAgent.match('CriOS')) {
                    //hacky workaround for crappy fb login experience on 
                    //chrome iOS that google and facebook refuse to resolve
                    $window.fbLoginWorkaround = function() {
                        FB.getLoginStatus(function(response) {
                            if (response.status == 'connected') {
                                self.facebookConnected = true
                                _login('facebook', { 'source': source }).then(function(data) { deferred.resolve(data) }, function(data) { deferred.reject(data) })
                            }
                        }, true);
                    }

                    var ABSOLUTE_URI = window.location.protocol + "//" + window.location.host + "/facebookLoginHandler.html"
                    var redirect_uri = "&redirect_uri=" + ABSOLUTE_URI;
                    var url = "https://www.facebook.com/dialog/oauth?client_id=" + FBAppId + redirect_uri + "&scope=" + permissionScope;
                    window.open(url);
                } else if (!self.facebookConnected) {
                    $facebook.login({ 'scope': permissionScope }).then(function(response) {
                        $log.debug(response)
                        if (response.status == 'connected') {
                            self.facebookConnected = true
                            _login('facebook', { 'source': source }).then(function(data) { deferred.resolve(data) }, function(data) { deferred.reject(data) })
                        } else {
                            // handle the error
                            $log.error('facebook login failed')
                            deferred.reject(response)
                        }
                    })
                } else {
                    _login('facebook', { 'source': source }).then(function(data) { deferred.resolve(data) }, function(data) { deferred.reject(data) })
                }

                return deferred.promise
            }

            self.getHover = function(userId) {
                $log.debug('run getHover')
                return $http.get('api/rest/profile/' + userId + '?context=hovercard', {
                    cache: true
                })
            }

            self.getAccount = function(userId) {
                return $http.get('/api/rest/customers/' + userId)
            }

            self.getOrders = function() {
                return $http.get('/api/rest/customers/orders')
            }

            self.getProfile = function(userId) {
                return $http.get('/api/rest/profile/' + userId)
            }

            self.getSubmissions = function(userId) {
                return $http.get('/api/rest/thinktank/submissions/' + userId)
            }


            self.emailLogin = function(loginData) {
                return _login('email', loginData)
            }

            self.emailExists = function(email) {
                var data = { 'email': email }
                return _login('exists', { 'email': email })
            }

            self.logout = function() {
                var deferred = $q.defer()
                $http({
                    method: "delete",
                    url: "/api/rest/auth/logout/"
                }).success(function(response) {
                    // doesn't return new customer data - refresh it before updating status
                    self.getData(true).then(
                        function(response) {
                            deferred.resolve(response)

                            var path = $location.path()
                            if (path.indexOf('account') > -1) {
                                $location.path('/')
                            }
                        },
                        function(error) {
                            self.data = null
                            deferred.reject(error)
                        }
                    )
                }).error(function(response) {
                    self.data = null
                    $log.error("error: logout", response)
                    deferred.reject(response)
                })

                $kookies.set('fbLogout', 1, { expires: 365, path: '/' })

                return deferred.promise
            }

            /**
             * showLoginModal
             * @returns a promise which resolves when the modal is closed.
             */
            self.showLoginModal = function(inputs) {
                inputs = angular.extend({ source: "account", action: "login", hasAccount: true, product: {}, submission: {} }, inputs)
                $rootScope.$broadcast('toggleModal')
                var deferred = $q.defer()

                var templatePath = (OptimizelyService.handle('loginModal')) ? "angular/app/optimizely/loginModal/login-modal.html" : "/angular/app/modal/login/login-modal.html"

                ModalService.showModal({
                    templateUrl: templatePath,
                    controller: "LoginModalController as vm",
                    inputs: inputs
                }).then(function(modal) {
                    modal.close.then(function(result) {
                        deferred.resolve(result);
                    })
                })

                return deferred.promise
            }

            self.getReferrals = function() {
                var deferred = $q.defer()

                $http
                    .get('/angular/json/account-referrals.json')
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.getReferralsCf = function() {
                var deferred = $q.defer()

                $http
                    .get('/angular/json/account-referrals-cf.json')
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.getAddresses = function(customerId) {
                var deferred = $q.defer()

                if (!customerId) {
                    deferred.resolve([]);
                    return deferred.promise
                }

                $http
                    .get('/api/rest/customers/' + customerId + '/addresses')
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.updateAccount = function(id, data) {
                var deferred = $q.defer()

                $http({
                        url: '/api/rest/customers/' + id,
                        data: data,
                        method: 'put'
                    }).success(function(data) {
                        self.getData().then(function(response) {
                            deferred.resolve(response)
                        })
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.updateAddress = function(id, data) {
                var deferred = $q.defer()

                $http({
                        url: '/api/rest/customers/addresses/' + id,
                        data: data,
                        method: 'put'
                    }).success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.addAddress = function(customerId, data) {
                var deferred = $q.defer()

                $http({
                        url: '/api/rest/customers/' + customerId + '/addresses/',
                        data: data,
                        method: 'post'
                    }).success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.deleteAddress = function(id) {
                var deferred = $q.defer()

                $http({
                        url: '/api/rest/customers/addresses/' + id,
                        method: 'delete'
                    }).success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.resetPassword = function(email) {
                var deferred = $q.defer()

                var data = { "email": email }

                $http({
                    url: '/api/rest/password/reset/',
                    data: data,
                    method: 'post'
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            }

            self.updatePassword = function(password, confirmation, email, id, token, firstname, lastname) {
                var deferred = $q.defer()

                var data = { "password": password, "confirmation": confirmation, "id": id, "token": token }

                if (firstname)
                    data.firstname = firstname

                if (lastname)
                    data.lastname = lastname

                $http({
                    url: '/api/rest/password/reset/' + id,
                    data: data,
                    method: 'put'
                }).success(function(data) {
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            }

            // update data on checkout success
            $rootScope.$on('checkoutSuccess', function() {
                // refresh customer data before updating status
                self.getData(true)
            });

            self.updateSailthruVar = function(data) {
                $http({
                    url: '/api/rest/profile/update/',
                    data: data,
                    method: 'put'
                })
            }

            self.hasVoted = function(entityType, entityId, score) {
                var hasVoted = false;

                if (self.data && self.data.votes && self.data.votes[entityType] && self.data.votes[entityType][entityId]) {
                    //if we're looking for a specific score, then compare the value, otherwise just the presence of the key is enough
                    if (!score)
                        hasVoted = true;
                    else if (score == self.data.votes[entityType][entityId])
                        hasVoted = true;
                }

                return hasVoted
            }

            self.updateVotes = function(entityType, entityId, score) {
                if (self.data && self.data.votes) {
                    if (!self.data.votes[entityType]) {
                        self.data.votes[entityType] = {}
                    }
                    self.data.votes[entityType][entityId] = score
                }
            }

            $rootScope.$on('$routeChangeSuccess', function(event, current) {
                if (!self.initialized) {
                    // initialize
                    self.getData(true).then(function() {
                        _getFacebookLoginStatus()
                    })
                    self.initialized = true;
                }
            })

            self.uploadImage = function(image) {
                var deferred = $q.defer()

                if (!image) {
                    deferred.resolve({})
                    return deferred.promise
                }

                $upload.upload({
                    url: "/all/index/upload/",
                    fields: {
                        'title': self.data.firstname + " " + self.data.lastname,
                    },
                    file: image
                }).progress(function(evt) {
                    var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                    $log.debug('progress: ' + progressPercentage + '% ' + evt.config.file.name)
                }).success(function(data, status, headers, config) {
                    $log.debug('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data))
                    deferred.resolve(data)
                }).error(function(data) {
                    //it's weird to resolve here, but the photo failing to upload shouldn't block updating the rest fo the form.
                    // this is currently better than the alternative --Jared
                    deferred.resolve(data)
                })
                return deferred.promise
            }

            // initialize
            self.getData(true).then(function() {
                _getFacebookLoginStatus()
            })

        }

        return new CustomerService()
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("ages", ages);

    function ages() {
        var directive = {
            restrict: "A",
            scope: {
                ages: "=ages",
                title: "=title"
            },
            templateUrl: "/angular/app/dashboards/graph.html",
            link: linkFunc,
            controller: agesController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    agesController.$inject = ["$scope"];

    function agesController($scope) {

        var vm = this;

        vm.options = {
            chart: {
                type: 'discreteBarChart',
                height: 200,
                margin: {
                    top: 10,
                    right: 0,
                    bottom: 20,
                    left: 20
                },
                x: function(d) {
                    return d.age
                },
                y: function(d) {
                    return d.count
                },
                xAxis: {
                    axisLabel: 'Age',
                    tickFormat: function(d) {
                        return parseInt(d) + "-" + (parseInt(d) + 4)
                    }
                },
                yAxis: {
                    axisLabel: '',
                    ticks: false,
                    showMaxMin: false,
                    tickFormat: function(d) {
                        return d3.format('.0f')(d);
                    }
                },
                useInteractiveGuideline: true
            },
            title: {
                enable: false,
                text: vm.title
            }
        }

        vm.data = [{
            values: vm.ages,
            color: '#000',
            key: "Ages"
        }]

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("dashboard", dashboard);

    function dashboard() {
        var directive = {
            restrict: "E",
            replace: true,
            scope: {
                type: "@",
                id: "="
            },
            template: '<div ng-include="vm.dashboardTemplateUrl"></div>',
            link: linkFunc,
            controller: dashboardController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    dashboardController.$inject = ["$scope", 'AnalyticsService', '$ocLazyLoad'];

    function dashboardController($scope, AnalyticsService, $ocLazyLoad) {

        var vm = this
        vm.countryLimit = 5
        vm.loaded = false

        var activate = function() {

            switch (vm.type) {
                case "submission":
                    loadSubmissionData()
                    break;
                case "crowdfunding":
                    loadCrowdfundingData()
                    break;
                default:
                    loadReadyToWearData()
                    break;
            }
        }

        $ocLazyLoad.load([
            'angular/bower_components/d3/d3.js',
        ]).then(function() {
            return $ocLazyLoad.load('angular/bower_components/nvd3/build/nv.d3.js')
        }).then(function() {
            return $ocLazyLoad.load('angular/bower_components/angular-nvd3/dist/angular-nvd3.js')
        }).then(function() {
            activate()
        })

        var loadSubmissionData = function(option) {
            vm.dashboardTemplateUrl = "/angular/app/dashboards/submission.html"
            AnalyticsService.getData("submission", vm.id).then(function(response) {
                vm.data = response.data
                vm.filteredData = response.data
                vm.loaded = true
            })
        }

        var loadCrowdfundingData = function() {
            vm.dashboardTemplateUrl = "/angular/app/dashboards/crowdfunding.html"
            AnalyticsService.getData("product", vm.id).then(function(response) {
                vm.data = response.data
                vm.loaded = true
            })
        }

        var loadReadyToWearData = function() {
            vm.dashboardTemplateUrl = "/angular/app/dashboards/readytowear.html"
            AnalyticsService.getData("product", vm.id).then(function(response) {
                vm.data = response.data
                vm.loaded = true
            })
        }

        $scope.$watch("vm.id", function(current, original) {
            if (current !== original) {
                activate()
            }
        })
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("followersWhoPurchased", followersWhoPurchased);

    function followersWhoPurchased() {
        var directive = {
            restrict: "A",
            scope: {
                followers: "=followersWhoPurchased"
            },
            transclude: true,
            templateUrl: '/angular/app/dashboards/graph.html',
            link: linkFunc,
            controller: followersWhoPurchasedController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    followersWhoPurchasedController.$inject = ["$scope"];

    function followersWhoPurchasedController($scope) {

        var vm = this;
        vm.options = {
            chart: {
                type: 'pieChart',
                donut: true,
                height: 450,
                x: function(d) {
                    return d.key
                },
                y: function(d) {
                    return d.y;
                },
                showLabels: true,
                pie: {
                    startAngle: function(d) {
                        return d.startAngle / 2 - Math.PI / 2
                    },
                    endAngle: function(d) {
                        return d.endAngle / 2 - Math.PI / 2
                    }
                },
                duration: 500,
                legend: {
                    margin: {
                        top: 5,
                        right: 140,
                        bottom: 5,
                        left: 0
                    }
                }
            },
            title: {
                enable: true,
                text: 'Folowers Who Purchased'
            }
        }

        vm.data = [
            { key: "Purchased", y: vm.followers.purchased },
            { key: "Haven't Purchased", y: vm.followers.total - vm.followers.purchased }
        ]

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("followersWhoVoted", followersWhoVoted);

    function followersWhoVoted() {
        var directive = {
            restrict: "A",
            scope: {
                dashData: "=followersWhoVoted"
            },
            transclude: true,
            templateUrl: '/angular/app/dashboards/graph.html',
            link: linkFunc,
            controller: followersWhoVotedController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    followersWhoVotedController.$inject = ["$scope"];

    function followersWhoVotedController($scope) {

        vm.options = {
            chart: {
                type: 'pieChart',
                donut: true,
                height: 450,
                x: function(d) {
                    return d.key
                },
                y: function(d) {
                    return d.y;
                },
                showLabels: true,
                pie: {
                    startAngle: function(d) {
                        return d.startAngle / 2 - Math.PI / 2
                    },
                    endAngle: function(d) {
                        return d.endAngle / 2 - Math.PI / 2
                    }
                },
                duration: 500,
                legend: {
                    margin: {
                        top: 5,
                        right: 140,
                        bottom: 5,
                        left: 0
                    }
                }
            },
            title: {
                enable: true,
                text: 'Folowers Who Voted'
            }
        }

        vm.data = [
            { key: "Voted", y: vm.dashData.followers.voted },
            { key: "Haven't voted", y: vm.dashData.followers.total - vm.dashData.followers.voted }
        ]
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("genders", genders);

    function genders() {
        var directive = {
            restrict: "A",
            scope: {
                genders: "=genders",
                title: "=title"
            },
            transclude: true,
            templateUrl: '/angular/app/dashboards/graph.html',
            link: linkFunc,
            controller: gendersController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    gendersController.$inject = ["$scope"];

    function gendersController($scope) {

        var vm = this;
        vm.options = {
            chart: {
                type: 'pieChart',
                donut: true,
                height: 175,
                x: function(d) {
                    return d.key
                },
                y: function(d) {
                    return d.y;
                },
                showLabels: true,
                pie: {
                    startAngle: function(d) {
                        return d.startAngle / 2 - Math.PI / 2
                    },
                    endAngle: function(d) {
                        return d.endAngle / 2 - Math.PI / 2
                    },
                    id: 'genders'
                },
                labelSunbeamLayout: false,
                growOnHover: false,
                donutRatio: .5,
                duration: 500,
                showLegend: false,
                tooltip: {
                    valueFormatter: function(d, i) {
                        return d3.format('d')(d, i);
                    },
                },
                margin: {
                    top: 0,
                    right: -30,
                    bottom: -150,
                    left: -30
                }
            },
            title: {
                enable: false,
                text: vm.title
            }
        }

        vm.data = [
            { key: "Male", y: vm.genders.male },
            { key: "Female", y: vm.genders.female },
        ]

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("ordersPerDay", ordersPerDay);

    function ordersPerDay() {
        var directive = {
            restrict: "A",
            scope: {
                ordersPerDay: "=ordersPerDay"
            },
            transclude: true,
            templateUrl: '/angular/app/dashboards/graph.html',
            link: linkFunc,
            controller: ordersPerDayController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    ordersPerDayController.$inject = ["$scope", "_"];

    function ordersPerDayController($scope, _) {

        var vm = this;
        vm._ = _
            //API Object comes back with counts as a string. We need to parse out the max value to create the chart
            // var vpdMax = parseInt(_.max(vm.ordersPerDay, function(v) { return parseInt(v.count) }).count)

        var vpdMax = 100

        vm.options = {
            chart: {
                type: 'lineChart',
                height: 450,
                x: function(d) {
                    return new Date(d.date);
                },
                y: function(d) {
                    return d.count;
                },
                xAxis: {
                    axisLabel: 'Date',
                    showMaxMin: false,
                    tickFormat: function(d) {
                        return d3.time.format("%b %d")(new Date(d))
                    }
                },
                yAxis: {
                    axisLabel: 'Orders',
                    showMaxMin: false,
                    tickPadding: 20
                },
                legend: {
                    radioButtonMode: false,
                    rightAlign: false
                },
                interpolate: "monotone",
                useInteractiveGuideline: true,
                forceY: [0, vpdMax],
                pointSize: 75,
                margin: {
                    top: 10,
                    right: 0,
                    bottom: 20,
                    left: 20
                },
            },
            title: {
                enable: false,
                text: 'Daily Activity'
            },
            subtitle: {
                enable: false,
                text: 'Orders per day'
            }
        }

        vm.data = []

        if (vm.ordersPerDay.crowdfunded.length > 0) {
            vm.data.push({
                values: vm.ordersPerDay.crowdfunded,
                color: '#FF9800',
                key: "Backers"
            })
        }

        if (vm.ordersPerDay.ready_to_wear.length > 0) {
            vm.data.push({
                values: vm.ordersPerDay.ready_to_wear,
                color: '#EC230C',
                key: "Orders"
            })
        }

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("votesPerDay", votesPerDay);

    function votesPerDay() {
        var directive = {
            restrict: "A",
            scope: {
                votesPerDay: "=votesPerDay",
                pacePerDay: "=votesPacePerDay",
                viewsPerDay: "=viewsPerDay",
                commentsPerDay: "=commentsPerDay",
            },
            transclude: true,
            templateUrl: '/angular/app/dashboards/graph.html',
            link: linkFunc,
            controller: votesPerDayController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    votesPerDayController.$inject = ["$scope"];

    function votesPerDayController($scope) {

        var vm = this;
        vm.minDate = new Date()
        vm.maxDate = new Date()

        var cumulativeTotal = 0
        vm.options = {
            chart: {
                type: 'lineChart',
                height: 300,
                x: function(d) { return new Date(d.date); },
                y: function(d, i, p) {
                    if (d.cumulative)
                        return d.cumulative
                    else
                        return d.count
                },
                xAxis: {
                    axisLabel: 'Date',
                    tickFormat: function(d) { return d3.time.format("%b %d")(new Date(d)) },
                    showMaxMin: false
                },
                yAxis: {
                    showMaxMin: false,
                    tickPadding: 20
                },
                useInteractiveGuideline: true,
                interpolate: "monotone",
                pointSize: 75,
                margin: {
                    top: 10,
                    right: 0,
                    bottom: 20,
                    left: 20
                },
                showLegend: true
            },
            title: {
                enable: false,
                text: 'Daily Activity'
            },
            subtitle: {
                enable: false,
                text: 'Votes and views per day'
            }
        }

        var _generateCumulative = function() {
            angular.forEach(vm.data, function(set, index) {
                angular.forEach(set.values, function(v, k) {
                    if (set.showCumulative != true) return false
                    if (k == 0)
                        vm.data[index].values[k].cumulative = v.count
                    else
                        vm.data[index].values[k].cumulative = vm.data[index].values[k - 1].cumulative + v.count
                })
            })
        }

        vm.filterDataBy = function(theRange) {

            vm.maxDate = new Date()

            if (theRange == 'Last Month') {
                vm.minDate = new Date().setMonth(new Date().getMonth() - 1)
            } else if (theRange == 'Last Week') {
                vm.minDate = new Date().setDate(new Date().getDate() - 7)
            } else {
                vm.minDate = 0
            }

            var votes = _.filter(vm.votesPerDay, function(elm) {
                return new Date(elm.date) > vm.minDate;
            })
            var views = _.filter(vm.viewsPerDay, function(elm) {
                return new Date(elm.date) > vm.minDate;
            })

        }

        vm.data = [{
                values: vm.votesPerDay,
                color: '#3eb1e8',
                key: "Votes",
                showCumulative: true
            },
            {
                values: vm.pacePerDay,
                color: '#FFC83F',
                key: "Pace",
                classed: 'dashed',
                showCumulative: false
            },
            {
                values: vm.commentsPerDay,
                color: '#EC230C',
                key: "Comments",
                showCumulative: true
            }
        ]

        _generateCumulative()
    }

})();

BetabrandApp.directive('affirmDirective', ['AssetService', 'APP_CONFIG', function(AssetService, APP_CONFIG) {
    return {
        restrict: 'E',
        template: '<div class="affirm-message" ng-if="payment"><a href ng-click="openModal()">{{prefix}} as low as ${{payment}}/month <span ng-if="showLogo">with <img src="https://cdn-assets.affirm.com/images/blue_logo-transparent_bg.png" width="35"></span></a></div>',
        replace: false,
        link: function(scope, elm, attrs) {

            //if app config shows affirm disabled, bail out
            if (!APP_CONFIG.affirmPaymentsEnabled) {
                return
            }

            attrs.$observe('total', activate);


            function activate() {
                scope.payment = false
                scope.prefix = "or"
                scope.showLogo = true
                scope.openModal = function() {}

                if (attrs.prefix) {
                    scope.prefix = attrs.prefix
                }

                if (attrs.showlogo == "false") {
                    scope.showLogo = false;
                }

                AssetService.waitForLibrary('affirm').then(function() {
                    if (attrs.total > 50 && 'affirm' in window) {
                        var options = {
                            apr: "0.20",
                            months: 12,
                            amount: attrs.total * 100
                        }
                        affirm.ui.payments.get_estimate(options, function(payment) {
                            scope.payment = payment.payment_string
                            scope.openModal = payment.open_modal
                        })

                    }
                })
            }
        }
    };
}]);

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('anchorScroll', anchorScroll);

    function anchorScroll() {
        var directive = {
            link: linkFunc,
            controller: anchorScrollController,
            // controllerAs: 'vm',
            // bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            var watch = scope.$watch(function() {
                if (el[0].clientHeight > 0) {
                    // if the hash matches the element id, scroll to it
                    if (el.attr("id") === ctrl.$location.hash()) {
                        ctrl.$timeout(function() {
                            ctrl.$document.scrollTo(el, 120, 400);
                        }, 1300);
                    }

                    // clear the watch
                    watch();
                }
            });

            // Clean up
            ctrl.$timeout(function() {
                watch();
            }, 10000);

            scope.cleanUp = function() {
                watch();
            };

            scope.$on('$destroy', scope.cleanUp);
        }
    }

    anchorScrollController.$inject = ['$scope', '$document', '$location', '$timeout'];

    function anchorScrollController($scope, $document, $location, $timeout) {
        var vm = this;
        vm.$document = $document;
        vm.$location = $location;
        vm.$timeout = $timeout;
    }
})();

/**
 * @desc scroll directive that can be used across the whole Betabrand application
 * @example <div category-scrolled></div>
 */
(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("categoryScrolled", categoryScrolled);

    function categoryScrolled() {
        var directive = {
            restrict: "A",
            scope: {},
            link: linkFunc,
            controller: categoryScrolledController,
            controllerAs: "vm"
        };
        return directive;

        function linkFunc($scope, el, attrs, ctrl) {

            // Climbs dom for scrolled object, past the selector down to the product cards.
            var raw

            var checkBounds = function(evt) {

                if (!document.querySelector('.js-category-scrolled-target')) {
                    return
                }

                raw = document.querySelector('.js-category-scrolled-target').children

                var rectObject = raw[ctrl.revealCount - 12]

                if (typeof rectObject != "object") {
                    $scope.revealCount = ctrl.revealCount;
                    return
                }

                if (typeof rectObject === "undefined" && typeof raw[raw.length - 1] == "object") {
                    rectObject = raw[raw.length - 1].getBoundingClientRect()
                } else {
                    rectObject = rectObject.getBoundingClientRect()
                }

                if ((ctrl.$window.innerHeight > rectObject.bottom + 100) && (ctrl.revealCount <= raw.length)) {
                    ctrl.revealCount = ctrl.revealCount + 12;
                    $scope.$eval(attrs.scrolled);
                }
                ctrl.$rootScope.$broadcast('stickyBoxUpdate')

            }

            $scope.$on("resetRevealCount", function() {
                // $scope.revealCount = 14
                // ctrl.revealCount = 14
                // This should work but doesn't
            })

            angular.element(ctrl.$window).bind('scroll load', checkBounds)

            $scope.$on('$destroy', function() {
                angular.element(ctrl.$window).unbind('scroll load')
            })

        }
    }

    categoryScrolledController.$inject = ["$scope", "$window", "$rootScope"];

    function categoryScrolledController($scope, $window, $rootScope) {

        var vm = this
        vm.$window = $window
        vm.$rootScope = $rootScope
        vm.revealAmount = 14
        vm.revealCount = vm.revealAmount

    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('compile', compile);

    function compile() {
        var directive = {
            restrict: 'A',
            link: linkFunc,
            controller: compileController
                // controllerAs: 'vm',
                // bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            ctrl.$timeout(function() {
                ctrl.$compile(el.contents())(scope);
            })
        }
    }

    compileController.$inject = ['$scope', '$timeout', '$compile'];

    function compileController($scope, $timeout, $compile) {
        var vm = this;
        vm.$timeout = $timeout;
        vm.$compile = $compile;
    }
})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('contestSignupPage', contestSignupPage);

    function contestSignupPage() {
        var directive = {
            restrict: 'E',
            template: '<div class="contest-signup-page"></div>',
            scope: {
                contestName: '@',
                resetAfterSubmit: '=?'
            },
            transclude: true,
            link: linkFunc,
            replace: true,
            controller: ContestSignupPageController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };

        return directive;

        function linkFunc(scope, el, attr, ctrl, transclude) {
            // inject transluded elements, make child of current scope
            transclude(scope.$new(), function(transcludedElements) {
                el.append(transcludedElements);
            });
        }
    }

    ContestSignupPageController.$inject = ['$scope', '$timeout', 'NewsletterService'];

    function ContestSignupPageController($scope, $timeout, NewsletterService) {
        var vm = this;
        vm.successView = false;
        vm.isLoadingEmail = false;
        vm.resetAfterSubmit = vm.resetAfterSubmit || false;

        vm.enterContestAndSubscribe = function(email) {
            vm.isLoadingEmail = true;
            var data = {
                email: email,
                contest: vm.contestName,
                source: 'Contest Signups',
                incentivized: false,
                url: window.location.href
            };

            NewsletterService.signup(data).then(
                function(response) {
                    vm.successView = true;
                    vm.isLoadingEmail = false;
                    if (vm.resetAfterSubmit) {
                        $timeout(function() {
                            vm.successView = false;
                            document.getElementById("contest-email").reset()
                        }, 5000);
                    }
                },
                function(error) {
                    vm.isLoadingEmail = false;
                    vm.errorMessage = error.messages.error[0].message;

                    $timeout(function() {
                        vm.errorMessage = null;
                    }, 5000);
                }
            )
        }
    }
})();

//Off Click
(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive("trackFocus", trackFocus);

    function trackFocus() {
        var directive = {
            restrict: "A",
            scope: false,
            link: linkFunc,
            controller: trackFocusController,
            controllerAs: "vm",
            bindToController: true
        };

        return directive;

        function linkFunc($scope, el, attrs, ctrl) {


            el.bind("blur", function(e) {
                ctrl.$timeout(function() {
                    var data = angular.element(e.target).data();
                    if (data.$ngModelController)
                        data.$ngModelController.hasFocus = false
                }, 0);
            });
            el.bind("focus", function(e) {
                ctrl.$timeout(function() {
                    var data = angular.element(e.target).data();
                    if (data.$ngModelController)
                        data.$ngModelController.hasFocus = true
                }, 0);
            })

        }
    }

    trackFocusController.$inject = ["$scope", "$timeout"];

    function trackFocusController($scope, $timeout) {
        var vm = this;
        vm.$timeout = $timeout;
    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('longClick', longClick);

    function longClick() {
        var directive = {
            restrict: 'A',
            priority: 200, // want this to run before ng-href
            link: linkFunc,
            controller: longClickController
                //controllerAs: 'vm'
                //bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {

            var _interval = false,
                _length = 3000;

            function _down() {
                ctrl.$interval.cancel(_interval);
                _interval = ctrl.$interval(function() {
                    scope.$eval(attr.longClick);
                }, _length);
            }

            function _up() {
                ctrl.$interval.cancel(_interval);
            }

            el.on("mousedown", _down);
            el.on("touchstart", _down);
            el.on("mouseup", _up);
            el.on("touchend", _up);

            function cleanUp() {
                el.off("mousedown", _down);
                el.off("touchstart", _down);
                el.off("mouseup", _up);
                el.off("touchend", _up);
            }

            scope.$on('$destroy', cleanUp);
        }
    }

    longClickController.$inject = ['$scope', '$interval'];

    function longClickController($scope, $interval) {
        var vm = this;
        vm.$interval = $interval;
    }
})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('offClick', offClick);

    function targetInFilter(target, filter) {
        if (!target || !filter) return false;
        var elms = angular.element(document.querySelectorAll(filter));
        var elmsLen = elms.length;
        for (var i = 0; i < elmsLen; ++i)
            if (elms[i].contains(target)) return true;
        return false;
    }

    function offClick() {
        var directive = {
            restrict: 'A',
            scope: {
                offClick: '&',
                offClickIf: '&'
            },
            link: linkFunc,
            controller: offClickController
                //controllerAs: 'vm'
                //bindToController: true
        };

        return directive;

        function linkFunc(scope, el, attr, ctrl) {

            if (attr.offClickIf) {
                scope.$watch(scope.offClickIf, function(newVal, oldVal) {
                    if (newVal && !oldVal) {
                        $timeout(function() {
                            ctrl.$document.on('click', handler);
                        });
                    } else if (!newVal) {
                        ctrl.$document.off('click', handler);
                    }
                });
            } else {
                ctrl.$document.on('click', handler);
            }

            scope.$on('$destroy', function() {
                ctrl.$document.off('click', handler);
            });

            el.on('$destroy', function() {
                ctrl.$document.off('click', handler);
            });

            function handler(event) {
                // This filters out artificial click events. Example: If you hit enter on a form to submit it, an
                // artificial click event gets triggered on the form's submit button.
                if (event.pageX == 0 && event.pageY == 0) return;

                var target = event.target || event.srcElement;
                if (!(el[0].contains(target) || targetInFilter(target, attr.offClickFilter))) {
                    scope.$apply(scope.offClick());
                }
            }

        }
    }

    offClickController.$inject = ['$scope', '$document', '$timeout'];

    function offClickController($scope, $document, $timeout) {
        var vm = this;
        vm.$document = $document;
        vm.$timeout = $timeout;
    }
})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("onFileChange", onFileChange);

    function onFileChange() {
        var directive = {
            restrict: "A",
            scope: true,
            link: linkFunc
        };
        return directive;

        function linkFunc($scope, el, attrs, ctrl) {

            var onChangeHandler = function() {
                $scope.$eval(attrs.onFileChange)

            };

            el.bind('change', function(e) {
                $scope.$apply(function() {
                    var files = el[0].files;
                    if (files) {
                        onChangeHandler(files);
                    }
                });
            });

        }
    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('readMore', readMore);

    function readMore() {
        var directive = {
            link: linkFunc,
            scope: {},
            controller: readMoreController
                // controllerAs: 'vm',
                // bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            /* Assumes there are a number of paragraph tags and places a read more link after the first paragraph */
            scope.$watch(attr.ngBindHtml, function(newVal, oldVal) {
                var readmorecount = el[0].innerText.split('');
                ctrl.$timeout(function() {
                    if (readmorecount.length > 440) {
                        el.addClass('read-more');
                        angular.element(angular.element(el))
                            .append(ctrl.$compile('<button class="read-more-button" ng-click="readAll()" type="button" compile>Read More</button>')(scope));
                        scope.$apply();
                    }
                });
            });

            scope.readAll = function() {
                var readButton = el[0].getElementsByClassName('read-more-button')[0];
                el.toggleClass('read-all');
                readButton.innerText = (readButton.innerText == 'Read More' ? 'Read Less' : 'Read More');
            }
        }
    }

    readMoreController.$inject = ['$scope', '$timeout', '$compile'];

    function readMoreController($scope, $timeout, $compile) {
        var vm = this;
        vm.$timeout = $timeout;
        vm.$compile = $compile;
    }
})();

BetabrandApp.directive('recompile', function($compile, $parse) {
    return {
        scope: true, // required to be able to clear watchers safely
        compile: function(el) {
            var template = getElementAsHtml(el)
            return function link(scope, $el, attrs) {
                var stopWatching = scope.$parent.$watch(attrs.recompile, function(_new, _old) {

                    //if value isn't changing, lets bail out
                    if (!_new || _new === _old) {
                        return
                    }

                    // recompile
                    var newEl = $compile(template)(scope.$parent)
                    $el.replaceWith(newEl)

                    // Destroy old scope, reassign new scope.
                    stopWatching()
                    scope.$destroy()
                })
            }
        }
    }

    function getElementAsHtml(el) {
        return angular.element('<recompile></recompile>').append(el.clone()).html()
    }
});



// Proposed replacement, but uses compile and not link. -FB

// (function(){

//   'use strict';

// 	angular
// 		.module('BetabrandApp')
// 		.directive("recompile", recompile);

// 		function recompile() {

// 			var directive = {
// 				scope: true,
// 				compile: compileFunc,
// 				controller: recompileController
// 			};

// 			return directive;

// 			function compileFunc($scope, el, attr, ctrl) {

// 				var template = getElementAsHtml(el)

// 	      return function link($scope, el, attr, ctrl) {

// 					var stopWatching = $scope.$parent.$watch(attr.recompile, function(_new, _old) {

// 						//if value isn't changing, lets bail out
// 						if (!_new || _new === _old) {
// 							return
// 						}

// 						// recompile
// 						var newEl = ctrl.$compile(template)($scope.$parent)
// 						el.replaceWith(newEl) 

// 						// Destroy old scope, reassign new scope.
// 						stopWatching()
// 						$scope.$destroy()
// 					})

// 				}

// 			}

// 			function getElementAsHtml(el) {
// 				return angular.element('<recompile></recompile>').append(el.clone()).html()
// 			}

// 		}

// 		recompileController.$inject = ["$scope", "$compile", "$parse"];

// 		function recompileController($scope, $compile, $parse) {
// 			var vm = this;
// 			vm.$compile = $compile;
// 			vm.$parse = $parse;
// 		}

// })();


/*

 <sizing-chart
 title='Size'
 row-labels='Waist|Hip'
 column-labels='X-Small|Small|Medium|Large|X-Large|2X-Large'
 waist-values='24.5-25.5"|26-27"|28-29"|30-31.5"|33"|35"'
 hip-values='33.5-34.5"|36-37"|38-39"|40-41.5"|43"|45"'>
 </sizing-chart>

 */
(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('sizingChart', sizingChart);

    function sizingChart() {
        var directive = {
            restrict: 'E',
            templateUrl: '/angular/app/directives/sizing-chart.html',
            replace: true,
            scope: {
                unit: "@",
                chart: "=chart"
            },
            link: linkFunc,
            controller: sizingChartController,
            controllerAs: 'vm',
            bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            ctrl.createRows();
        }
    }

    sizingChartController.$inject = ['$scope'];

    function sizingChartController($scope) {
        var vm = this;
        vm.rows = [];
        vm.createRows = createRows;

        function createRows() {
            for (var i = 0; i < vm.chart.rowLabels.length; i++) {
                var val = vm.chart.rowLabels[i].toLowerCase() + 'Values';
                val = val.toCamelCase();

                var vals = vm.chart[val];

                vm.count = (vals.length > vm.count) ? vals.length : vm.count;

                vm.rows.push({
                    label: vm.chart.rowLabels[i],
                    values: vals
                });
            }
        }

        String.prototype.toCamelCase = function() {
            return this.replace(/^([A-Z])|\s(\w)/g, function(match, p1, p2, offset) {
                if (p2) return p2.toUpperCase();
                return p1.toLowerCase();
            });
        };
    }

    angular
        .module('BetabrandApp')
        .filter('measurement', measurement);

    function measurement() {
        return function(value, unit) {
            if (unit !== 'cm') {
                return value + '"'
            }

            if (value.search('-') > -1) {
                var parts = value.split('-')
                for (var i = 0; i < parts.length; i++) {
                    parts[i] = Math.floor(parts[i] * 2.54)
                }
                return parts.join('-') + 'cm'
            } else {
                return Math.floor(value * 2.54) + 'cm'
            }

        }
    }
})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("streamPositionTracking", streamPositionTracking);

    function streamPositionTracking() {
        var directive = {
            restrict: "A",
            priority: 200, // give it higher priority than built-in ng-href
            scope: {},
            link: linkFunc,
            controller: trackLinkClickController,
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attrs, ctrl) {

            var recordPosition = function(e) {
                ctrl.ActivityStreamService.lastClickedActivity = attrs.activityId
            }

            el.on("click", recordPosition)

            cleanUp = function() {
                el.off('click', recordPosition);
            };

            $scope.$on('$destroy', cleanUp);

        }
    }

    trackLinkClickController.$inject = ["$scope", "ActivityStreamService"];

    function trackLinkClickController($scope, ActivityStreamService) {
        var vm = this;
        vm.ActivityStreamService = ActivityStreamService;
    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('submitIdea', submitIdea);

    function submitIdea() {
        var directive = {
            template: '<a class="submit-idea" ng-href="/submission{{vm.contestLink}}">{{vm.linkText}}</a>',
            replace: true,
            link: linkFunc,
            scope: {},
            controller: submitIdeaController,
            controllerAs: 'vm',
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            ctrl.setData(attr);

            var calculateCardHeight = function() {
                el.css('height', angular.element(document.querySelector('.category-products')).find("product-card")[0].clientHeight + 'px')
            }

            if (attr.checkHeight) {

                angular.element(ctrl.$window).bind('resize', calculateCardHeight)

                $scope.$on('$destroy', function() {
                    angular.element(ctrl.$window).unbind('resize')
                })

                ctrl.$timeout(function() {
                    calculateCardHeight()
                }, 0);
            }

        }
    }

    submitIdeaController.$inject = ["$scope", "$window", "$timeout"];

    function submitIdeaController($scope, $window, $timeout) {
        var vm = this;
        vm.$window = $window
        vm.$timeout = $timeout
        vm.setData = setData

        function setData(attr) {
            vm.linkText = attr.linkText ? attr.linkText : 'Submit a Design';
            vm.contestLink = attr.contestLink ? ("?contest=" + attr.contestLink) : null;
        }

    }
})();

BetabrandApp.directive('timer', ['TrackingService', '$interval', '$location',
    function(TrackingService, $interval, $location) {
        return {
            scope: {
                redirectUrl: '@',
                deadline: '@'
            },
            restrict: 'E',
            template: "<div class='timer'><span class='hours'>{{hours}}</span><span class='minutes'>{{minutes}}</span><span class='seconds'>{{seconds}}</span></div>",
            link: function(scope, elem, attrs) {
                var deadline = Date.parse(scope.deadline.replace(" ", "T") + "Z")

                var promise = $interval(function() {
                    var offset = new Date().toUTCString('en-US', { timeZone: "America/Los_Angeles" })
                    scope.now = Date.parse(offset)
                    var diff = deadline - scope.now;
                    scope.diff = diff
                    if (diff < 0) {
                        scope.hours = 0
                        scope.minutes = 0
                        scope.seconds = 0
                        if (scope.redirectUrl) {
                            $location.path(scope.redirectUrl)
                            $interval.cancel(promise)
                        }
                        return false
                    }

                    scope.hours = Math.floor(diff / 3600000)
                    scope.hours = (scope.hours < 10) ? "0" + scope.hours : scope.hours
                    diff = diff % 3600000
                    scope.minutes = Math.floor(diff / 60000)
                    scope.minutes = (scope.minutes < 10) ? "0" + scope.minutes : scope.minutes
                    diff = diff % 60000
                    scope.seconds = Math.floor(diff / 1000)
                    scope.seconds = (scope.seconds < 10) ? "0" + scope.seconds : scope.seconds
                }, 1000)
            }
        }
    }
]);
(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("trackLinkClick", trackLinkClick);

    function trackLinkClick() {
        var directive = {
            restrict: "A",
            priority: 200, // give it higher priority than built-in ng-href
            scope: {
                trackEvent: '@',
                trackData: '=',
                position: '=',
                activity: '='
            },
            link: linkFunc,
            controller: trackLinkClickController,
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attrs, ctrl) {

            var trackLink = function(event) {
                // @TODO -- ZL This is super hacky...
                // Declare list of acceptable tags
                var allowedTags = [
                    'a',
                    'button',
                    'span'
                ]

                // Get all elements
                var element = event.srcElement,
                    parentElement = element.parentNode,
                    grandparentElement = parentElement.parentNode;

                // Get all attributes of each element
                var attributes = ctrl._.extend(
                    element.attributes,
                    parentElement ? parentElement.attributes : {},
                    grandparentElement ? grandparentElement.attributes : {}
                )

                // Only continue if any of the elements is a button or anchor
                // Or if any of those elements contain an 'ng-click' attribute
                if (allowedTags.indexOf(element.tagName.toLowerCase()) > -1 ||
                    allowedTags.indexOf(parentElement.tagName.toLowerCase()) > -1 ||
                    allowedTags.indexOf(grandparentElement.tagName.toLowerCase()) > -1 ||
                    attributes.getNamedItem('ng-click') !== null
                ) {
                    var data = {
                        content: {
                            foreign_id: $scope.activity.foreign_id
                        },
                        position: $scope.position,
                        linkClass: element.className, // Pass in the class name of the element to help us better identify
                        Source: 'Stream'
                    }

                    var trackData = angular.isFunction($scope.trackData) ? $scope.trackData() : $scope.trackData

                    trackData = ctrl._.extend(data, trackData)

                    ctrl.TrackingService.trackEvent($scope.trackEvent, trackData)

                    // Only track the first click
                    cleanUp()
                }
            }

            if ($scope.trackEvent && $scope.activity) {
                el.on('click', trackLink)
            }

            var cleanUp = function() {
                el.off('click', trackLink);
            };

            $scope.$on('$destroy', cleanUp);

        }
    }

    trackLinkClickController.$inject = ["$scope", "TrackingService", "$location", "_"];

    function trackLinkClickController($scope, TrackingService, $location, _) {
        var vm = this;
        vm.TrackingService = TrackingService;
        vm.$location = location;
        vm._ = _;

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbVideo", bbVideo);

    function bbVideo() {
        var directive = {
            restrict: 'E',
            replace: true,
            scope: {
                name: '@',
                description: '@',
                url: '@',
                play: '='
            },
            templateUrl: "/angular/app/directives/video.html",
            link: linkFunc,
            controller: bbVideoController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            // make sure URL is in proper format
            $scope.fixedURL = fixUrl($scope.vm.url)

            if (!ctrl.init)
                ctrl.initYTListener()

            ctrl.youTubeIframeAPIReady.promise.then(function() {
                if ($scope.vm.play)
                    $scope.vm.player.playVideo()

                var iFrame = el.find('iframe')
                if (iFrame && iFrame.length) {
                    $scope.vm.player = new YT.Player(iFrame[0], {
                        events: {
                            onStateChange: onPlayerStateChange,
                            onError: onPlayerError
                        }
                    })
                }
            })

            function onPlayerStateChange(e) {
                // track % played every second
                if (e["data"] == YT.PlayerState.PLAYING)
                    setTimeout(onPlayerPercent, 1000, e["target"])

                // track play/pause
                var video_data = e.target["getVideoData"](),
                    value = video_data.video_id + ':' + video_data.title
                if (e["data"] == YT.PlayerState.PLAYING && $scope.vm.play == false) {
                    ctrl.TrackingService.trackEvent('Play Video', {
                        'category': 'Video',
                        'label': 'YouTube',
                        'value': value
                    })
                    if (!$scope.vm.play) {
                        $scope.vm.play = true
                        $scope.$digest()
                    }
                }
                if (e["data"] == YT.PlayerState.PAUSED) {
                    ctrl.TrackingService.trackEvent('Pause Video', {
                        'category': 'Video',
                        'label': 'YouTube',
                        'value': value
                    })
                    if ($scope.vm.play) {
                        $scope.vm.play = false
                        $scope.$digest()
                    }
                }
            }

            function onPlayerError(e) {
                ctrl.TrackingService.trackEvent('Video Error', {
                    'category': 'Video',
                    'label': 'YouTube',
                    'value': e["target"]["src"] + "-" + e["data"]
                })
            }

            // report the % played if it matches 0%, 25%, 50%, 75% or completed
            function onPlayerPercent(e) {
                if (e["getPlayerState"]() == YT.PlayerState.PLAYING) {
                    var t = e["getDuration"]() - e["getCurrentTime"]() <= 1.5 ? 1 : (Math.floor(e["getCurrentTime"]() / e["getDuration"]() * 4) / 4).toFixed(2)
                    if (!e["lastP"] || t > e["lastP"]) {
                        var video_data = e["getVideoData"](),
                            label = video_data.video_id + ':' + video_data.title
                        e["lastP"] = t
                        ctrl.TrackingService.trackEvent('Percent Video Played', {
                            'category': 'Video',
                            'label': label,
                            'value': t * 100 + "%"
                        })
                    }
                    e["lastP"] != 1 && setTimeout(onPlayerPercent, 1000, e)
                }
            }

            function fixUrl(url) {
                var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/
                var match = url.match(regExp)

                // convert any youtube ids to urls
                if (!match) {
                    if (url && url.length == 11) {
                        url = '//www.youtube.com/embed/' + videoId + '?rel=0&amp;showinfo=0&amp;enablejsapi=1'
                    }
                } else {
                    // OPTIONAL: Enable JSAPI if it's not already on the URL
                    // note: this will cause the Youtube player to "flash" on the page when reloading to enable the JS API
                    if (url.indexOf('enablejsapi=') === -1)
                        url += (url.indexOf('?') === -1 ? '?' : '&') + 'enablejsapi=1'
                    if (url.indexOf('rel=') === -1)
                        url += (url.indexOf('?') === -1 ? '?' : '&') + 'rel=0'
                    if (url.indexOf('showinfo=') === -1)
                        url += (url.indexOf('?') === -1 ? '?' : '&') + 'showinfo=0'
                }

                return url
            }

            // pause if attribute set to not playing
            $scope.$watch('play', function(newValue) {
                if ($scope.vm.player) {
                    if (newValue)
                        $scope.vm.player.playVideo()
                    else
                    if (typeof $scope.vm.player.pauseVideo == 'function') {
                        $scope.vm.player.pauseVideo()
                    }
                }
            })

        }
    }

    bbVideoController.$inject = ["$scope", "$q", "TrackingService"];

    function bbVideoController($scope, $q, TrackingService) {
        var vm = this;
        vm.$q = $q;
        vm.TrackingService = TrackingService;

        vm.init = false;
        vm.youTubeIframeAPIReady = $q.defer();
        // var youTubeIframeAPIReady = $q.defer();

        vm.initYTListener = function() {
            vm.init = true

            // youtube API callback
            window.onYouTubeIframeAPIReady = function() {
                vm.youTubeIframeAPIReady.resolve()
            }

            // load the Youtube JS api and get going
            var j = document.createElement("script"),
                f = document.getElementsByTagName("script")[0]
            j.src = "//www.youtube.com/iframe_api"
            j.async = true
            f.parentNode.insertBefore(j, f)
        }

    }

})();

(function() {
    'use strict';


    angular
        .module('BetabrandApp')
        .filter('videoDefaultImage', function($sce) {
            return function(videoUrl) {
                var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/
                var match = videoUrl.match(regExp)

                if (match && match[7].length == 11) {
                    var videoId = match[7]
                    videoUrl = '//img.youtube.com/vi/' + videoId + '/default.jpg'
                }
                return $sce.trustAsResourceUrl(videoUrl)
            }
        });


})();

// BetabrandApp.directive("whenScrolled", function ($window) {
//     return{
//         restrict: 'A',
//         link: function (scope, elem, attrs) {
//             var raw = elem[0]
//             var checkBounds = function (evt) {
//                 var rectObject = raw.getBoundingClientRect()
//                 if ($window.innerHeight >rectObject.bottom+100) {
//                     scope.$apply(attrs.whenScrolled)
//                 }
//             }
//             angular.element($window).bind('scroll load', checkBounds)
//             scope.$on('$destroy', function() {
//                 angular.element($window).unbind('scroll load')
//             })

//         }
//     }
// });
(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("whenScrolled", whenScrolled);

    function whenScrolled() {
        var directive = {
            restrict: "A",
            link: linkFunc,
            controller: whenScrolledController
        };
        return directive;

        function linkFunc($scope, el, attrs, ctrl) {

            var raw = el[0]
            var checkBounds = function(evt) {
                var rectObject = raw.getBoundingClientRect()
                if (ctrl.$window.innerHeight > rectObject.bottom + 100) {
                    $scope.$apply(attrs.whenScrolled)
                }
            }
            angular.element(ctrl.$window).bind('scroll load', checkBounds)
            $scope.$on('$destroy', function() {
                angular.element(ctrl.$window).unbind('scroll load')
            })

        }
    }

    whenScrolledController.$inject = ["$scope", "$window"];

    function whenScrolledController($scope, $window) {

        var vm = this
        vm.$window = $window

    }

})();

BetabrandApp.controller('DivvyController', ['$scope', '$timeout', function($scope, $timeout) {
    $timeout(function() {
        $scope.$emit('viewLoaded')
    }, 1000);
}]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbHoverCard", bbHoverCard);

    function bbHoverCard() {
        var directive = {
            restrict: "EA",
            scope: true,
            // data
            transclude: true,
            templateUrl: "/angular/app/follow/hovercard.html",
            link: linkFunc,
            controller: HovercardController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            // console.log('$scope, el, attr, ctrl', $scope, el, attr, ctrl);
            ctrl.CustomerService.getHover(attr.matchinguser).then(function(response) {

                response.data.designedProducts = typeof response.data.designedProducts !== 'undefined' ? response.data.designedProducts : 0;
                response.data.submissions = typeof response.data.submissions !== 'undefined' ? response.data.submissions : 0;

                response.data.counts = {
                    designedProducts: response.data.designedProductsCount,
                    submissions: response.data.submissionsCount,
                    followers_count: response.data.connections.followers_count,
                    following_count: response.data.connections.following_count
                }

                $scope.profile = response.data;
                // Reveal hidden hovercard wrapper.
                el[0].parentElement.classList.remove('hidden');
            })

            var destroyTooltip = function() {
                var matchingHalf = document.getElementsByClassName('bb-hovercard');
                if (matchingHalf[0]) {
                    matchingHalf[0].parentNode.removeChild(matchingHalf[0]);
                }
            }

            el.bind('click', function(e) {
                if (e.target.nodeName.toLowerCase() == 'a') {
                    // Remove hovercard when changing pages from that card's link.
                    destroyTooltip();
                }
            });

            ctrl.$document.on('scroll', function() {
                destroyTooltip();
            });

        }
    }

    HovercardController.$inject = ['$scope', '$document', 'CustomerService'];

    function HovercardController($scope, $document, CustomerService) {
        var vm = this;
        vm.$scope = $scope;
        vm.$document = $document;
        vm.CustomerService = CustomerService;
    }


})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive('profilecard', profilecard);

    function profilecard() {
        var directive = {
            restrict: 'E',
            replace: true,
            templateUrl: '/angular/app/follow/profileCard.html',
            scope: {
                profile: "=" //can be id or full profile object
            },
            transclude: true,
            link: linkFunc,
            controller: ProfilecardController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };

        return directive;

        function linkFunc(scope, el, attr, ctrl) {

            // Reassign these to their correct names in this context.
            var vm = this,
                h = ctrl.$window.innerHeight,
                w = ctrl.$window.innerWidth;

            var kickStart = function(e) {

                ctrl.$timeout(function() {
                    var matchingHalf = document.getElementsByClassName('hovercard-' + scope.profile.id),
                        currentPoint = document.elementFromPoint(e.clientX, e.clientY);
                    // Checks to see if there is still a hovercard.
                    if ((typeof el[0] !== "undefined") && (typeof matchingHalf[0] !== "undefined")) {
                        if ((el[0].contains(currentPoint)) || (matchingHalf[0].contains(currentPoint))) {
                            kickStart(e);
                        } else {
                            // If you're hovering on something that isn't the card, and isn't the user, remove the card.
                            while (matchingHalf.length > 0) {
                                matchingHalf[0].parentNode.removeChild(matchingHalf[0]);
                            }
                        }
                    }
                }, 100);
            };

            function paintHovercard(e) {
                var avatar = e.target.closest('.avatar');

                // profile-hero is a context we want to exclude.  This is the context used on the Profile page.
                if (avatar !== null && (scope.context !== 'profile-hero')) {
                    var innerCard,
                        rolloverScope = scope.$new(false),
                        avdist = { top: avatar.offsetTop, av: avatar.offsetLeft, padding: 20 },
                        hoverDiv = document.createElement('div'),
                        hoverInner = document.createElement('div');

                    var y = (avatar.getClientRects()[0].top) + "px"; // 184 is the height of the card.
                    // Uses the middle point of the avatar.
                    var x = avatar.getClientRects()[0].left + (avatar.clientWidth / 2) + "px";

                    // Position template according to the coordinates of the element.  Element set 'hidden' until callback.
                    hoverInner.setAttribute('class', 'hovercard hovercard--top hovercard--user hidden');
                    hoverDiv.setAttribute('class', 'bb-hovercard pre-hovered hovercard-' + scope.profile.id);
                    hoverDiv.setAttribute('data-user-id', scope.profile.id);
                    hoverDiv.setAttribute('style', 'top: ' + y + '; left: ' + x + ';');

                    rolloverScope.data = scope.profile; // Capture user data to inject into the bb-profile-card directive.
                    innerCard = ctrl.$compile('<bb-hover-card variety="vertical" show-meta user="data" matchinguser="' + scope.profile.id + '"></bb-hover-card>')(rolloverScope);

                    hoverInner.appendChild(innerCard[0]); // Add compiled directive to the inner wrapper.
                    hoverDiv.appendChild(hoverInner); // Add wrapped directive into HoverDiv before attaching it to the body.
                    hoverDiv.addEventListener("mouseout", function(e) { kickStart(e); }); // Reset Kickstart function with mouseout event.
                    document.body.appendChild(hoverDiv); // Finally append to body.

                    ctrl.$timeout(function() {
                        if (document.getElementsByClassName('hovercard-' + scope.profile.id).length > 0) {
                            document.getElementsByClassName('hovercard-' + scope.profile.id)[0].setAttribute('class', 'bb-hovercard hovercard-' + attr.version + ' hovercard-' + scope.profile.id);
                        }
                    }, 0);

                }
            }

            el.bind('mouseover', function(e) {
                paintHovercard(e);
            });

            el.bind('mouseout', function(e) {
                if (scope.profile) {
                    var matchingHalf = document.getElementsByClassName('hovercard-' + scope.profile.id),
                        currentPoint = document.elementFromPoint(e.clientX, e.clientY);
                    kickStart(e);
                }
            });

            el.bind('click', function(e) {
                if (Modernizr.touch) {
                    e.preventDefault();
                    paintHovercard(e);
                }
                kickStart(e);
            });

            ctrl.$window.addEventListener('touchmove', function(e) {
                kickStart(e);
            }, false);


            var CustomerService = ctrl.CustomerService,
                ProductService = ctrl.ProductService,
                TrackingService = ctrl.TrackingService,
                ConnectionsService = ctrl.ConnectionsService,
                NotificationsService = ctrl.NotificationsService,
                $routeParams = ctrl.$routeParams,
                ImageService = ctrl.ImageService,
                _ = ctrl._,
                $q = ctrl.$q;

            var context = attr.context || "default"
            var variety = attr.variety || "default"
            var version = attr.version || "default"
            var size = attr.size || "medium"
            var alignment = attr.alignment || "left"
            var designer = attr.designer === "true" ? true : false
            var button = attr.button || true
            scope.alignment = alignment;
            scope.variety = variety;
            scope.version = version;
            scope.context = context; // Available contexts: portfolio, rollover, product
            scope.size = size;
            scope.designer = Boolean(designer)
            scope.button = button;
            scope.connections = {};
            scope.isFollowing = false;
            scope.me = {}; // Filled during the CustomerService.getData

            scope._profileInitialized = false
            scope.loading = true;

            scope._init = function() {
                CustomerService.getData().then(function(response) {
                    scope.me = response
                    scope.loading = false;
                    if (!scope._profileInitialized) {
                        scope._initProfile()
                    }
                })
            }

            scope._initProfile = function() {

                var promises = {}

                //scope.profile can be a full profile object or a profileID
                var profileIdExists = (typeof ctrl.profile == "string" || typeof ctrl.profile == "number");

                if (profileIdExists) {
                    promises.profile = CustomerService.getAccount(ctrl.profile)
                } else {
                    scope.profile = ctrl.profile
                }

                promises.customer = CustomerService.getData()

                $q.all(promises).then(function(response) {
                    if ('profile' in response) {
                        scope.profile = response.profile.data
                    }

                    //clean up url nastiness (some profiles STILL have no id, UGH!!!!)
                    scope.profile.url = !scope.profile.id ? "#" : "/u/" + (scope.profile.urlKey || scope.profile.id)
                    if (typeof scope.profile.avatar !== 'undefined') {
                        scope.profile.image = scope.profile.avatar
                    }
                    scope.profile.image = scope.profile.image ? scope.profile.image : '/angular/images/user/user.png'

                    scope.me = response.customer
                        //check to see if current logged in user is following this user
                    if (scope.me.id) {
                        ConnectionsService.doesConnectionExist(scope.me.id, scope.profile.id, 'followed').then(function(response) {
                            scope.isFollowing = response;
                        })
                    }

                })

            }

            //initialize directive
            scope._init()

            //reinit page on log in and out
            scope.$on('loggedIn', function(response) {
                scope.loading = true;
                scope._init()
            })

            scope.$on('loggedOut', function(response) {
                scope.loading = true;
                scope.isFollowing = false;
                scope._init()
            })

            var _follow = function(userId, targetUserId) {
                return ConnectionsService.createConnection(userId, targetUserId, 'followed').then(function() {
                        TrackingService.trackEvent('Participate', { 'Participation Type': 'Follow', 'Context': context })
                    },
                    function() {})
            }

            var _unfollow = function(userId, targetUserId) {
                return ConnectionsService.removeConnection(userId, targetUserId, 'followed').then(function() {
                    TrackingService.trackEvent('Participate', { 'Participation Type': 'Unfollow', 'Context': context })
                })
            }


            scope.shardUrl = function(url) {
                return ImageService.formatImgSrc(url)
            }

            scope.toggleFollow = function() {
                // console.log('toggleFollow', this);
                var action,
                    followResult;

                if (!scope.isFollowing) {
                    action = _follow
                    followResult = true
                } else {
                    action = _unfollow
                    followResult = false
                }

                if (!scope.me.loggedIn) {
                    CustomerService.showLoginModal({ "action": "follow" }).then(function() {
                        //need to make sure the customer data is updated
                        CustomerService.getData().then(function(response) {
                            scope.me = response
                                //if we've successfully logged in, then create the follow
                            if (scope.me.id) {
                                action(scope.me.id, ctrl.profile.id).then(function(response) {
                                    scope.isFollowing = followResult;
                                }, function(error) {

                                    NotificationsService.addNotification({
                                        message: error.data,
                                        type: "error"
                                    })

                                })
                            }
                        })
                    })
                } else {
                    action(scope.me.id, ctrl.profile.id).then(function(response) {
                        scope.isFollowing = followResult;
                    }, function(error) {
                        NotificationsService.addNotification({
                            message: error.data,
                            type: "error"
                        })

                    })
                }

            }

            scope.$watchCollection("vm.profile", function(current, original) {
                if (current !== original) {
                    scope._init()
                }
            })

        }
    }


    ProfilecardController.$inject = ['$scope', '$routeParams', 'ImageService', 'CustomerService', 'ProductService', 'TrackingService', 'ConnectionsService', '_', 'NotificationsService', '$q', '$window', '$timeout', '$compile'];

    function ProfilecardController($scope, $routeParams, ImageService, CustomerService, ProductService, TrackingService, ConnectionsService, _, NotificationsService, $q, $window, $timeout, $compile) {
        var vm = this;
        vm.$routeParams = $routeParams;
        vm.ImageService = ImageService;
        vm.CustomerService = CustomerService;
        vm.ProductService = ProductService;
        vm.TrackingService = TrackingService;
        vm.ConnectionsService = ConnectionsService;
        vm.NotificationsService = NotificationsService;
        vm._ = _;
        vm.$q = $q;
        vm.$window = $window;
        vm.$timeout = $timeout;
        vm.$compile = $compile;
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbFollowButton", bbFollowButton);

    function bbFollowButton() {
        var directive = {
            restrict: "EA",
            scope: true,
            transclude: true,
            templateUrl: "/angular/app/follow-button/follow-button.html",
            link: linkFunc
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            if ($scope.CustomerService) {
                $scope.me = $scope.CustomerService.data;
            }
        }
    }

})();

BetabrandApp.factory('FooterService', ['$http', '$q', '$location',
    function($http, $q, $location) {

        function FooterService() {

            var self = this

            self.getStoreHours = function() {
                var deferred = $q.defer()
                var self = this

                $http({
                        method: "get",
                        url: '/api/rest/cms/block/identifier/store_hours',
                        cache: true
                    })
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })

                return deferred.promise
            }
        }

        return new FooterService()
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbSiteFooter", bbSiteFooter);

    function bbSiteFooter() {
        var directive = {
            restrict: "E",
            scope: {},
            transclude: true,
            templateUrl: "/angular/app/footer/footer.html",
            link: linkFunc,
            controller: bbSiteFooterController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    bbSiteFooterController.$inject = ["$scope", "NewsletterService", "$timeout"];

    function bbSiteFooterController($scope, NewsletterService, $timeout) {

        var vm = this;
        vm.email = null
        vm.isSubmitting = false
        vm.currentYear = new Date().getFullYear()

        vm.submitEmail = function(email) {
            var data = {
                email: email,
                source: 'Footer Signups',
                incentivized: false
            }

            vm.isSubmitting = true

            NewsletterService.signup(data).then(
                function(response) {
                    vm.isSubmitting = false
                    vm.successMessage = "Thank you for signing up!"
                    vm.email = null

                    $timeout(function() {
                        vm.successMessage = false
                    }, 4000);
                },
                function(error) {
                    vm.isSubmitting = false
                    vm.errorMessage = error.messages.error[0].message
                    $timeout(function() {
                        vm.errorMessage = false
                    }, 4000);
                })
        }


    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('addressForm'.addressForm);

    function addressForm() {
        var directive = {
            restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
            scope: {
                model: "=modelName",
                formName: "@",
                mode: "=mode",
                loggedIn: "=",
                submitMethod: "&",
                deleteMethod: "&",
                shippingAddressIsSaved: "=?",
                cancelMethod: "&?",
                accountAddress: "@?",
                showErrors: "=?",
                useForBilling: "="
            },
            templateUrl: '/angular/app/forms/address-form.html',
            link: linkFunc,
            controller: addressFormController,
            controllerAs: 'vm',
            bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            scope.vm.getRegions();
        }
    }

    addressFormController.$inject = ['$scope', '$http', '_', 'AddressFormService'];

    function addressFormController($scope, $http, _, AddressFormService) {
        var vm = this;

        vm.regions = {};
        vm.subRegions = false;
        vm.modelBackup = {};

        if (!vm.mode) {
            vm.mode = "default";
        } else {
            vm.initialState = vm.mode;
        }

        vm.submit = function() {
            if (vm[vm.formName].$valid) {
                vm.submitMethod();

                vm.mode = "preview";
                vm[vm.formName].$submitted = false;
            }
        };

        vm.edit = function() {
            //store current state of model data in case user hits cancel
            vm.modelBackup = {};
            vm.shippingAddressIsSaved = false;
            //makes a copy of the vm.model object
            _.extend(vm.modelBackup, vm.model);
            vm.updateSubregions();
            vm.mode = "edit";
        };

        vm.delete = function() {
            if (typeof vm.deleteMethod == "function") {
                vm.deleteMethod();
            }
            vm.model.hide = true;
        };

        vm.cancel = function($event) {
            //we need to restore the model data from the backup
            vm.model = {};
            _.extend(vm.model, vm.modelBackup);
            vm.mode = "preview";
            vm.shippingAddressIsSaved = true;
            vm.cancelMethod();
            $event.preventDefault();
        };

        vm.getRegions = function() {
            return $http({
                method: "GET",
                url: "/api/rest/sealthedeal/regions/list/"
            }).success(function(data) {
                vm.regions = data.regions;
                vm.updateSubregions();
            }).error(function(data) {

            });
        };

        vm.updateSubregions = function() {
            if (!vm.model) {
                return;
            }

            var country;

            if (vm.model && vm.model.country) {
                country = _.find(vm.regions, { country_id: vm.model.country });
            }

            if (country && country.regions.length > 0) {
                vm.subRegions = country.regions;
                vm.model.hasSubRegions = true;
            } else {
                vm.subRegions = false;
                vm.model.hasSubRegions = false;
            }
        };

        vm.updateRegion = function(regionId) {
            if (vm.subRegions[regionId - 1]) {
                vm.model.region = vm.subRegions[regionId - 1].name;
            } else {
                vm.model.region = null;
            }
        };

        vm.checkPostalCode = function() {
            if (vm.model.country !== "US") {
                return;
            }

            AddressFormService.getGeocode(vm.model['postal-code']).then(function(data) {
                if (data.locality) {
                    vm.model['locality'] = data.locality;
                }
                if (data.state) {
                    var region = _.filter(vm.subRegions, { "name": data.state })[0];
                    region.selected = true;
                    vm.model.region_id = region.region_id;
                }
            });
        };

        vm.$watch('model', function(model) {
            if (model !== undefined && vm.model && !vm.model.country) {
                vm.model.country = "US";
            }
            if (model !== undefined && vm.model && vm.model.region_id) {
                vm.model.region_id = parseInt(vm.model.region_id);
            }

            vm.updateSubregions();
        });
    }
})();

BetabrandApp.factory('AddressFormService', ['$http', '$q', '_',
    function AddressFormService($http, $q, _) {

        return {

            getGeocode: function(postalCode) {
                var deferred = $q.defer()
                var self = this
                var request = $http({
                    method: "GET",
                    url: "https://maps.googleapis.com/maps/api/geocode/json?address=" + postalCode
                }).success(function(data) {
                    var retData = {}
                    angular.forEach(data.results, function(result, index) {
                        retData.country = _.filter(result.address_components, { "types": ["country", "political"] })[0].long_name
                        retData.state = _.filter(result.address_components, { "types": ["administrative_area_level_1", "political"] })[0].long_name
                        retData.locality = _.filter(result.address_components, { "types": ["locality", "political"] })[0].long_name
                        retData.region = _.filter(result.address_components, { "types": ["administrative_area_level_2", "political"] })[0].long_name;
                    })
                    deferred.resolve(retData)
                }).error(function(data) {
                    deferred.reject(data)
                })

                return deferred.promise
            }



        }

    }
]);

BetabrandApp.directive('checkoutAddressForm', ["$http", "_", "AddressFormService",
    function($http, _, AddressFormService) {
        // Runs during compile
        return {
            // name: '',
            // priority: 1,
            // terminal: true,
            scope: {
                model: "=modelName",
                formName: "@",
                mode: "=mode",
                showErrors: "=?",
                shippingAddressIsSaved: "=shippingAddressIsSaved"
            }, // {} = isolate, true = child, false/undefined = no change
            // controller: function($scope, $element, $attrs, $transclude) {},
            // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
            restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
            templateUrl: '/angular/app/forms/checkout-address-form.html',
            // templateUrl: '',
            // replace: true,
            // transclude: true,
            // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
            link: function(scope, iElm, iAttrs, controller) {

                scope.regions = {}
                scope.subRegions = false
                scope.modelBackup = {}

                if (!scope.mode) {
                    scope.mode = "default"
                } else {
                    scope.initialState = scope.mode
                }

                scope.edit = function() {
                    scope.mode = "edit"
                    scope.shippingAddressIsSaved = false
                        //Fixes a bug where editing a saved address can sometimes have an id associated with it
                        //the back end prioritizes saved address id over new address data
                        //delete the id here if the address is being edited.
                    delete scope.model.id
                }

                scope.updateSubregions = function() {

                    if (!scope.model)
                        return

                    var country

                    if (scope.model && scope.model.country) {
                        country = _.find(scope.regions, { country_id: scope.model.country })
                    }

                    if (country && country.regions.length > 0) {
                        scope.subRegions = country.regions
                        scope.model.hasSubRegions = true
                    } else {
                        scope.subRegions = false
                        scope.model.hasSubRegions = false
                    }
                }

                scope.updateRegion = function(regionId) {
                    if (scope.subRegions[regionId - 1]) {
                        scope.model.region = scope.subRegions[regionId - 1].name
                    } else {
                        scope.model.region = null
                    }
                }

                scope.checkPostalCode = function() {
                    if (scope.model.country !== "US")
                        return

                    AddressFormService.getGeocode(scope.model['postal-code']).then(function(data) {
                        if (data.locality)
                            scope.model['locality'] = data.locality
                        if (data.state) {
                            var region = _.filter(scope.subRegions, { "name": data.state })[0]
                            region.selected = true
                            scope.model.region_id = region.region_id
                        }
                    });
                }

                $http({
                    method: "GET",
                    url: "/api/rest/sealthedeal/regions/list/"
                }).success(function(data) {
                    scope.regions = data.regions
                    scope.updateSubregions()
                }).error(function(data) {

                })

                scope.$watch('model', function(model) {
                    if (model !== undefined && scope.model && !scope.model.country) {
                        scope.model.country = "US"
                    }
                    if (model !== undefined && scope.model && scope.model.region_id) {
                        scope.model.region_id = parseInt(scope.model.region_id)
                    }

                    scope.updateSubregions()
                })
            }
        }
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("freeUndiesBuyBar", freeUndiesBuyBar);

    function freeUndiesBuyBar() {
        var directive = {
            restrict: "E",
            replace: true,
            scope: {},
            transclude: true,
            templateUrl: "/angular/app/free-undies/free-undies-buy-bar.html",
            link: linkFunc,
            controller: freeUndiesBuyBarController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    freeUndiesBuyBarController.$inject = ["$scope", "ProductService"];

    function freeUndiesBuyBarController($scope, ProductService) {

        var vm = this;

        //Grab product data for betabrand t-shirt (id: 6153)
        ProductService.getProduct(6153).then(function(shirt) {
            vm.shirt = shirt;
        })

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("freeUndiesPromoLink", freeUndiesPromoLink);

    function freeUndiesPromoLink() {
        var directive = {
            restrict: "EA",
            replace: false,
            scope: {
                product: "="
            },
            transclude: true,
            template: "<a href='{{vm.promo.url}}' ng-if='vm.promo.url'><i class='betabrand-tees'></i> {{vm.promo.text}}</a>",
            link: linkFunc,
            controller: freeUndiesPromoLinkController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    freeUndiesPromoLinkController.$inject = ["$scope", "ProductService", 'OptimizelyService'];

    function freeUndiesPromoLinkController($scope, ProductService, OptimizelyService) {

        var vm = this;
        vm.promo = {};
        vm.product = vm.product || null;

        //show different text if you're on tshirt or pants page
        if (vm.product.categoryUrlMap[72]) {
            vm.promo.text = "Get this free with any pair of men's pants.";
            vm.promo.url = "mens/pants.html";
        } else {
            vm.promo.text = "Free t-shirt when you buy any men's pants";
            vm.promo.url = "/mens/tees.html";
        }

    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('gallery', gallery);

    function gallery() {
        var directive = {
            link: link,
            restrict: 'E',
            scope: {
                product: '='
            },
            replace: true,
            templateUrl: "/angular/app/gallery/gallery.html",
            controller: galleryController
        };
        return directive;

        function link(scope, elm, attrs, ctrl) {

            scope.optimizely = angular.optimizely
            scope.currentIndex = 0
            scope.lastSlide = false

            scope.myTransform = ""

            ctrl.hotkeys.bindTo(scope)
                .add({
                    combo: 'command+i',
                    description: 'Open Images Modal',
                    callback: function() {
                        scope.openGalleryModal()
                    }
                })

            scope.openGalleryModal = function() {
                ctrl.ModalService.showModal({
                    templateUrl: "/angular/app/gallery/gallery-modal.html",
                    controller: "GalleryModalController as vm",
                    inputs: { media: scope.galleryMedia }
                }).then(function(modal) {
                    modal.close.then(function(result) {})
                })

            }

            // If product has multiple colors, this will bring gallery index back to the beginning
            scope.$watchCollection('product.media.gallery', function(newVal, oldVal) {
                if (oldVal !== newVal) {
                    scope.loadMedia()
                }
            })

            scope.loadMedia = function() {
                var gm = ctrl._.filter(angular.copy(scope.product.media.gallery), function(media) {
                    return media.type == 'image' || media.videoType == 'gallery' || media.type == 'mc'
                })

                ctrl._.each(gm, function(img) {
                    if (img.type == 'mc')
                        img.photo.image = img.photo.image.replace('.local.betabrand.io:32769', '.com')

                })

                scope.galleryMedia = gm

                scope.formatImages = ctrl.ImageService.lazyFormatSrc
            }

            // Syncs clicked thumbnail with main gallery.
            scope.syncPhoto = function(index) {
                pauseVideo()
            }

            function pauseVideo() {
                var current = scope.galleryMedia[scope.currentIndex]
                if (current && current.type == 'video') {
                    current.play = false
                }
            }

            scope.$on("$destroy", function() {
                angular.element(ctrl.$window).unbind('resize')
            })

            scope.isInView = function(inview, inviewpart, index, media, total) {
                if (inview && (inviewpart == "bottom" || inviewpart == "top") && !media.tracked) {
                    media.tracked = true
                    ctrl.TrackingService.trackEvent('Image Impression', {
                        "Index": index,
                        "Max Index": total - 1,
                        "URL": media.url
                    })
                }
            }

            scope.loadMedia()

            // attrs.$set('class', 'widget-head');
        }
    }

    galleryController.$inject = ['$scope', '$window', 'hotkeys', '_', 'TrackingService', 'ImageService', '$timeout', 'OptimizelyService', 'ModalService', 'CustomerService'];

    function galleryController($scope, $window, hotkeys, _, TrackingService, ImageService, $timeout, OptimizelyService, ModalService, CustomerService) {
        var vm = this;
        vm.$window = $window;
        vm.hotkeys = hotkeys;
        vm._ = _;
        vm.TrackingService = TrackingService;
        vm.ImageService = ImageService;
        vm.CustomerService = CustomerService;
        vm.$timeout = $timeout;
        vm.OptimizelyService = OptimizelyService;
        vm.ModalService = ModalService;
        vm.commentHighlights = {};
    }

})();

// This is for internal use. Web prod needs to be able to drag images to the desktop

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller('GalleryModalController', GalleryModalController);

    GalleryModalController.$inject = ['$scope', '$timeout', 'close', 'media', 'hotkeys'];

    function GalleryModalController($scope, $timeout, close, media, hotkeys) {
        var vm = this
        vm.display = true
        vm.closing = false
        vm.media = media

        vm.close = function() {
            vm.closing = true;
            $timeout(function() {
                vm.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Cart',
                callback: function() {
                    vm.close()
                }
            });
    }
})();

BetabrandApp.directive('fireCart', ['CartService', '$rootScope', '$interval', '$timeout',
    function(CartService, $rootScope, $interval, $timeout) {
        return {
            restrict: 'E',
            templateUrl: '/angular/app/header/fire-cart.html',
            replace: true,
            scope: {

            },

            link: function(scope, $document) {
                scope.cart = CartService
                scope.fireCartFlames = CartService.fireCartFlames
                scope.fireCartChug = CartService.fireCartChug
                scope.fireCartDrive = CartService.fireCartDrive

                scope.doChug = function() {


                    //if cart is empty bail out and try again in 5 seconds
                    if (scope.fireCartFlames.activated || !scope.cart || !scope.cart.data || !scope.cart.data.items || scope.cart.data.items.length == 0) {
                        $timeout(scope.doChug, 5000)
                        return
                    }


                    //start chugging
                    scope.fireCartChug.activated = true

                    //stop chugging after 1.5 seconds
                    $timeout(function() {
                        scope.fireCartChug.activated = false

                        //start chugging again in 10-15 seconds
                        var seconds = Math.random() * 5
                        $timeout(scope.doChug, Math.floor((10 + seconds) * 1000))

                    }, 5000);
                }

                //start the chug fest
                // scope.doChug()
            }
        }
    }
]);

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .directive("siteNav", siteNav);

    function siteNav() {
        var directive = {
            restrict: "E",
            scope: true,
            templateUrl: "/angular/app/header/site-nav.html",
            link: linkFunc,
            controller: siteNavController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            ctrl.init()
        }
    }

    siteNavController.$inject = ["$scope", "_", "$q", "ModalService", "$rootScope", "SiteNavService", "CustomerService", "ReferralsService", "CartService", "ConfigService", "hotkeys", "$window", "ImageService", "$location", "PageService", "OptimizelyService"];

    function siteNavController($scope, _, $q, ModalService, $rootScope, SiteNavService, CustomerService, ReferralsService, CartService, ConfigService, hotkeys, $window, ImageService, $location, PageService, OptimizelyService) {

        var vm = this

        vm._ = _
        vm.CustomerService = CustomerService
        vm.$rootScope = $rootScope
        vm.CartService = CartService
        vm.SiteNavService = SiteNavService
        vm.formattedThumbnails = ImageService.lazyFormatSrc
        vm.PageService = PageService

        vm.init = function() {
            SiteNavService.init().then(function(response) {
                vm.menuProducts = response.categoryProducts[0]
                vm.bannerMessageLoggedIn = response.bannerMessageLoggedIn
                vm.bannerMessageLoggedOut = response.bannerMessageLoggedOut
            })

            hotkeys.bindTo($scope)
                .add({
                    combo: '/',
                    description: 'Focus on Search',
                    callback: function(event) {
                        event.preventDefault();
                        document.getElementById("search-query").focus();
                        document.getElementById("search-query").value = '';
                        document.getElementById("search-query").setSelectionRange(0, 9999);
                    }
                })

            $rootScope.$on("$locationChangeStart", function() {
                vm.PageService.showMobileMenu = false
                vm.setUpMenus()
            })

            $rootScope.$on("$routeChangeSuccess", function() {
                vm.PageService.showMobileMenu = false
                vm.setUpMenus()
            })

        }


        vm.menus = {
            "mens": { "active": false },
            "womens": { "active": false },
            "thinktank": { "active": false },
            "user": { "active": false }
        }

        vm.toggleMobileMenu = function() {
            vm.PageService.showMobileMenu = !vm.PageService.showMobileMenu
            CartService.showCart = false
        }

        vm.toggleCart = function() {
            vm.PageService.showMobileMenu = false
            CartService.showCart = !CartService.showCart
            if (CartService.showCart) {
                document.getElementById("cart").getElementsByClassName("cart__header")[0].focus();
            }
        }

        vm.toggleMenu = _.debounce(function(name, active) {
            vm.setUpMenus()
            vm.menus[name].active = active
            $scope.$digest()
        }, 200)

        vm.setUpMenus = function() {
            angular.forEach(vm.menus, function(menu, key) {
                menu.active = false
            })
        }

        vm.closeMenus = function() {
            var allMenus = document.getElementById("site-nav").getElementsByClassName("main-nav__hover");
            var openElements = document.getElementById("site-nav").getElementsByClassName("active");
            if (openElements.length > 0) {
                var menuLabel = openElements[0].getAttribute('menu-label');
                openElements[0].focus();
                _.each(allMenus, function(menuItem) {
                    menuItem.classList.remove("active");
                });
                $scope.vm.menus[menuLabel].active = !$scope.vm.menus[menuLabel].active;
            }
        }

        vm.showBenefitsModal = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/account-benefits/benefits-modal.html",
                controller: "BenefitsModalController as vm",
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        vm.showReferralModal = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/referrals/referral-modal.html",
                controller: "ReferralModalController",
                inputs: {
                    productId: null,
                    productName: ""
                }
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        vm.showLoginModal = function() {
            vm.CustomerService.showLoginModal().then(function(success) {
                if (!success)
                    return;

                ModalService.showModal({
                    templateUrl: "/angular/app/modal/referrals/referral-modal.html",
                    controller: "ReferralModalController",
                    inputs: {
                        productId: null,
                        productName: ""
                    }
                }).then(function(modal) {
                    modal.close.then(function(result) {})
                })
            })
        }


    }

    function siteNavButton() {
        var directive = {
            restrict: "A",
            link: linkFunc,
            controller: siteNavController
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            var menuLabel = attr.menuLabel

            el.bind("click", function(e) {

                if (ctrl.$rootScope.isMobile) {
                    // Allows links to act as toggles on mobile menu.
                    e.preventDefault();
                }

                angular.forEach($scope.vm.menus, function(menu, key) {
                    if (key !== menuLabel)
                        menu.active = false
                })
                $scope.vm.menus[menuLabel].active = !$scope.vm.menus[menuLabel].active
            })

            el.bind("keydown keypress", function(event) {

                if (event.which === 13) {

                    e.preventDefault();
                    angular.forEach($scope.vm.menus, function(menu, key) {
                        if (key !== menuLabel)
                            menu.active = false
                    })
                    $scope.vm.menus[menuLabel].active = !$scope.vm.menus[menuLabel].active

                }

                return true;

            });

        }
    }

    function siteNavHover() {
        var directive = {
            restrict: "A",
            link: linkFunc,
            controller: siteNavController
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            var menuLabel = attr.menuLabel
            var $rootScope = $scope.vm.$rootScope

            el.bind("mouseover", function(e) {
                if ($rootScope.isDesktop) {
                    $scope.vm.toggleMenu(menuLabel, true)
                    $scope.vm.siteNavIsActive = true
                }
            })
            el.bind("mouseout", function(e) {
                if ($rootScope.isDesktop) {
                    $scope.vm.toggleMenu(menuLabel, false)
                    $scope.vm.siteNavIsActive = false
                }
            })
        }
    }

    angular
        .module("BetabrandApp")
        .directive("siteNavButton", siteNavButton)
        .directive("siteNavHover", siteNavHover);



})();

BetabrandApp.factory('SiteNavService', ['$http', '$q', '$location',
    function($http, $q, $location) {

        function SiteNavService() {

            var self = this

            //  Returns a promise which gets the product data
            self.init = function(id) {
                var deferred = $q.defer()
                var self = this

                $http({
                        method: "get",
                        url: "/api/rest/header",
                        cache: true
                    })
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

        }

        return new SiteNavService()
    }
]);

(function() {

    "use strict";

    function config($routeProvider) {
        $routeProvider
            .when('/', {
                controller: 'HomepageController as vm',
                templateUrl: '/angular/app/homepage/homepage.html',
                title: 'Betabrand - Crowdsourced designs. Crowdfunded to life. New ideas, nonstop.',
                reloadOnSearch: false,
                resolve: HomepageController.resolve
            })
    }

    HomepageController.resolve = {
        init: _init,
        homepage: getHomepage,
        takeover: getModelCitizen
            //customerData: getCustomerData
    };

    function getHomepage(HomepageService) {
        return HomepageService.getHomepage();
    }

    function getModelCitizen(ModelCitizenService) {

        // Find model citizen id if there is one
        var m = window.location.search.match(/[\?|&]m=(\d+)/)

        if (m) {
            return ModelCitizenService.getModelCitizen(m[1])
        } else {
            return false
        }

    }

    //function getCustomerData(CustomerService) {
    //	return CustomerService.getData();
    //}

    function getCustomerProfile(customerId) {

    }

    function _init(CustomerService, ConnectionsService, $location, $q) {
        var defer = $q.defer(),
            resolve = {};
        CustomerService.getData().then(function(customerData) {
            //if customer is logged in, grab all data for drawing the stream view
            if (customerData.loggedIn) {
                ////if a feedId didn't come in as a query param, use the customers id
                if (!$location.search().feed) {
                    resolve.feedId = 'user_agg:' + customerData.id;
                }

                CustomerService.getProfile(customerData.id).then(function(response) {
                    resolve.profile = response.data;
                    resolve.profile.image = resolve.profile.image || "/angular/images/user/user.png";
                    resolve.profile.followerList = [];
                    resolve.profile.followingList = [];

                    ConnectionsService.getFollowers(CustomerService.data.id, "full").then(
                        function(data) {
                            resolve.profile.followingCount = data.following_count;
                            resolve.profile.followersCount = data.followers_count;
                            resolve.profile.followingList = data.following;
                            resolve.profile.followerList = data.followers;
                            defer.resolve(resolve);
                        },
                        function(data) {
                            defer.resolve(resolve);
                        }
                    );
                })
            } else { //customer not logged in, lets load category data for a normal homepage
                resolve.feedId = "group:3";
                defer.resolve(resolve);
            }
        });

        return defer.promise;
    }

    HomepageController.$inject = ["$scope", "$filter", "$q", "CategoryService", "ProductService", "CartService", "TrackingService", "LookupService", "_", "$window", "$timeout", "$location", "PageService", "$route", "OptimizelyService", "ModelCitizenService", "$rootScope", "HomepageService", "ModalService", "CustomerService", "ConnectionsService", "homepage", "init", "takeover"];

    function HomepageController($scope, $filter, $q, CategoryService, ProductService, CartService, TrackingService, LookupService, _, $window, $timeout, $location, PageService, $route, OptimizelyService, ModelCitizenService, $rootScope, HomepageService, ModalService, CustomerService, ConnectionsService, homepage, init, takeover) {
        var vm = this;
        vm._ = _;
        vm.CustomerService = CustomerService;
        vm.homepage = homepage.config.homepage;
        vm.saleEnabled = false;
        vm.carouselCount = 1;
        vm.showCarousel = true;
        vm.params = $location.search();
        vm.takeover = takeover

        var trackingDeferred = $q.defer();
        TrackingService.setTrackingPromise(trackingDeferred.promise);

        if (vm.takeover) {
            var trackingData = {};
            if (vm.takeover.type == "model") {
                trackingData.type = "ModelCitizen";
            } else {
                trackingData.type = "B-Glasses";
            }
            TrackingService.trackEvent("View Model Citizen Photo", trackingData);
        };

        _.each(vm.homepage.homepageSidebar, function(ad) {
            var extension = $location.absUrl().indexOf(".io") > 0 ? "" : "https://static1.betabrands.com"
            ad.image = extension + "/media/homepage/config/images/" + ad.image
        })

        vm.feed = {
            initialized: false
        };
        vm.feedEnabled = true;
        vm.showLogin = showLogin;
        // Set override feed params

        if (init.feedId) {
            vm.feedId = init.feedId;
        }

        if (init.profile) {
            vm.profile = init.profile;
        }

        if (vm.params.feed) {
            vm.feedId = vm.params.feed;
        }
        if (vm.params.feedEnabled) {
            vm.feedEnabled = true;
        }

        function showLogin() {
            CustomerService.showLoginModal({
                source: "home"
            })
        }

        function reInitializeHomepage() {
            _init(CustomerService, ConnectionsService, $location, $q).then(function(data) {
                vm.feedId = data.feedId;
                vm.profile = data.profile;
            })
        }

        $scope.$on("loggedIn", function(response) {
            reInitializeHomepage();
        });

        $scope.$on("loggedOut", function(response) {
            reInitializeHomepage();
        });

        $scope.$emit("viewLoaded");

        PageService.setBodyClass('home');

        // Page Tracking
        // ACHTUNG!: This is used to fire GTM events
        trackingDeferred.resolve({ "Source": "Homepage" })
    }

    angular
        .module("BetabrandApp")
        .controller("HomepageController", HomepageController)
        .config(config);


})();

BetabrandApp.factory('HomepageService', ['ConfigService', '$q',
    function HomepageService(ConfigService, $q) {
        return {
            getHomepage: function() {
                return ConfigService.getConfig(["homepage"])
            }
        }
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .config(config);

    function config($routeProvider) {
        $routeProvider
            .when('/insta/shirt', {
                controller: 'InstaDesignsController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/insta-designs/insta-designs.html',
                title: 'Betabrand - Insta-Shirt',
                resolve: {
                    tinyMce: function(initTinyMce) {
                        return initTinyMce()
                    },
                    garment: function() {
                        return 'shirt';
                    }
                }
            })
            .when('/insta/dress', {
                redirectTo: "/insta/shirt"
            })
    }

})();

angular
    .module('BetabrandApp')
    .controller('InstaDesignsController', InstaDesignsController);

InstaDesignsController.$inject = ['$scope', '$document', '$timeout', '$upload', '$q', '$log', '$http', 'CustomerService', 'TrackingService', 'ThinkTankService', 'CategoryService', 'ModalService', 'PageService', 'ProductService', '$routeParams', '_', '$window', '$location', '$kookies', 'NotificationsService', 'garment', 'AssetService']

function InstaDesignsController($scope, $document, $timeout, $upload, $q, $log, $http, CustomerService, TrackingService, ThinkTankService, CategoryService, ModalService, PageService, ProductService, $routeParams, _, $window, $location, $kookies, NotificationsService, garment, AssetService) {

    var vm = this


    if ($location.search().contest)
        $kookies.set('betabrand-contest', $location.search().contest, { expires: 14, path: '/' })

    var trackingDeferred = $q.defer()
    TrackingService.setTrackingPromise(trackingDeferred.promise)
    var trackingData = {
        'Source': "Submission Form - Insta-designs"
    }
    trackingDeferred.resolve(trackingData)

    // Resize action - for browser action.
    angular.element($window).bind('resize', function() {})

    // Placeholder variables.
    vm.saved_swatches_limit = 4;
    vm.repeatType = 'repeat';
    vm.scale = 0.5;
    vm.baseTemplate = garment || "shirt";
    vm.basehref = $window.location.href;

    // Need a default saved swatch group.  Save thse submissions for later in local storage.
    var saved_swatches = [];

    // Make the saved_swatches equal either the local storage object if it exists or this default test object.
    localStorage['saved_swatches'] = (typeof localStorage['saved_swatches'] == "undefined") ? JSON.stringify(saved_swatches) : localStorage['saved_swatches'];
    vm.saved_swatches = JSON.parse(localStorage.getItem("saved_swatches"));

    // Previous stub.
    vm.activeTab = 1
    vm.upperBound = 1

    // This can be canonical.  Other idea needs new swatch vars.
    vm.idea = {
        type: 'ideaForm',
        name: '', // title
        shortDescription: '',
        story: '', // long_description
        occasion: '',
        fabric: '',
        msrp: '',
        gender: '',
        additional: '',
        thumbnail: '',
        patternData: {

        },
        media: {
            preview: {
                image: "",
                offset: 0
            },
            images: [],
            video: [],
            links: []
        },
        isValid: false,
        swatchInfo: {
            width: '',
            height: '',
            scaledWidth: '',
            scaledHeight: '',
            scale: '',
            jpegUrl: ''
        }
    }

    vm.swatchPath = (typeof vm.idea.media.images[0] == "undefined") ? '/angular/images/logoCenter.png' : '' + vm.idea.media.images[0] + '';
    vm.swatchText = {
        'saveText': 'Save for Later',
        'saveTextConfirm': 'Saved!'
    }

    $scope.$watch(function() { return vm.idea.media.images[0] }, function() {
        if (typeof vm.idea.media.images[0] == "undefined") {
            vm.swatchPath = '/angular/images/patternlab-test.png';
        } else {
            vm.swatchPath = '' + vm.idea.media.images[0] + '';
        }

        vm.swatchInfo = {};
    });

    vm.resetPattern = function() {
        vm.idea = {
            type: 'ideaForm',
            name: '', // title
            shortDescription: '',
            story: '', // long_description
            occasion: '',
            fabric: '',
            msrp: '',
            gender: '',
            additional: '',
            thumbnail: '',
            patternData: {},
            media: {
                preview: {
                    image: "",
                    offset: 0
                },
                images: [],
                video: [],
                links: []
            },
            isValid: false,
            swatchInfo: {
                width: '',
                height: '',
                scaledWidth: '',
                scaledHeight: '',
                scale: '',
                jpegUrl: ''
            }
        }
        vm.coordData = {
            scale: 1,
            x: 0,
            y: 0,
            d: 5
        }
        vm.scale = 1;

        //OK here, too.
        vm.patternScale.value = "1";
        vm.draggableMask.x(0).y(0);
        vm.draggableMaskDoppelganger.x(0).y(0);
        vm.pattern.setAttribute('patternTransform', ' scale(1)');

        vm.form.style.backgroundImage = "none";
        vm.form.classList.remove('has-image');

        // OK here.  File reset. 
        var fileBox = document.getElementById('file');
        fileBox.value = '';
        vm.patternId.width = '400';
        vm.patternId.height = '400';
        vm.pattern.width = '400';
        vm.pattern.height = '400';
        vm.pattern2.width = '400';
        vm.pattern2.height = '400';

        // Reset the actual values.
        vm.patternImage.setAttribute("width", '400');
        vm.patternImage.setAttribute("height", '400');
        vm.patternImage.setAttribute("xlink:href", '');

        vm.patternImage2.setAttribute("width", '400');
        vm.patternImage2.setAttribute("height", '400');
        vm.patternImage2.setAttribute("xlink:href", '');

    };

    vm.setupCanvas = function() {
        var backgroundUrls = {
            'shirt': "/angular/images/knockout-shirt-alt.svg",
            'dress': "/angular/images/perfect-dress-v2.svg"
        }
        vm.baseTemplate = typeof vm.baseTemplate !== 'undefined' ? vm.baseTemplate : 'shirt';
    }


    vm.toggleBase = function(base, event) {
        event.preventDefault();
        vm.baseTemplate = base;
        vm.setupCanvas();
    };

    vm.changePattern = function(project) {
        // console.log(project);
        var image = new Image();
        image.src = project.swatch;

        image.onload = function() {
            var canvas,
                context,
                swatch64,
                defaultCoords;

            defaultCoords = { x: '0', y: '0', scale: '1', d: '5', offsetX: '0', offsetY: '0' };

            canvas = document.createElement('canvas');
            canvas.width = image.width;
            canvas.height = image.height;

            context = canvas.getContext('2d');
            context.scale(1, 1);
            context.drawImage(image, 0, 0);

            swatch64 = canvas.toDataURL('image/png');
            project.swatchInfo.coordData = typeof project.swatchInfo.coordData !== 'undefined' ? project.swatchInfo.coordData : defaultCoords;
            project.swatchInfo.coordData.offsetX = typeof project.swatchInfo.coordData.offsetX !== 'undefined' ? project.swatchInfo.coordData.offsetX : defaultCoords.offsetX;
            project.swatchInfo.coordData.offsetY = typeof project.swatchInfo.coordData.offsetY !== 'undefined' ? project.swatchInfo.coordData.offsetY : defaultCoords.offsetY;

            vm.pattern.setAttribute('patternTransform', ' scale(' + (project.swatchInfo.coordData.scale) + ')');
            vm.pattern.setAttribute("width", image.width);
            vm.pattern.setAttribute("height", image.height);

            vm.patternImage.setAttribute("width", image.width);
            vm.patternImage.setAttribute("height", image.height);

            vm.patternImage2.setAttribute("width", image.width);
            vm.patternImage2.setAttribute("height", image.height);

            vm.pattern2.setAttribute("width", image.width);
            vm.pattern2.setAttribute("height", image.height);

            // Need to base64 encode swatch to use it, first.

            vm.patternImage.setAttribute("xlink:href", swatch64);
            vm.patternImage2.setAttribute("xlink:href", swatch64);

            project.swatch = project.swatch;
            vm.form.style.backgroundImage = "url('" + project.swatch + "')";
            vm.form.classList.add('has-image');

            vm.idea.name = project.name;
            vm.idea.shortDescription = project.shortDescription;
            vm.idea.media.images[0] = '' + project.swatch + '';
            // vm.patternImage.setAttribute("xlink:href", project.swatch);
            vm.swatchPath = '' + project.swatch + '';
            vm.swatchInfo = project.swatchInfo;
            vm.scale = project.swatchInfo.scale;
            vm.repeatType = project.swatchInfo.repeatType;
            vm.baseTemplate = project.swatchInfo.baseTemplate;
            vm.draggableMask.x(project.swatchInfo.coordData.offsetX).y(project.swatchInfo.coordData.offsetY);
            vm.draggableMaskDoppelganger.x(project.swatchInfo.coordData.offsetX).y(project.swatchInfo.coordData.offsetY);
            $timeout(function() {
                vm.setupCanvas();
            }, 500);
        };

    };

    vm.removePattern = function(project) {
        var removedItemPosition = vm.saved_swatches.indexOf(project);
        vm.saved_swatches.splice(removedItemPosition, 1);
        localStorage['saved_swatches'] = JSON.stringify(vm.saved_swatches);
    };

    vm.saveSwatch = function() {
        setTimeout(function() {

            // console.log('saveToJPEG');
            var svg = document.getElementById("insta");
            var svgData = new XMLSerializer().serializeToString(svg);

            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");

            var img = new Image();
            img.setAttribute("src", "data:image/svg+xml;base64," + btoa(svgData));

            img.onload = function() {

                var canvas = document.createElement('canvas');
                canvas.width = img.width * 2;
                canvas.height = img.height * 2;

                var context = canvas.getContext('2d');
                context.scale(2, 2);
                context.drawImage(img, 0, 0);
                vm.jpegUrl = canvas.toDataURL('image/jpeg');

                setTimeout(function() {
                    // Just to give visibility.  Can recycle in queue.
                    var savedSwatch = {
                            name: vm.idea.name,
                            shortDescription: vm.idea.shortDescription,
                            swatch: vm.swatchPath,
                            swatchInfo: {
                                swatch: vm.swatchPath,
                                width: vm.swatchInfo.width,
                                height: vm.swatchInfo.height,
                                scaledWidth: vm.swatchInfo.scaledWidth,
                                scaledHeight: vm.swatchInfo.scaledHeight,
                                scale: vm.scale,
                                repeatType: vm.repeatType,
                                coordData: vm.coordData,
                                jpegUrl: vm.jpegUrl,
                                // jpegUrl: document.getElementById('canvas-preview').toDataURL("image/jpeg"),
                                baseTemplate: vm.baseTemplate
                            }
                        }
                        // Save and update local storage object with saved_swatches.
                    saved_swatches = JSON.parse(localStorage.getItem("saved_swatches"));
                    saved_swatches.unshift(savedSwatch);
                    localStorage['saved_swatches'] = JSON.stringify(saved_swatches);
                    vm.saved_swatches = JSON.parse(localStorage.getItem("saved_swatches"));
                }, 0);
            }
        }, 0);

        vm.swatchText.saveText = 'Saved!';
        $timeout(function() {
            vm.swatchText.saveText = 'Save for Later';
        }, 1200);
    }


    // Existing submission cruft.
    vm.submissionAttempted = false;
    vm.profileUpdating = false;
    vm.submissionId = $routeParams.id;
    vm.selectedImage = null;

    vm.refreshUserData = function() {
        CustomerService.getData().then(function(data) {
            $scope.customer = data;
        })
    }

    $scope.$on('bag-images.drop', function(e, el) {
        $timeout(function() {
            vm.idea.media.preview.image = vm.idea.media.images[0]
        }, 500);
    });

    $scope.$watch(function() { return CustomerService.getData() }, function() {
        vm.refreshUserData()
    });

    vm.filePreview = function(e) {
        $log.debug('run file preview', e)
    };

    vm.validateForm = function(e) {
        var loggedIn,
            hasBio;
        loggedIn = CustomerService.data.loggedIn;
        hasBio = CustomerService.data.designerBio && CustomerService.data.image;
        vm.submissionAttempted = true;
        $log.debug('validateForm', e);
        e.preventDefault();
        vm.submitted = true;
        $log.debug('$scope.submissionForm', $scope.submissionForm);
        $log.debug('Error $scope.submissionForm');
        $log.debug('CustomerService.data', CustomerService.data);
        if (!loggedIn) {
            vm.submitting = true;
            $log.debug('not logged in')
            CustomerService.showLoginModal({
                    source: "idea"
                })
                .then(function(loggedIn) {
                    // Post-login actions
                    // If you're logged in, but you don't yet have a designerBio or Image, trigger second section.
                    if (loggedIn) {
                        $log.debug('is loggedIn');
                        vm.refreshUserData();
                        _submitIdea();
                    } else {
                        $log.debug('is not loggedIn');
                        vm.submitting = false;
                    }
                }, function() {
                    vm.submitting = false;
                })
        } else {
            $log.debug('Logged in');
            $log.debug('Idea Submit: already logged in');
            vm.sendSubmission = true;
            _submitIdea();
        }
    }

    vm.errorMessage = false;
    vm.successMessage = false;

    vm.detectFilesChange = function(event, files) {
        var fileBox = document.getElementById('file');
        $scope.files = fileBox.files;
        vm.loadImageFileAsURL(fileBox.files);
        vm.swatchPath = '' + vm.idea.media.images[0] + '';
    }

    $scope.$watch(function() { return $scope.files }, function(current, original) {
        _uploadFiles($scope.files)
    })

    function _uploadFiles(files) {
        // $log.debug('_uploadFiles(files)', files)
        var deferred = $q.defer()

        if (files && files.length) {
            var count = 0;
            angular.forEach(files, function(file, index) {
                $upload.upload({
                    url: "/thinktank/index/submitimages/",
                    fields: {
                        'title': vm.ideaName,
                    },
                    file: file
                }).progress(function(evt) {
                    var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                    $log.debug('progress: ' + progressPercentage + '% ' + evt.config.file.name);
                }).success(function(data, status, headers, config) {
                    // console.log('successful upload');
                    // vm.idea.media.images[0] = '' + fileLoadedEvent.target.result + '';
                    $scope.filesUploaded = true;
                    $log.debug('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
                    count++;
                    vm.ideaMedia = vm.ideaMedia || {};
                    vm.idea.media.images = vm.idea.media.images || [];
                    vm.coverImageIndex = vm.coverImageIndex || 0;
                    vm.idea.media.images.push(data.url);
                    vm.idea.media.preview.image = vm.idea.media.images[vm.coverImageIndex];
                    if (count == files.length) {
                        $scope.files = null;
                        $scope.filesUploaded = false;
                        deferred.resolve(data)
                    }
                }).error(function(data) {
                    //add in which file it is
                    $log.debug(file)
                    if (data.message) {
                        data.message = data.message + " (" + file.name + ")"
                    }
                    deferred.reject(data)
                })
            })
        } else {
            deferred.resolve({
                "result": "no files"
            })
        }
        return deferred.promise;
    }

    vm.previewImage = function(index, event) {
        event.preventDefault()
        vm.coverImageIndex = index
        vm.idea.media.preview.image = vm.idea.media.images[vm.coverImageIndex]
            // reset position on change preview.
        angular.element(document.getElementById('cover-preview'))[0].style.marginTop = 0
    }


    vm.showSuccessModal = function() {
        // console.log('Show success modal here.');
        ModalService.showModal({
            templateUrl: "/angular/app/thinktank/submission/submission-success-modal-patternlab.html",
            controller: "SubmissionSuccessModalController"
        }).then(function(modal) {
            modal.close.then(function(result) {
                // Reset page to see if reset is causing blank submissions in rare cases.
                // Can't reproduce blank submission issue, as original or reset state, but there appears to be a cadence for prolific users.
                $window.location.reload();
                // vm.resetPattern();
                // vm.successMessageFinal = false;
                // window.scrollTo(0,0);
            })
        })
    };

    //pulls an idea from local storage if it hasn't been submitted yet
    function _loadStoredIdea() {
        if (!vm.submissionId && 'localStorage' in window && window['localStorage'] !== null) {
            if (localStorage['thinktankSubmissionName']) {
                vm.ideaName = localStorage['thinktankSubmissionName']
            }

            if (localStorage['thinktankSubmissionStory']) {
                vm.ideaStory = localStorage['thinktankSubmissionStory']
            }

            if (localStorage['thinktankShortDescription']) {
                vm.ideaShortDescription = localStorage['thinktankShortDescription']
            }

            if (localStorage['thinktankOccasion']) {
                vm.ideaOccasion = localStorage['thinktankOccasion']
            }

            if (localStorage['thinktankMsrp']) {
                vm.ideaMsrp = localStorage['thinktankMsrp']
            }

            if (localStorage['thinktankAdditional']) {
                vm.ideaAdditional = localStorage['thinktankAdditional']
            }

            if (localStorage['thinktankFabric']) {
                vm.ideaFabric = localStorage['thinktankFabric']
            }

            if (localStorage['thinktankMedia']) {
                vm.ideaMedia = null //localStorage['thinktankMedia']
                localStorage['thinktankMedia'] = null
            }

        } else if (vm.submissionId) {
            ThinkTankService.getDesign(vm.submissionId, vm.isVisible).then(function(response) {
                vm.ideaCustomerId = response.data.customerId
                vm.ideaName = response.data.name
                vm.ideaStory = response.data.story
                vm.ideaShortDescription = response.data.shortDescription
                vm.ideaOccasion = response.data.occasion
                vm.ideaMsrp = response.data.msrp
                vm.ideaAdditional = response.data.additional
                vm.ideaFabric = response.data.fabric
                vm.ideaGender = response.data.gender
                vm.ideaState = response.data.state
                vm.idea.media = response.data.media
                vm.idea.patternData = response.data.patternData

                if (typeof response.data.media.preview == "undefined") {
                    vm.idea.media.preview = { image: response.data.media.images[0] }
                }
            })
        }
    }

    _loadStoredIdea()

    function _clearStoredIdea() {
        if ('localStorage' in window && window['localStorage'] !== null) {
            localStorage.removeItem('thinktankSubmissionName')
            localStorage.removeItem('thinktankSubmissionStory')
            localStorage.removeItem('thinktankShortDescription')
            localStorage.removeItem('thinktankOccasion')
            localStorage.removeItem('thinktankAdditional')
            localStorage.removeItem('thinktankMsrp')
            localStorage.removeItem('thinktankFabric')
            localStorage.removeItem('thinktankMedia')
            localStorage.removeItem('ideaMedia')
            localStorage.removeItem('idea.media.images')
            localStorage.removeItem('coverImageIndex')
        }
    }

    //try to load a stored idea on form open
    vm.save = _.debounce(function(redirect) {
        var loggedIn = CustomerService.data.loggedIn
        vm.submitting = true

        //For final saves
        if (redirect && !loggedIn) {
            CustomerService.showLoginModal({
                    source: "idea"
                })
                .then(function(loggedIn) {
                    if (loggedIn) {
                        _submit().then(
                            function() {
                                _clearStoredIdea()
                                if (redirect) {
                                    $location.path("/account/submissions")
                                }
                            },
                            function() {

                            }
                        )
                    } else {
                        vm.submitting = false
                    }
                }, function() {
                    vm.submitting = false
                })
        } else {
            $log.debug('Idea Submit: already logged in')
            _submit().then(
                function() {
                    _clearStoredIdea()
                    if (redirect) {
                        $location.path("/account/submissions")
                    }
                    vm.submitting = false
                },
                function(data) {
                    if (data.status == 401) {

                        scope.vm.NotificationsService.addNotification({
                            message: "This submission can't be edited. If you've already submitted it, sit tight, we're reviewing it!",
                            type: "error"
                        })

                    }
                    vm.submitting = false
                }
            )
        }

        TrackingService.trackEvent('Participate', {
            'Participation Type': 'Save Design'
        })
    }, 1000);

    var _submitIdea = _.debounce(function() {
        $log.debug('_submitIdea')
            // _submitIdea doesn't run if the PHP doesn't have its expected contents.  Bad Request returns instead.
        var deferred = $q.defer()

        vm.errorMessage = false
        vm.isValid = true
        vm.submitting = true
        vm.sendSubmission = true

        _uploadFiles($scope.files).then(function(data) {
            // file upload success (or no files)
            if (data && data.result) {
                // console.log('First Step upload submit');
                $timeout(_submit, 2000)
                    .then(
                        function(data) {
                            // console.log('submit vm.swatch', vm.swatch);
                            // console.log('submit vm.swatchPath', vm.swatchPath);
                            // console.log('submit vm.swatchInfo', vm.swatchInfo);

                            // idea submit success
                            deferred.resolve(data)
                            _clearStoredIdea()
                            TrackingService.trackEvent('Participate', {
                                'Participation Type': 'Submit Design'
                            })

                            vm.submitting = false
                            vm.successMessage = true
                            vm.submitted = false


                            if (vm.sendSubmission) {
                                vm.successMessageFinal = true
                                vm.submissionAttempted = false
                            }

                            // These appear to be clearing and resetting the form, 
                            // which should happen after submission, but not on save.

                            vm.isValid = false
                            vm.ideaName = ""
                            vm.ideaStory = ""
                            vm.ideaShortDescription = ""
                            vm.ideaOccasion = ""
                            vm.ideaMsrp = ""
                            vm.ideaAdditional = ""
                            vm.ideaSuggestedFabric = ""
                            vm.ideaSubmissionId = ""
                            vm.submissionForm.$setPristine()
                            vm.submissionForm.$setUntouched()
                        },
                        function(data) {
                            // idea submit error
                            deferred.reject(data)
                            vm.submitting = false
                        }
                    )
            }
        }, function(data) {
            // file upload error
            deferred.reject(data)
            vm.submitting = false
            vm.errorMessage = data.message
        })

        return deferred.promise
    }, 1000)

    // Watch vm.submitting, and make sure everything is disabled until it's false.
    $scope.$watch(function() { return vm.submitting }, function() {
        console.log('submitting has changed state', vm.submitting)
        if (vm.submitting === false) {
            $timeout(function() {
                vm.showSuccessModal()
            }, 2000);
        }
    });



    var _submit = function() {
        // Need to generate vm.jpegUrl before sending.  Needs to be the correct image, and needs to trigger on click.

        setTimeout(function() {

            // console.log('saveToJPEG prep');
            var svg = document.getElementById("insta");
            var svgData = new XMLSerializer().serializeToString(svg);

            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");

            var img = new Image();
            img.setAttribute("src", "data:image/svg+xml;base64," + btoa(svgData));

            img.onload = function() {

                var canvas = document.createElement('canvas');
                canvas.width = img.width * 2;
                canvas.height = img.height * 2;

                var context = canvas.getContext('2d');
                context.scale(2, 2);
                context.drawImage(img, 0, 0);
                vm.jpegUrl = canvas.toDataURL('image/jpeg');

                var savedSwatch = {
                    swatch: vm.swatchPath,
                    width: vm.swatchInfo.width,
                    height: vm.swatchInfo.height,
                    scaledWidth: vm.swatchInfo.scaledWidth,
                    scaledHeight: vm.swatchInfo.scaledHeight,
                    scale: vm.scale,
                    jpegUrl: vm.jpegUrl,
                    garment: vm.baseTemplate
                }

                var submission = {
                    name: vm.idea.name,
                    shortDescription: vm.idea.shortDescription,
                    media: {},
                    patternData: savedSwatch
                }

                // console.log('submission', submission);
                var contest = $kookies.get("betabrand-contest") || false
                if (contest) {
                    submission.additional = submission.additional + " :: Contest name: " + contest
                    $kookies.remove('betabrand-contest', null, { expires: 14, path: '/' })
                }

                if (vm.submissionId) {
                    submission['id'] = vm.submissionId
                    return ThinkTankService.updateDesign(submission)
                } else {
                    return ThinkTankService.saveDesign(submission)
                }
            }
        }, 1000)

    }

    vm.submitted = false

    //Porting Dave's SVG version

    vm.getSvgSrc = function(svgId, alt) {

        if (typeof alt !== 'undefined') {
            return '#' + svgId;
        } else {
            return vm.basehref + '#' + svgId;
        }

    }

    vm.coordData = {
        scale: 1,
        x: 0,
        y: 0,
        d: 5
    }

    function initialize() {

        vm.pattern = document.getElementById('img1');
        vm.pattern2 = document.getElementById('img2');
        vm.patternImage = document.getElementById('patternImage');
        vm.patternImage2 = document.getElementById('patternImage2');
        vm.form = document.querySelector('.insta-box');
        vm.insta = document.querySelector('#insta');
        vm.draggableMask = SVG.get('draggableMask');
        vm.draggableMaskDoppelganger = SVG.get('draggableMask-doppelganger');
        vm.patternScale = document.getElementById('patternScale');
        vm.patternId = document.getElementById('pattern');
        // console.log('vm.patternId', vm.patternId);
        vm.patternId.width = '400';
        vm.patternId.height = '400';
        vm.pattern.width = '400';
        vm.pattern.height = '400';
        vm.pattern2.width = '400';
        vm.pattern2.height = '400';


        // document.querySelector(".insta-footer").insertBefore( i, document.querySelector(".insta-footer").firstChild );
        // vm.patternId.append("rect").attr("width", "300px").attr("height", "200px").style("fill", "steelblue");

        vm.draggableMask.draggable();

        vm.draggableMask.on('dragmove.namespace', function(event) {
            vm.coordData.offsetX = vm.draggableMask.x();
            vm.coordData.offsetY = vm.draggableMask.y();
            vm.draggableMaskDoppelganger.x(vm.coordData.offsetX);
            vm.draggableMaskDoppelganger.y(vm.coordData.offsetY);
            // console.log(vm.coordData);
        });

        _.forEach(['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'], function(event) {
            vm.form.addEventListener(event, function(e) {
                // preventing the unwanted behaviours
                e.preventDefault();
                e.stopPropagation();
            });
            vm.insta.addEventListener(event, function(e) {
                // preventing the unwanted behaviours
                e.preventDefault();
                e.stopPropagation();
            });
        });
        _.forEach(['dragover', 'dragenter'], function(event) {
            vm.form.addEventListener(event, function() {
                vm.form.classList.add('is-dragover');
            });
            vm.insta.addEventListener(event, function() {
                vm.insta.classList.add('is-dragover');
            });
        });
        _.forEach(['dragleave', 'dragend', 'drop'], function(event) {
            vm.form.addEventListener(event, function() {
                vm.form.classList.remove('is-dragover');
            });
            vm.insta.addEventListener(event, function() {
                vm.insta.classList.remove('is-dragover');
            });
        });
        vm.form.addEventListener('drop', function(e) {
            var fileBox = document.getElementById('file');
            droppedFiles = e.dataTransfer.files;
            vm.loadImageFileAsURL(droppedFiles);
            fileBox.files = droppedFiles;
        });
        // console.log('drop insta');
        vm.insta.addEventListener('drop', function(e) {
            var fileBox = document.getElementById('file');
            droppedFiles = e.dataTransfer.files;
            vm.loadImageFileAsURL(droppedFiles);
            fileBox.files = droppedFiles;
        });
    }


    vm.changeSize = function() {
        // function changeSize(val) {
        // console.log('vm.patternScale.value', vm.patternScale.value);
        vm.coordData.scale = vm.patternScale.value;
        vm.pattern.setAttribute("patternTransform", 'translate(' + vm.coordData.x + ' ' + vm.coordData.y + '), scale(' + vm.coordData.scale + ')');
        // console.log(vm.coordData);
    }

    vm.loadImageFileAsURL = function(filesSelected) {
        if (filesSelected.length > 0) {
            var fileToLoad = filesSelected[0];

            var fileReader = new FileReader();

            fileReader.onload = function(fileLoadedEvent) {
                // console.log('detectFilesChangedetectFilesChange vm.idea.media', vm.idea.media);
                var image = new Image();
                image.src = fileLoadedEvent.target.result;
                image.onload = function() {
                    vm.patternScale.value = "1";
                    vm.form = document.getElementById('insta-box');
                    vm.draggableMask.x(0).y(0);
                    vm.draggableMaskDoppelganger.x(0).y(0);
                    vm.pattern.setAttribute('patternTransform', ' scale(1)');
                    vm.pattern.setAttribute("width", image.width);
                    vm.pattern.setAttribute("height", image.height);
                    // console.log('vm.patternImage', vm.patternImage);


                    vm.patternImage.setAttribute("width", image.width);
                    vm.patternImage.setAttribute("height", image.height);
                    vm.patternImage.setAttribute("xlink:href", fileLoadedEvent.target.result);

                    vm.pattern2.setAttribute("width", image.width);
                    vm.pattern2.setAttribute("height", image.height);
                    vm.patternImage2.setAttribute("width", image.width);
                    vm.patternImage2.setAttribute("height", image.height);
                    vm.patternImage2.setAttribute("xlink:href", fileLoadedEvent.target.result);

                    vm.form.style.backgroundImage = "url('" + fileLoadedEvent.target.result + "')";
                    vm.form.classList.add('has-image');

                    // These are returning base64 in target.result instead.
                    vm.swatch = '' + fileLoadedEvent.target.result + '';
                    vm.swatchPath = '' + fileLoadedEvent.target.result + '';
                    vm.swatchInfo.width = image.width;
                    vm.swatchInfo.height = image.height;
                    vm.swatchInfo.scaledWidth = image.width;
                    vm.swatchInfo.scaledHeight = image.height;
                    vm.scale = '1';
                    vm.swatchInfo.swatch = '' + fileLoadedEvent.target.result + '';
                    vm.swatchInfo.coordData = {
                        scale: 1,
                        x: 0,
                        y: 0,
                        d: 5
                    }
                };

            };

            fileReader.readAsDataURL(fileToLoad);
        }
    };

    angular.element($window).triggerHandler('scroll')

    $scope.$emit('viewLoaded')

    PageService.setMicrodataItemType('QAPage')
    PageService.setBodyClass('insta-designs-page')

    AssetService.loadJs('angular/bower_components/svg.js/dist/svg.min.js', 'svg').then(function() {
        AssetService.loadJs('angular/bower_components/svg.draggable.js/dist/svg.draggable.min.js', 'svgDraggable').then(function() {
            initialize();
        })
    })

}

//   
//   
//   
//   //     > Multi-step submission  [Idea-Media-Designer-Review&Submission]
//   //   Idea: 
//   //     Title
//   //     // keywords or Short Description 
//   //     Detailed Description
//   //     Who is the target customer?
//   //     What problem are you solving?
//   //     // What’s our  retail price?
//   //     // Maybe there is some more clever way to do this / Provide writing tips per step
//   //     // We don't have this yet, but there has to be a form // Link to submission sample
//   // 
//   //   Media:
//   //     Upload images 
//   //     Add links to videos, other pictures, media online 
//   //     Provide image guidelines
//   //     This needs to be better, serialized, a clear way to add whatever you have and however much you have of it, and guidelines for formatting.
//   // 
//   // // disregard for now - Designer content, form already exists.
//   //   Designer:
//   //     Short Description 
//   //     Profile Picture 
//   //     Profile Preview 
//   //     Link to social media profiles
//   //     Provide writing tips 
//   // 
//   //   Review & Submission:

// Keeping these grouped until they may be replaced with a single key-attached directive.
//Escape
(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive("myTab", myTab);

    function myTab() {
        var directive = {
            restrict: "A",
            link: linkFunc,
            controller: myTabController,
            // controllerAs: "vm",
            // bindToController: true
        };

        return directive;

        function linkFunc($scope, el, attrs, ctrl) {
            el.bind("keydown keypress", function(event) {

                if (event.shiftKey && (event.which === 9)) {
                    $scope.$apply(function() {
                        $scope.$eval(attrs.myShiftTab);
                    });
                } else if (event.which === 9) {
                    $scope.$apply(function() {
                        $scope.$eval(attrs.myTab);
                    });
                }

                return true;

            });
        }
    }

    myTabController.$inject = ["$scope"];

    function myTabController($scope) {
        var vm = this
    }

})();

//Escape
(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive("myEscape", myEscape);

    function myEscape() {
        var directive = {
            restrict: "A",
            link: linkFunc,
            controller: myEscapeController,
            // controllerAs: "vm",
            // bindToController: true
        };

        return directive;

        function linkFunc($scope, el, attrs, ctrl) {
            el.bind("keydown keypress", function(event) {
                if (event.which === 27) {
                    $scope.$apply(function() {
                        $scope.$eval(attrs.myEscape);
                    });
                    event.preventDefault();
                }
            });
        }
    }

    myEscapeController.$inject = ["$scope"];

    function myEscapeController($scope) {
        var vm = this
    }

})();


//Enter
(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive("myEnter", myEnter);

    function myEnter() {
        var directive = {
            restrict: "A",
            link: linkFunc,
            controller: myEnterController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attrs, ctrl) {
            el.bind("keydown keypress", function(event) {
                if (event.which === 13) {
                    $scope.$apply(function() {
                        $scope.$eval(attrs.myEnter);
                    });
                    event.preventDefault();
                }
            });
        }
    }

    myEnterController.$inject = ["$scope"];

    function myEnterController($scope) {
        var vm = this
    }

})();

BetabrandApp.factory('MarketingModalsService', ['$timeout', '$log', '$location', '$q', '$http', 'CartService',
    function MarketingModalsService($timeout, $log, $location, $q, $http, CartService) {

        return {
            hasPromoMessage: false,
            getPromoMessage: function() {

                var params = $location.search()
                var deferred = $q.defer()
                var self = this
                if (params.utm_term && !params.r) {
                    $http
                        .get('/api/rest/cms/block/identifier/' + params.utm_term)
                        .success(function(data) {
                            self.hasPromoMessage = true
                            deferred.resolve(data)
                            CartService.applyCoupon(params.utm_term, "term").then(
                                function(response) {
                                    $log.debug('successfully applied promo coupon')
                                },
                                function(response) {
                                    $log.debug('failed to apply promo coupon')
                                }
                            )
                        })
                        .error(function(data) {
                            deferred.reject(data)
                        })
                } else {
                    deferred.reject({})
                }

                return deferred.promise
            }

        }
    }
]);

BetabrandApp.controller('BenefitsModalController', ['$scope', '$timeout', 'close', '$document', '$rootScope', 'TrackingService', 'hotkeys',
    function BenefitsModalController($scope, $timeout, close, $document, $rootScope, TrackingService, hotkeys) {

        $scope.display = true
        $scope.closing = false

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Referrals Modal',
                callback: function() {
                    $scope.close()
                }
            })


        $scope.close = function() {
            $rootScope.$broadcast('toggleModal')
            $scope.closing = true
            $timeout(function() {
                $scope.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }

        TrackingService.trackEvent("View Account Benefits Modal")

    }
]);

BetabrandApp.controller('AddToCartModalController', ['$scope', 'close', '$document', '$timeout', 'CartService', 'ProductService', 'NotificationsService', 'item', '_', 'hotkeys', 'TrackingService', '$rootScope', '$location', 'CustomerService', 'ImageService', '$window', 'OptimizelyService', 'AssetService', 'SailthruService', 'APP_CONFIG',
    function($scope, close, $document, $timeout, CartService, ProductService, NotificationsService, item, _, hotkeys, TrackingService, $rootScope, $location, CustomerService, ImageService, $window, OptimizelyService, AssetService, SailthruService, APP_CONFIG) {

        $scope.display = true
        $scope.closing = false
        $scope.cart = CartService
        $scope.crosssells
        $scope.product = {
            thumbnail: item.thumbnail,
            prices: item.prices,
            qty: 1,
            name: item.name,
            url: item.canonicalUrl,
            shippingDate: item.shippingDate,
            options: _.reduce(item.selectedAttributes, function(memo, value) {
                var add = {};
                add[value.label] = value.value;
                return _.extend(memo, add)
            }, {}),
            preorder: item.preorder,
            crowdfunding: item.crowdfunding
        }
        $scope.CustomerService = CustomerService
        $scope.formattedThumbnails = ImageService.lazyFormatSrc

        var spmCrossSellTestActive = OptimizelyService.handle("spmCrossSells")
        $scope.spmSectionId = APP_CONFIG.spmConfig && APP_CONFIG.spmConfig.crosssellSectionId ? APP_CONFIG.spmConfig.crosssellSectionId : "";
        if (spmCrossSellTestActive && $scope.spmSectionId) {
            var getSailthruRecommendations = function() {
                SailthruService.getRecommendations($scope.spmSectionId, 'cart-recommendations', { context_key: item.canonicalUrl }).then(function(response) {
                    $scope.crosssells = response.slice(0, 3);
                    console.log("SPM Cross Sells")
                })
            }
            AssetService.waitForLibrary('sailthru').then(getSailthruRecommendations)
        }

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Modal',
                callback: function() {
                    $scope.close()
                }
            })


        $scope.$on('closeModals', function() {
            $scope.close()
        })

        $scope.close = function() {
            $scope.closing = true
            $timeout(function() {
                $scope.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }

        $scope.showLoginModal = function() {
            $rootScope.$broadcast('closeModals')
            CustomerService.showLoginModal()
        }

        $scope.updateTotal = function(item) {

            CartService.updateTotal(item).then(
                function(response) {},
                function(error) {
                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                    // Update the cart data so that the old Qty of the cart is set
                    $scope.cart.getCartData()
                }
            )
        }

        $scope.openCheckout = function() {
            CartService.fireCartFlames.activated = true
            CartService.fireCartChug.activated = false
            CartService.fireCartDrive.activated = true
                //stop the firecart in 4 seconds
            $timeout(function() {
                CartService.fireCartFlames.activated = false
                CartService.fireCartDrive.activated = false
            }, 4000);
            CartService.showCart = false
            $scope.close()

            if ($rootScope.isMobile) {
                $rootScope.mobileBuybar = false
            }

            TrackingService.trackEvent("Click Checkout")

            $timeout(function() {
                $location.url('/cart/checkout')
            }, 260);

        }

        $scope.paypalCheckout = function() {
            TrackingService.trackEvent('Page Interaction', { 'Type': 'Paypal Express Checkout Link' })
            $window.location.href = '/betapaypal/index/initiate/'
        }

        //Force t-shirts as crosssells if current item is in men's pants category (49)
        if (item.categoryUrlMap[49] && !item.crowdfunding && OptimizelyService.handle('showTshirtOffer')) {
            ProductService.getProductsForCategoryId(72).then(function(shirts) {
                $scope.shirts = shirts;
            })
        }

    }
]);

BetabrandApp.controller('HowItWorksModalController', ['$scope', '$timeout', 'close', '$document',
    function HowItWorksModalController($scope, $timeout, close, $document) {

        $scope.display = true
        $scope.closing = false
        $scope.showHowItWorksForm = true

        $scope.close = function() {
            $scope.closing = true
            $timeout(function() {
                $scope.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }

        // Escape key listener
        $document.bind('keydown', function(event) {
            if (event.which === 27) {
                $scope.close()
                $scope.$apply()
                $document.unbind('keydown')
            }
        })

        $scope.$on("$destroy", function() {
            $document.unbind('keydown')
        })

    }
]);

// http://www.dwmkerr.com/the-only-angularjs-modal-service-youll-ever-need/
(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .controller('LoginModalController', LoginModalController);

    LoginModalController.$inject = ['$scope', 'TrackingService', '$rootScope', '$timeout', 'action', 'product', 'submission', 'close', '$document', '$http', 'CustomerService', 'NotificationsService', '$location', 'hotkeys', '$log', '$kookies', 'OptimizelyService']

    function LoginModalController($scope, TrackingService, $rootScope, $timeout, action, product, submission, close, $document, $http, CustomerService, NotificationsService, $location, hotkeys, $log, $kookies, OptimizelyService) {

        var vm = this;

        vm.action = action
        vm.product = product
        vm.submission = submission
        vm.display = true
        vm.closing = false
        vm.showSignIn = false
        vm.createAccountData = {}
        vm.loginData = {};
        vm.loadingSpinnerFb = false
        vm.loadingSpinnerSignIn = false
        vm.loadingSpinnerSignup = false
        vm.customerService = CustomerService
        vm.trackingService = TrackingService
        vm.OptimizelyService = OptimizelyService
        vm.signupWithEmail = false
        vm.forms = {}

        TrackingService.trackEvent('View Login Modal');

        if (vm.OptimizelyService.handle("loginModal")) {
            vm.loginStep = "start"

            vm.checkLogin = function() {
                vm.loadingSpinnerCheck = true
                CustomerService.emailExists(vm.loginData.email).then(
                    function() {
                        vm.loginStep = "login"
                        vm.loadingSpinnerCheck = false
                    },
                    function() {
                        vm.loginStep = "create"
                        vm.loadingSpinnerCheck = false
                        if (vm.loginData.email.length) {
                            vm.createAccountData.email = vm.loginData.email
                        }
                    })

            }

            vm.resetForms = function() {
                vm.loginStep = "start"
            }
        }

        if ($kookies.get("user_signin")) {
            vm.showSignIn = true
        }

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Login Modal',
                callback: function() {
                    vm.close()
                }
            })

        vm.switchSignupMethod = function() {
            vm.signupWithEmail = !vm.signupWithEmail
        }

        vm.emailCreateAccount = function() {

            if (!vm.forms.signupForm.$error.required) {

                vm.loadingSpinnerSignup = true

                vm.createAccountData.source = vm.action ? vm.action : null
                vm.createAccountData.product = vm.product ? vm.product : null
                vm.createAccountData.url = window.location.href

                CustomerService.emailCreateAccount(vm.createAccountData).then(function(response) {
                    vm.loadingSpinnerSignup = false
                }, function(error) {
                    vm.loadingSpinnerSignup = false
                    vm.errorMsg = error.messages.error[0].message
                    $log.debug(error)
                    if (error.messages.error[0].message == 'Email already exists') {
                        vm.showSignIn = true
                        vm.errorMsg = "We recognize that email. Try signing in instead?"
                        vm.loginData.email = vm.createAccountData.email
                    }
                })
            }

        }

        //also doubles as facebook account create (same process from front ends perspective)
        vm.facebookLogin = function() {
            vm.loadingSpinnerFb = true

            var loginData = { "source": vm.action, "product": vm.product, url: window.location.href }
            CustomerService.facebookLogin(loginData).then(function(response) {
                vm.loadingSpinnerFb = false
            }, function(error) {
                vm.loadingSpinnerFb = false
                vm.errorMsg = error.messages.error[0].message
            })
        }


        vm.emailLogin = function() {
            if (!vm.forms.loginForm.$error.required) {

                vm.loadingSpinnerSignIn = true
                vm.loginData.source = vm.action ? vm.action : null
                vm.loginData.product = vm.product ? vm.product : null

                CustomerService.emailLogin(vm.loginData).then(function(response) {
                    vm.loadingSpinnerSignIn = false

                }, function(error) {
                    vm.loadingSpinnerSignIn = false
                    vm.errorMsg = error.messages.error[0].message
                })
            }

        }

        vm.forgotPassword = function() {
            vm.close()
            $location.path('/account/forgotpassword')
        }

        vm.close = function() {
            $rootScope.$broadcast('toggleModal')
            vm.closing = true

            var fadeTime = $rootScope.isPhone ? 0 : 610

            $timeout(function() {
                vm.display = false
                close(CustomerService.data.loggedIn)
            }, fadeTime)
        }

        vm.toggleSignIn = function(event) {
            vm.showSignIn = !vm.showSignIn
        }

        $scope.$on('loggedIn', function() {
            vm.close()
        })

        $scope.$on('closeModals', function() {
            vm.close()
        })


    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .controller("NewsletterModalController", NewsletterModalController);

    NewsletterModalController.$inject = ['$scope', '$rootScope', 'close', '$document', '$timeout', 'NewsletterService', 'CustomerService', 'CartService', 'TrackingService', 'PopupsService', 'NotificationsService', '$log', '$location', '_']

    function NewsletterModalController($scope, $rootScope, close, $document, $timeout, NewsletterService, CustomerService, CartService, TrackingService, PopupsService, NotificationsService, $log, $location, _) {

        var vm = this

        vm.display = false
        vm.closing = false

        vm.successView = false
        vm.facebookLogin = false
        vm.roadblock = false
        vm.successView = false
        vm.isLoadingEmail = false
        vm.isLoadingFacebook = false
        vm.copyResponseText = "Click code to copy"
        $scope.forms = {}

        vm.close = function() {
            vm.closing = true
            $timeout(function() {
                vm.display = false
                close()
                window.scrollTo(0, 0)
                    // Wait for css animations to finish before removing
            }, 610)
        }

        vm.overlayClose = function() {
            // handle roadblock click
            if (!vm.roadblock) {
                vm.close()
            }
        }

        vm.codeCopied = function() {
            vm.copyResponseText = "Code copied!"
        }

        vm.submitEmail = function(event, email, whichForm) {
            event.preventDefault();

            var validated = (whichForm == "default") ? !$scope.forms.newsletterSignUpFormDefault.$error.required : !$scope.forms.newsletterSignUpFormCustom.$error.required
            if (validated) {
                vm.isLoadingEmail = true

                var data = {
                    email: email,
                    source: "Popup Signups",
                    incentivized: true,
                    url: window.location.href
                }

                if (PopupsService.customModal)
                    data.popupId = PopupsService.customModal.id

                NewsletterService.signup(data).then(
                    function(response) {

                        vm.discountCode = response.code
                        vm.successView = true
                        CartService.applyCoupon(vm.discountCode)
                        vm.isLoadingEmail = false
                    },
                    function(error) {
                        vm.isLoadingEmail = false
                            //Let's just close the modal if this is a roadblock
                        if (vm.roadblock) {
                            vm.close()

                            NotificationsService.addNotification({
                                message: error.messages.error[0].message,
                                type: "error"
                            })

                        }
                        vm.errorMessage = error.messages.error[0].message

                    })

            }

        }

        vm.submitFacebook = function() {
            vm.isLoadingFacebook = true
            var loginData = { "source": 'Popup Signups', 'url': window.location.href, 'incentive': true }

            if (PopupsService.customModal)
                loginData.popupId = PopupsService.customModal.id

            CustomerService.facebookLogin(loginData).then(
                function(data) {
                    var trackingData = { "Signup Source": "Popup Signups", "Signup Method": "Facebook", 'Email': data.email }
                    if (vm.customModal)
                        trackingData["Popup Id"] = vm.customModal.id

                    TrackingService.trackEvent("Newsletter Signup", trackingData)

                    vm.isLoadingFacebook = false
                        //if coupon is missing, this isn't a new user
                    if (data.signupCoupon) {
                        vm.discountCode = data.signupCoupon
                        vm.facebookLogin = true
                        vm.successView = true
                        CartService.applyCoupon(vm.discountCode)
                    } else {

                        //Let's just close the modal if this is a roadblock
                        if (vm.roadblock) {
                            vm.close()

                            NotificationsService.addNotification({
                                message: "Sorry, this offer is only eligible for new customers",
                                type: "error"
                            })
                        }

                        vm.errorMessage = "Sorry, this offer is only eligible for new customers"
                    }
                },
                function(error) {
                    vm.isLoadingFacebook = false
                    vm.errorMessage = error.messages.error[0].message
                }
            )
        }

        vm.setGenderPreference = function(email, gender) {
            if (gender == 'female' || gender == 'male') {
                var data = { "email": email, "gender": gender }
                CustomerService.updateSailthruVar(data)
                TrackingService.trackEvent("Set Gender", data)
                $timeout(vm.close(), 500);
            } else {
                $log.debug('Unable to set gender (' + gender + ') for subscriber (' + email + ').');
            }
        }

        PopupsService.getPopupForUrl(window.location.href).then(
            //Success
            function(customModal) {
                if (customModal) {
                    $log.debug("[PopupsService] Popup located!")

                    vm.customModal = customModal
                    vm.customModal.hideCloseButton = Boolean(Number(customModal.hideCloseButton))
                    vm.customModal.roadblock = Boolean(Number(customModal.roadblock))
                    vm.customModal.showFacebook = Boolean(Number(customModal.showFacebook))
                    vm.customModal.showOffer = Boolean(Number(customModal.showOffer))

                    vm.customModal.customCss = (vm.customModal.customCss !== undefined && vm.customModal.customCss !== null) ? JSON.parse(vm.customModal.customCss) : vm.customCss

                    vm.roadblock = Boolean(Number(customModal.roadblock))

                    $rootScope.$watch('isPhone', function(current, original) {
                        if ($rootScope.isPhone) {
                            vm.deviceSize = 'mobile'
                        } else {
                            vm.deviceSize = 'desktop'
                        }
                    })
                }
                vm.display = true
            },
            //No popup for this URL
            function() {
                $log.debug("[PopupsService] No popup located")
                vm.display = true
            }
        )



    }

})();

BetabrandApp.controller('PreOrderModalController', ['$scope', '$timeout', 'close', '$document', 'ModalService',
    function PreOrderController($scope, $timeout, close, $document, ModalService) {

        $scope.display = true
        $scope.closing = false
        $scope.showHowItWorksForm = true

        $scope.close = function() {
            $scope.closing = true
            $timeout(function() {
                $scope.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }

        $scope.questionsForm = false

        $scope.showQuestionsForm = function() {
            $scope.questionsForm = !$scope.questionsForm
        }


        // Escape key listener
        $document.bind('keydown', function(event) {
            if (event.which === 27) {
                $scope.close()
                $scope.$apply()
                $document.unbind('keydown')
            }
        })

        $scope.$on("$destroy", function() {
            $document.unbind('keydown')
        })

    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .controller('OutOfStockModalController', OutOfStockModalController);

    OutOfStockModalController.$inject = ['$scope', 'close', '$document', '$timeout', 'product', 'attributes', 'hotkeys']

    function OutOfStockModalController($scope, close, $document, $timeout, product, attributes, hotkeys) {

        var vm = this;


        $scope.display = true
        $scope.closing = false

        $scope.product = product
        $scope.attributes = attributes

        // Escape key listener

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Out of Stock Modal',
                callback: function() {
                    $scope.close()
                }
            })

        $scope.close = function() {
            $scope.closing = true
            $timeout(function() {
                $scope.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .controller('QuestionsModalController', QuestionsModalController);

    QuestionsModalController.$inject = ['$scope', 'close', '$document', '$timeout', 'ProductService', 'product', 'TrackingService', 'hotkeys', 'CustomerService']

    function QuestionsModalController($scope, close, $document, $timeout, ProductService, product, TrackingService, hotkeys, CustomerService) {

        var vm = this;

        vm.display = true
        vm.closing = false
            //product passed in via an 'input' through the underlying modal service
        vm.product = product

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Questions Modal',
                callback: function() {
                    vm.close()
                }
            })

        vm.close = function() {
            vm.closing = true
            $timeout(function() {
                vm.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }


    }

})();

(function() {

    'use strict';

    QuickLookModalController.$inject = ["$scope", "$timeout", "$document", "$rootScope", "$window", "product", "category", "useCanonical", "close", "ProductService", "LookupService", "TrackingService", "ImageService", "_", "hotkeys", "OptimizelyService"]

    function QuickLookModalController($scope, $timeout, $document, $rootScope, $window, product, category, useCanonical, close, ProductService, LookupService, TrackingService, ImageService, _, hotkeys, OptimizelyService) {

        var vm = this;

        vm._ = _
        vm.closing = false
        vm.product = product
        vm.currentImage = product.thumbnail
        vm.useCanonical = useCanonical
        vm.display = true
        vm.initialized = false
        vm.formatImage = ImageService.lazyFormatSrc
        vm.category = category

        vm.product.media.gallery = OptimizelyService.handle("mediaGalleryTests", vm.product)

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Quick Look',
                callback: function() {
                    vm.close()
                }
            })

        vm.trackProductQuickView = function(product) {
            TrackingService.trackEvent("Shop Page Interaction", { "Interaction Type": "Quick Look" })
            TrackingService.track('updateProductData', product)
            TrackingService.track('push', { event: 'productQuickView', 'virtualPagePath': product.url })
        }

        // called each time the model changes
        vm.updateMedia = function() {
            vm.currentImage = vm.product.media.gallery[0].url
        }

        vm.changeGalleryImage = function(url, index) {
            vm.currentImage = url
            vm.currentIndex = index
        }

        vm.getNextProduct = function() {
            vm.initialized = false
            var index = _.findIndex(vm.category, { "id": vm.product.id })
            index++
            var next = (index <= (vm.category.length - 1)) ? vm.category[index] : vm.category[0]
            _updateProduct(next.id)
        }

        vm.getPreviousProduct = function() {
            vm.initialized = false
            var index = _.findIndex(vm.category, { "id": vm.product.id })
            index--
            var previous = (index >= 0) ? vm.category[index] : vm.category[vm.category.length - 1]
            _updateProduct(previous.id)
        }

        vm.close = function(result) {
            vm.closing = true
            vm.display = false
            vm.initialized = false
            close(result, 610);
        }

        $rootScope.$watch("isMobile", function(current, original) {
            if (current == true) {
                vm.close()
            }
        })

        $scope.$watch("vm.product.id", function(current, original) {
            if (current !== original) {
                vm.updateMedia()
            }
        })


        var _updateProduct = function(id) {
            ProductService.getProduct(id).then(function(data) {
                vm.product = data
                _.remove(vm.product.media.gallery, { type: 'video' })
                vm.initialized = true
                vm.updateMedia()
                vm.trackProductQuickView(vm.product);
                vm.product.media.gallery = OptimizelyService.handle("mediaGalleryTests", vm.product)
            })
        }

        _updateProduct(product.id)

        if (vm.category) {

            hotkeys.bindTo($scope)
                .add({
                    combo: 'right',
                    description: 'Next Quick Look',
                    callback: function() {
                        vm.getNextProduct()
                    }
                })
                .add({
                    combo: 'left',
                    description: 'Previous Quick Look',
                    callback: function() {
                        vm.getPreviousProduct()
                    }
                })
        }


    }

    angular
        .module('BetabrandApp')
        .controller('QuickLookModalController', QuickLookModalController);

})();

BetabrandApp.controller('ReferralModalController', ['$scope', '$timeout', 'productId', 'productName', 'close', '$document', '$rootScope', 'TrackingService', 'hotkeys',
    function ReferralModalController($scope, $timeout, productId, productName, close, $document, $rootScope, TrackingService, hotkeys) {

        $scope.display = true
        $scope.closing = false
        $scope.showReferralForm = true
        $scope.productId = productId
        $scope.productName = productName || null

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Referrals Modal',
                callback: function() {
                    $scope.close()
                }
            })


        $scope.close = function() {
            $rootScope.$broadcast('toggleModal')
            $scope.closing = true
            $timeout(function() {
                $scope.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }

        $scope.referralFormToggle = function(event) {
            $scope.showReferralForm = !$scope.showReferralForm
        }

        TrackingService.trackEvent("View Referral Modal")

    }
]);

(function() {

    'use strict';

    SingleProductModal.$inject = ["$scope", "$timeout", "$document", "$rootScope", "$window", "product", "isFree", "close", "ProductService", "LookupService", "TrackingService", "ImageService", "_", "hotkeys", "OptimizelyService"]

    function SingleProductModal($scope, $timeout, $document, $rootScope, $window, product, isFree, close, ProductService, LookupService, TrackingService, ImageService, _, hotkeys, OptimizelyService) {

        var vm = this;

        vm._ = _
        vm.closing = false
        vm.product = product
        vm.currentImage = product.thumbnail
        vm.display = true
        vm.initialized = false
        vm.formatImage = ImageService.lazyFormatSrc
        vm.isFree = isFree

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Quick Look',
                callback: function() {
                    vm.close()
                }
            })

        if (isFree) {}

        vm.trackProductQuickView = function(product) {
            TrackingService.trackEvent("Shop Page Interaction", { "Interaction Type": "Quick Look" })
        }

        vm.close = function(result) {
            vm.closing = true
            vm.display = false
            vm.initialized = false
            close(result, 610);
        }

    }

    angular
        .module('BetabrandApp')
        .controller('SingleProductModal', SingleProductModal);

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .controller('VoteButtonCommentBoxModalController', VoteButtonCommentBoxModalController)

    VoteButtonCommentBoxModalController.$inject = ['$scope', 'close', '$document', '$timeout', 'TrackingService', 'hotkeys', 'submissionId', "imageUrl", "NotificationsService", "initTinyMce"]

    function VoteButtonCommentBoxModalController($scope, close, $document, $timeout, TrackingService, hotkeys, submissionId, imageUrl, NotificationsService, initTinyMce) {

        var vm = this;

        $scope.display = false
        $scope.closing = false

        initTinyMce().then(function() {
            $scope.display = true
        });

        $scope.threadId = "submission-" + submissionId

        $scope.imageUrl = imageUrl

        $scope.afterCommentCallback = function() {
            NotificationsService.addNotification({
                message: "Thanks for your feedback!",
                type: "success"
            })
            $scope.close()
        }

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Comment Modal',
                callback: function() {
                    $scope.close()
                }
            })

        $scope.close = function() {
            $scope.closing = true
            $timeout(function() {
                $scope.display = false
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }


    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbModelCitizenCard", bbModelCitizenCard);

    function bbModelCitizenCard() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {
                image: "=",
                showUser: "@"
            },
            transclude: true,
            templateUrl: "/angular/app/model-citizen-cards/model-citizen-card.html",
            link: linkFunc,
            controller: bbModelCitizenCardController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    bbModelCitizenCardController.$inject = ["$scope", "CustomerService", "NotificationsService", "ModelCitizenService"];

    function bbModelCitizenCardController($scope, CustomerService, NotificationsService, ModelCitizenService) {

        var vm = this;
        vm.voted = false

        CustomerService.getData().then(function(response) {
            vm.votedImages = response.votedImages || {}
            if (response.loggedIn) {
                vm.votedIds = Object.keys(vm.votedImages)
            }
        })

        vm.vote = function() {
            if (!CustomerService.data.loggedIn) {
                CustomerService.showLoginModal({ "action": "vote", source: "vote", image: vm.image }).then(function(success) {
                    if (success)
                        _postVote()
                })
            } else {
                _postVote()
            }
        }

        var _postVote = function() {
            vm.image.votes += 1
            vm.votedImages[vm.image.id] = 1

            ModelCitizenService.vote(vm.image.id).then(
                // Success
                function() {},
                //Error
                function() {
                    vm.image.votes -= 1

                    NotificationsService.addNotification({
                        message: "Whoops! Something went wrong. Try voting again.",
                        type: "error"
                    })

                })
        }

    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller('ModelCitizenController', ModelCitizenController);

    ModelCitizenController.$inject = ['$scope', '$rootScope', '$q', '$templateCache', '$document', '$timeout', '$window', 'ModelCitizenService', 'CartService', 'TrackingService', 'ModalService', 'PageService', 'CustomerService', '$location', 'ImageService', 'NotificationsService', 'takeover'];

    function ModelCitizenController($scope, $rootScope, $q, $templateCache, $document, $timeout, $window, ModelCitizenService, CartService, TrackingService, ModalService, PageService, CustomerService, $location, ImageService, NotificationsService, takeover) {
        var vm = this;
        vm.photoType = null;
        vm.wallContainer = angular.element(document.getElementsByClassName('walloffame__images'));
        vm.currentPage = 0;
        vm.countPerPage = 24;
        vm.endReached = false;
        vm.loadingPhotos = false;
        vm.ModelCitizenService = ModelCitizenService;
        vm.images = [];
        vm.canonical = $location.protocol() + '://' + $location.host() + $location.path();
        vm.formattedThumbnails = ImageService.lazyFormatSrc;
        vm.votedImages = false;
        vm.takeover = takeover
        vm.CustomerService = CustomerService

        if (vm.takeover) {
            var trackingData = {};
            if (vm.takeover.type == "model") {
                trackingData.type = "ModelCitizen";
            } else {
                trackingData.type = "B-Glasses";
            }
            TrackingService.trackEvent("View MC Upload", trackingData);
        };

        vm.getNextPage = function() {
            vm.loadingPhotos = true;
            vm.currentPage++;

            ModelCitizenService.getWallOfFame(vm.currentPage, vm.countPerPage).then(function(result) {
                if (result.length) {
                    for (var i = 0; i < result.length; i++) {
                        vm.images.push(result[i]);
                    }
                } else {
                    vm.endReached = true;
                }
                vm.loadingPhotos = false;

            })
        }


        function _showUploader(type) {
            vm.photoType = type;

            $document.scrollTo(angular.element(document.getElementById('scroll__target')), 108, 400).then(function() {
                ModelCitizenService.showUploader = true;
                $rootScope.$broadcast("showMcUploader")
            }, 150);

            var trackingData = { source: "MC WOF" };

            if (type == "product") {
                trackingData.type = "ModelCitizen";
            } else {
                trackingData.type = "B-Glasses";
            }

            TrackingService.trackEvent('View MC Upload', trackingData);
        }

        vm.showUploader = function(type) {
            if (CustomerService.data.loggedIn) {
                _showUploader(type);
            } else {
                CustomerService.showLoginModal({ "action": "mcupload", source: "mcupload" })
                    .then(function(response) {
                        if (CustomerService.data.loggedIn) {
                            _showUploader(type);
                        }
                    });
            }
        }

        vm.loadMore = function() {
            if (!vm.loadingPhotos) {
                vm.getNextPage();
            }
        }

        vm.vote = function(event, image) {
            event.stopPropagation();
            if (!CustomerService.data.loggedIn) {
                CustomerService.showLoginModal({ "action": "vote", source: "vote", image: image }).then(function(success) {
                    if (success) {
                        _postVote(image);
                    }
                });
            } else {
                _postVote(image);
            }
        }

        function _postVote(image) {
            image.votes += 1;
            CustomerService.data.votes.modelcitizen_photo[image.id] = 1;

            ModelCitizenService.vote(image.id).then(
                // Success
                function() {},
                //Error
                function() {
                    image.votes -= 1;

                    NotificationsService.addNotification({
                        message: "Whoops! Something went wrong. Try voting again.",
                        type: "error"
                    })

                })
        }

        // Get voted images by customer
        CustomerService.getData().then(function(response) {
            vm.votedImages = response.votedImages || {};
            if (response.loggedIn) {
                vm.votedIds = Object.keys(vm.votedImages);
            }
        });

        // Set up tracking promise
        var trackingDeferred = $q.defer();
        TrackingService.setTrackingPromise(trackingDeferred.promise);

        $scope.$emit('viewLoaded');

        trackingDeferred.resolve({ "Source": "Model Citizen" });
        PageService.setBodyClass('modelcitizen__page');
        PageService.setMicrodataItemType('CollectionPage');

        $scope.$watch('vm.ModelCitizenService.showUploader', function(newVal, oldVal) {
            if (newVal == false) {
                vm.photoType = null;
                $timeout(function() {
                    $document.scrollTo(angular.element(document.body), 0, 400);
                }, 150);
            }
        });

        vm.loadMore();
    }
})();

/*
 Usage:
 <model-citizen-gallery tag="mens-mc-contest" allow-voting="true"></model-citizen-gallery>
 */
(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('modelCitizenGallery', modelCitizenGallery);

    function modelCitizenGallery() {
        var directive = {
            restrict: 'E',
            replace: true,
            templateUrl: '/angular/app/modelcitizen/modelCitizenGallery.html',
            scope: {
                tag: "@?",
                sortMethod: "@?",
                hideSubmitPhoto: "@?",
                limit: "=?",
                hideVoted: "=?",
                allowVoting: "=?",
                user: "=?"
            },
            transclude: true,
            link: linkFunc,
            controller: modelCitizenGalleryController,
            controllerAs: 'vm',
            bindToController: true
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {

        }
    }

    modelCitizenGalleryController.$inject = ['$scope', 'ModelCitizenService', 'CustomerService', '_', 'NotificationsService', 'ModalService', 'TrackingService', 'ImageService', '$location', 'PageService', '$rootScope'];

    function modelCitizenGalleryController($scope, ModelCitizenService, CustomerService, _, NotificationsService, ModalService, TrackingService, ImageService, $location, PageService, $rootScope) {
        var vm = this;
        vm._ = _;
        vm.page = PageService;
        vm.votedImages = false;
        vm.canonical = $location.protocol() + '://' + $location.host() + $location.path();
        vm.allowVoting = Boolean(vm.allowVoting)
        vm.formattedThumbnails = ImageService.lazyFormatSrc
        vm.CustomerService = CustomerService

        //limitTo filter breaks when passed undefined value
        if (!vm.limit) {
            vm.limit = Infinity;
        }
        vm.sortImages = sortImages;
        vm.showImageModal = showImageModal;
        vm.vote = vote;

        function sortImages(method) {
            switch (method) {
                case "random":
                    var oldimages = _.clone(vm.images);
                    vm.images = [];
                    do {
                        var index = _.random(0, oldimages.length - 1);
                        vm.images.push(oldimages[index]);
                        oldimages.splice(index, 1);
                    } while (oldimages.length > 0);
                    break;
                default:

                    break
            }
        }

        function showImageModal(image) {
            if ($rootScope.isDesktop) {
                ModalService.showModal({
                    templateUrl: "/angular/app/modelcitizen/modelcitizen-modal.html",
                    controller: "ModelCitizenImageModalController as vm",
                    inputs: {
                        image: image,
                        images: vm.images
                    }
                }).then(function(modal) {
                    modal.close.then(function(result) {

                    })
                    TrackingService.trackEvent("View Model Citizen Photo", { image: image.image, imageId: image.id, product: image.name });
                })

            }
        }

        function vote(event, image) {
            event.stopPropagation();
            if (!CustomerService.data.loggedIn) {
                CustomerService.showLoginModal({ "action": "vote", source: "vote", image: image }).then(function(success) {
                    if (success) {
                        _postVote(image);
                    }
                })
            } else {
                _postVote(image);
            }
        }

        function _postVote(image) {
            image.votes += 1;
            vm.votedImages[image.id] = 1;

            ModelCitizenService.vote(image.id).then(
                // Success
                function() {},
                //Error
                function() {
                    image.votes -= 1;
                    NotificationsService.showError("Whoops! Something went wrong. Try voting again.", 5000);
                })
        }

        // Get voted images by customer
        CustomerService.getData().then(function(response) {
            vm.votedImages = (response.votes && response.votes.modelcitizen_photo) ? response.votes.modelcitizen_photo : {};
            if (response.loggedIn) {
                vm.votedIds = Object.keys(vm.votedImages);
            }
        });


        var _parseImages = function(images) {

            var params = $location.search();
            if (params.m) {
                // remove param image from images array
                vm.featuredImage = _.find(vm.images, function(d) {
                    return (parseInt(params.m) === d.id);
                });
                vm.page.setImage(vm.featuredImage.image);
                vm.page.setTitle("Betabrand Unveils Its Next Supermodel");
                vm.page.setDescription("The fashion world is already abuzz over this dashing new sensation!");
                vm.page.setCanonical(window.location.href);

                vm.images = _.without(vm.images, vm.featuredImage);
            }

            if (vm.hideVoted) {
                CustomerService.getData().then(function(response) {
                    if (response.loggedIn) {
                        vm.images = _.filter(vm.images, function(d) {
                            return vm.votedIds.indexOf(d.id) < 0;
                        })
                    }
                })
            }
            vm.sortImages(vm.sortMethod);


        }

        if (vm.tag) {
            // Get all photos by tag
            ModelCitizenService.getPhotosByTag(vm.tag).then(function(response) {
                if (response.data.length == 0) {
                    return;
                }

                vm.images = response.data;
                _parseImages()

            });
        } else if (vm.user) {
            vm.images = vm.user.photoList
            _parseImages()
        }

    }
})();

;
(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller('ModelCitizenImageModalController', ModelCitizenImageModalController);

    ModelCitizenImageModalController.$inject = ['$scope', 'close', '$document', '$timeout', '_', 'image', 'images', '$location', '$window', 'ImageService', 'hotkeys'];

    function ModelCitizenImageModalController($scope, close, $document, $timeout, _, image, images, $location, $window, ImageService, hotkeys) {
        var vm = this;

        vm.closing = false
        vm.display = true
        vm.image = image;
        vm.images = images;
        vm.formattedThumbnails = ImageService.lazyFormatSrc;

        vm.getNextImage = function() {
            var index = _.findIndex(vm.images, { "id": vm.image.id });
            index++;
            vm.image = (index <= (vm.images.length - 1)) ? vm.images[index] : vm.images[0];
        }

        vm.getPreviousImage = function() {
            var index = _.findIndex(vm.images, { "id": vm.image.id });
            index--;
            vm.image = (index >= 0) ? vm.images[index] : vm.images[vm.images.length - 1];
        }

        vm.close = function() {
            vm.closing = true;
            $timeout(function() {
                vm.display = false;
                close();
                // Wait for css animations to finish before removing
            }, 610);
        }

        vm.goToProductPage = function() {
            if (vm.image.product.url) {
                var originRe = new RegExp($window.location.origin);
                var url = vm.image.product.url.replace(originRe, "");
                $location.url(url + '?m=' + vm.image.id);
                vm.close();
            }
        }

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Modal',
                callback: function() {
                    vm.close()
                }
            })

        hotkeys.bindTo($scope)
            .add({
                combo: 'right',
                description: 'Next Image',
                callback: function() {
                    vm.getNextImage()
                }
            })
            .add({
                combo: 'left',
                description: 'Previous Image',
                callback: function() {
                    vm.getPreviousImage()
                }
            })


    }
})();

BetabrandApp.factory('ModelCitizenService', ['$http', '$q', '$location', 'CartService', '_',
    function ModelCitizenService($http, $q, $location, CartService, _) {
        return {
            submitDefer: $q.defer(),
            showUploader: false,
            isUploading: false,
            joinNewsletter: true,

            getWallOfFame: function(currentPage, countPerPage) {
                var deferred = $q.defer()
                $http
                    .get('/api/rest/modelcitizen/collection/1/?page=' + currentPage + '&pageSize=' + countPerPage)

                .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            },
            createImage: function(imageData) {
                var deferred = $q.defer()
                this.submitDefer = deferred

                //send newsletter opt-in data
                if (this.joinNewsletter == true) {
                    _.extend(imageData, { newsletter: true })
                }

                var request = $http({
                        method: "post",
                        url: "/api/rest/modelcitizen/create/",
                        data: imageData
                    })
                    .success(function(data) {
                        deferred.resolve(data)
                        if (data.coupon) {
                            CartService.applyCoupon(data.coupon)
                        }
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise

            },
            getModelCitizen: function(id) {
                var deferred = $q.defer()

                var request = $http({
                        method: "get",
                        url: "/api/rest/modelcitizen/get/" + id
                    })
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            },
            getPhotosByUserId: function(userId) {
                var deferred = $q.defer()

                var request = $http({
                        method: "get",
                        url: "/api/rest/modelcitizen/collection/1?userId=" + userId
                    })
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            },
            getPhotosByTag: function(tag, pageSize, page) {
                pageString = ""
                if (pageSize)
                    pageString = "pageSize=" + pageSize
                if (page)
                    pageString = "&page=" + page

                return $http({
                    method: "get",
                    url: "/api/rest/modelcitizen/collection/" + tag + "?" + pageString
                })
            },
            vote: function(id) {
                return $http({
                    method: "POST",
                    url: "/api/rest/votes/create",
                    data: {
                        'id': id,
                        'type': 'modelcitizen_photo'
                    }
                })
            }
        }
    }
]);


(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("ModelCitizenUploaderController", ModelCitizenUploaderController);

    ModelCitizenUploaderController.$inject = ["$scope", "$q", "TrackingService", "PageService"]

    function ModelCitizenUploaderController($scope, $q, TrackingService, PageService) {

        var vm = this

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            "Source": "ModelCitizenUploader page"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType("ItemPage")
        PageService.setBodyClass("ModelCitizenUploader-page")

        $scope.$emit("viewLoaded")



    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .directive("modelCitizenUploader", modelCitizenUploader);

    function modelCitizenUploader() {
        var directive = {
            restrict: "E",
            replace: true,
            scope: {
                photoType: "=photoTypeObject",
                variety: "@?"
            },
            transclude: true,
            templateUrl: "/angular/app/modelcitizen/modelcitizen-uploader.html",
            link: linkFunc,
            controller: modelCitizenUploaderController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {


        }
    }

    modelCitizenUploaderController.$inject = ["$scope", "$window", "TrackingService", "$http", '$rootScope', "$log", "ModelCitizenService", "NotificationsService", "$location", "CustomerService", "$timeout", "AssetService"];

    function modelCitizenUploaderController($scope, $window, TrackingService, $http, $rootScope, $log, ModelCitizenService, NotificationsService, $location, CustomerService, $timeout, AssetService) {


        var vm = this;

        AssetService.loadJs('angular/bower_components/fabric/dist/fabric.min.js', 'fabric')

        vm.loggedIn = false
        vm.ModelCitizenService = ModelCitizenService
        ModelCitizenService.submitDefer.resolve(true)
        vm.canvas = null
        vm.hasPhoto = false
        vm.data = {}

        vm.photoType = vm.photoType || vm.variety

        if (vm.photoType == "dpyp-contest")
            initUploader();

        vm.initializeCanvas = function() {
            fabric.Object.prototype.transparentCorners = false
            vm.data.caption = null
            vm.scaleAmount = .5
            vm.rotateAmount = 0
            vm.holder = document.getElementById('uploader__canvas')
            vm.canvas = new fabric.Canvas('fabric__canvas')
            vm.canvasImage = null
            vm.canvasGlasses = null
        }

        vm.initializeCanvasSize = function() {

            vm.canvasWidth = vm.holder.clientWidth
            vm.canvasHeight = vm.holder.clientHeight
            vm.canvas.setWidth(vm.holder.clientWidth)
            vm.canvas.setHeight(vm.holder.clientHeight)
            vm.canvasWidth = vm.holder.clientWidth
            vm.canvasHeight = vm.holder.clientHeight
            vm.canvas.setWidth(vm.canvasWidth)
            vm.canvas.setHeight(vm.canvasHeight)
            vm.canvas.selection = false
            if (vm.canvas.item(0) !== undefined) {
                vm.canvas.centerObject(vm.canvas.item(0))
            }
            vm.canvas.setBackgroundColor({ source: '/angular/images/uploader-pattern.png', repeat: 'repeat' }, vm.canvas.renderAll.bind(vm.canvas))

            vm.scaleControlChange = function() {
                vm.canvasImage.scale(parseFloat(vm.scaleAmount)).setCoords()
                vm.canvas.renderAll()
            }

            vm.rotateControlChange = function() {
                vm.canvasGlasses.setAngle(parseInt(vm.rotateAmount, 10)).setCoords();
                vm.canvas.renderAll()
            }

            vm.holder.ondragover = function() {
                angular.element(vm.holder).addClass('hover')
                return false
            }

            vm.holder.ondrop = function(evt) {
                angular.element(vm.holder).addClass('has__image').removeClass('hover')
                evt.preventDefault()

                var file = evt.dataTransfer.files[0],
                    reader = new FileReader(),
                    options = {
                        canvas: true
                    }

                reader.onload = function(event) {

                    loadImage.parseMetaData(file, function(data) {
                        if (data.exif) {
                            options.orientation = data.exif.get('Orientation')
                        }
                        // read the orientation and rotate if necessary
                        loadImage(
                            file,
                            function(img) {

                                vm.canvas.remove(vm.canvasImage)
                                fabric.Image.fromURL(img.toDataURL(), function(oImg) {
                                    // oImg.scale(0.5)
                                    oImg.lockUniScaling = true
                                    oImg.centeredScaling = true
                                    oImg.scaleToWidth(vm.canvas.width * 1)
                                    vm.canvasImage = oImg.set()
                                    vm.canvas.add(vm.canvasImage)
                                    vm.canvasImage.set({
                                        borderColor: 'gray',
                                        cornerColor: 'black',
                                        centeredScaling: true,
                                        hasRotatingPoint: false,
                                        originX: "center",
                                        originY: "center"
                                    })
                                    vm.canvas.centerObject(vm.canvasImage)
                                    if (vm.photoType == 'bglasses')
                                        addGlasses()
                                })

                            }, options
                        )

                    })
                }

                vm.hasPhoto = true
                $scope.$apply()
                reader.readAsDataURL(file)
                return false
            }

            $scope.$watch(
                function(vm) {
                    return (vm.photoType)
                },
                function(newValue) {
                    if (newValue == 'model')
                        vm.canvas.remove(vm.canvasGlasses)
                    if (newValue == 'bglasses' && vm.canvasGlasses !== null)
                        addGlasses()
                }
            )


        }

        function addGlasses() {
            fabric.loadSVGFromURL('/angular/images/modelcitizen/glasses.svg', function(objects, options) {
                vm.canvas.remove(vm.canvasGlasses)
                vm.canvasGlasses = fabric.util.groupSVGElements(objects, options)
                vm.canvas.add(vm.canvasGlasses.scale(0.5))
                vm.canvasGlasses.set({
                        left: vm.canvas.width / 2,
                        top: vm.canvas.height / 2,
                        borderColor: 'gray',
                        cornerColor: 'black',
                        lockUniScaling: true,
                        // hasRotatingPoint: false,
                        originX: "center",
                        originY: "center",
                        selection: true
                    }).setCoords()
                    // vm.canvas.centerObject(vm.canvasGlasses)
                vm.canvas.setActiveObject(vm.canvas.item(1));
                vm.canvas.renderAll()
            })
        }
        vm.saveImage = function(event) {
            event.preventDefault()
            if (vm.hasPhoto && vm.loggedIn) {
                ModelCitizenService.isUploading = true
                vm.canvas.deactivateAll().renderAll()

                var image = vm.canvas.toDataURL({
                    format: 'png',
                    left: 0,
                    top: 0,
                    width: vm.canvasWidth,
                    height: vm.canvasHeight,
                    multiplier: ((940 / vm.canvasWidth) * 2)
                })


                ModelCitizenService.createImage({
                    image: image,
                    email: vm.data.userEmail,
                    comment: vm.data.caption,
                    type: (vm.photoType == 'dpyp-contest') ? 'model' : vm.photoType,
                    productId: vm.data.taggedProduct ? vm.data.taggedProduct.id : ''
                }).then(function(result) {
                        //if its a retail upload, just reset the form
                        result.retailUpload = result.retailUpload || false
                        if (result.retailUpload) {
                            ModelCitizenService.showUploader = false
                        } else {
                            if (result.publicBaseUrl) {
                                $location.path(result.publicBaseUrl).search({ m: result.id })
                            }

                            var message = "Congratulations on becoming our newest model citizen!";

                            if (vm.photoType != 'dpyp-contest')
                                message = message + " Your discount will be automatically applied at checkout.";

                            NotificationsService.addNotification({
                                message: message,
                                type: "success"
                            })

                        }
                        ModelCitizenService.isUploading = false

                    },
                    function(error) {
                        NotificationsService.addNotification({
                            message: error,
                            type: "error"
                        })

                        ModelCitizenService.isUploading = false
                    }
                )
            } else {
                event.preventDefault()
            }
        }

        vm.close = function() {
            ModelCitizenService.showUploader = false
        }

        vm.clearImage = function() {
            angular.element(vm.holder).removeClass('has__image').css('background-image', 'url()')
            vm.hasPhoto = false
        }

        vm.detectFilesChange = function(event, files) {
            var fileBox = document.getElementById('file');
            vm.uploadFile(fileBox.files);
        }

        vm.uploadFile = function(files) {

            angular.element(vm.holder).addClass('has__image').removeClass('hover')

            var file = files[0],
                reader = new FileReader(),
                options = {
                    canvas: true,
                    maxWidth: 2000
                }

            reader.onload = function(event) {

                loadImage.parseMetaData(file, function(data) {
                    if (data.exif) {
                        options.orientation = data.exif.get('Orientation')
                    }
                    // read the orientation and rotate if necessary
                    loadImage(
                        file,
                        function(img) {

                            $timeout(function() {

                                vm.canvas.remove(vm.canvasImage)
                                fabric.Image.fromURL(img.toDataURL(), function(oImg) {
                                    // oImg.scale(0.5)
                                    oImg.lockUniScaling = true
                                    oImg.centeredScaling = true
                                    oImg.scaleToWidth(vm.canvas.width * 1)
                                    vm.canvasImage = oImg.set()
                                    vm.canvas.add(vm.canvasImage)
                                    vm.canvasImage.set({
                                        borderColor: 'gray',
                                        cornerColor: 'black',
                                        centeredScaling: true,
                                        hasRotatingPoint: false,
                                        originX: "center",
                                        originY: "center"
                                    })
                                    vm.canvas.centerObject(vm.canvasImage)
                                    if (vm.photoType == 'bglasses')
                                        addGlasses()
                                })

                            }, 0);


                        }, options
                    )

                })

            }

            vm.hasPhoto = true
            reader.readAsDataURL(file)
        }

        $scope.$on("showMcUploader", function() {
            initUploader()
        })

        $scope.$on("$destroy", function() {
            angular.element($window).unbind('resize')
            ModelCitizenService.showUploader = false
        })

        // prepopulate with customer data if logged in (and clear if logged out)
        function _prepopulate() {
            CustomerService.getOrders().then(function(response) {
                var data = response.data
                vm.loggedIn = data.loggedIn
                if (data.email) {
                    if (!vm.data.userEmail) {
                        vm.data.userEmail = data.email
                    }
                } else {
                    if (vm.data.userEmail) {
                        vm.data.userEmail = null
                    }
                }

                if (data.orderedProductsDetailed) {
                    vm.orderedProducts = data.orderedProductsDetailed
                } else {
                    vm.orderedProducts = false
                }
            })
        }

        function initUploader() {
            AssetService.waitForLibrary('fabric').then(function() {
                vm.initializeCanvas()
                $timeout(function() {
                    vm.initializeCanvasSize()
                }, 200);
                angular.element($window).bind('resize', function() {
                    vm.initializeCanvasSize()
                    return $scope.$apply()
                })
            })
        }

        _prepopulate()
        $rootScope.$on('loggedIn', _prepopulate);
        $rootScope.$on('loggedOut', _prepopulate);


    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller('ModelCitizenViewController', ModelCitizenViewController)
        .config(config);

    ModelCitizenViewController.$inject = ['$scope', '$q', '$templateCache', '$document', '$timeout', '$window', 'ModelCitizenService', 'CartService', 'TrackingService', 'ModalService', 'PageService', 'CustomerService', '$location', 'ImageService', 'NotificationsService', 'photo', 'ProductService'];

    function ModelCitizenViewController($scope, $q, $templateCache, $document, $timeout, $window, ModelCitizenService, CartService, TrackingService, ModalService, PageService, CustomerService, $location, ImageService, NotificationsService, photo, ProductService) {
        var vm = this;
        vm.photo = photo
        vm.CustomerService = CustomerService
        vm.ModelCitizenService = ModelCitizenService;
        vm.canonical = $location.protocol() + '://' + $location.host() + $location.path();
        vm.formattedThumbnails = ImageService.lazyFormatSrc;
        vm.commentHighlights = {}
        vm.commentHighlights[vm.photo.customer.id] = 'modelcitizen'

        vm.vote = function(event, image) {
            event.stopPropagation();
            if (!CustomerService.data.loggedIn) {
                CustomerService.showLoginModal({ "action": "vote", source: "vote", image: image }).then(function(success) {
                    if (success) {
                        _postVote(image);
                    }
                });
            } else {
                _postVote(image);
            }
        }

        function _postVote(image) {
            image.votes += 1;
            vm.votedImages[image.id] = 1;

            ModelCitizenService.vote(image.id).then(
                // Success
                function() {},
                //Error
                function() {
                    image.votes -= 1;

                    NotificationsService.addNotification({
                        message: "Whoops! Something went wrong. Try voting again.",
                        type: "error"
                    })

                })
        }

        // Get voted images by customer
        CustomerService.getData().then(function(response) {
            vm.votedImages = response.votedImages || {};
            if (response.loggedIn) {
                vm.votedIds = Object.keys(vm.votedImages);
            }
        });

        // Set up tracking promise
        var trackingDeferred = $q.defer();
        TrackingService.setTrackingPromise(trackingDeferred.promise);

        $scope.$emit('viewLoaded');

        trackingDeferred.resolve({ "Source": "Model Citizen Page" });
        PageService.setBodyClass('modelcitizen__page');
        PageService.setImage(vm.photo.image)
        PageService.setTitle(vm.photo.customer.label + " | Betabrand Model Citizen")
        PageService.setDescription("The fashion world is already abuzz over this dashing new sensation!")
        if (vm.photo.productId) {
            ProductService.getProduct(vm.photo.productId).then(function(product) {
                PageService.setDescription("The fashion world is abuzz over " + vm.photo.customer.label + " wearing Betabrand's " + product.name);
            })
        }
    }

    function config($routeProvider) {
        $routeProvider
            .when('/modelcitizen/:mcId', {
                controller: 'ModelCitizenViewController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/modelcitizen/modelcitizen-view.html',
                title: 'Betabrand - Model Citizen',
                resolve: {
                    photo: ["$route", "ModelCitizenService", function($route, ModelCitizenService) {
                        return ModelCitizenService.getModelCitizen($route.current.params.mcId)
                    }]
                }
            })
    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller("NewsletterController", newsletterController);

    newsletterController.$inject = ["$scope", "NewsletterService"];

    function newsletterController($scope, NewsletterService) {

    }

})();

BetabrandApp.factory('NewsletterService', ["$q", "$http", "TrackingService",
    function NewsletterService($q, $http, TrackingService) {
        return {
            signup: function(data) {
                var deferred = $q.defer()
                $http({
                    method: "POST",
                    url: "/api/rest/subscribe/",
                    data: data
                }).success(function(response) {
                    deferred.resolve(response)

                    var trackingData = { "Signup Source": data.source, "Signup Method": (data.email.length > 0) ? "Email" : "Facebook", 'Email': data.email }
                    if ("previouslyIdentified" in response) trackingData["Previously Identified"] = response["previouslyIdentified"]
                    TrackingService.trackEvent("Newsletter Signup", trackingData)
                }).error(function(response) {
                    deferred.reject(response)
                })
                return deferred.promise
            }
        }
    }
]);

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("NotificationsController", NotificationsController);

    NotificationsController.$inject = ["$scope", "NotificationsService", "MarketingModalsService", "$sce", "$rootScope", "OptimizelyService", "CustomerService", "$timeout"]

    function NotificationsController($scope, NotificationsService, MarketingModalsService, $sce, $rootScope, OptimizelyService, CustomerService, $timeout) {

        var vm = this
        vm.initialized = false
        vm.notifications = NotificationsService.notifications
        vm.newNotificationType = "success"

        if (!vm.initialized) {
            MarketingModalsService.getPromoMessage().then(function(response) {
                    if (response.content == "null")
                        return;

                    $timeout(function() {

                        NotificationsService.addNotification({
                            message: response.content,
                            type: "marketing",
                            identifier: response.identifier
                        })

                    }, 10000);

                },
                //No marketing modal? How about some store credit?
                function() {
                    CustomerService.getData().then(function(response) {
                        var credit = parseFloat(response.betabrandStoreCredit).toFixed(2)
                        if (credit > 4.99) {
                            if (response.firstname)
                                var message = "Hello, " + response.firstname + ". "
                            else
                                var message = ""

                            NotificationsService.addNotification({
                                message: message + "Don't forget you have $" + credit + " store credit. Happy shopping!",
                                type: vm.newNotificationType
                            })
                        }
                    })
                })
            vm.initialized = true
        }

        vm.add = function(event, message) {
            event.preventDefault()
            NotificationsService.addNotification({
                message: message,
                type: vm.newNotificationType
            })
        }
    }

})();

BetabrandApp.factory('NotificationsService', ['$timeout', '$log', '$location', '$q',
    function NotificationsService($timeout, $log, $location, $q) {

        return {
            index: 0,
            notifications: {},
            addNotification: function(notification) {
                var i
                if (!notification) {
                    return;
                }
                i = this.index++

                    notification.message = this._decodeMessage(notification.message)


                //set a default ttl if one does not exist
                if (!notification.ttl) {
                    notification.ttl = 8000
                }

                this.notifications[i] = notification
            },
            _decodeMessage: function(msg) {
                //{"messages":{"error":[{"code":400,"message":"Could not apply code"}]}}
                if (msg && msg.messages && msg.messages.error && msg.messages.error[0]) {
                    return msg.messages.error[0].message
                }

                return msg
            },

        }
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("optimizely", optimizely);

    function optimizely($http, $templateCache, $compile, $log, OptimizelyService) {
        var directive = {
            restrict: "A",
            link: linkFunc
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            var test = attr.optimizely

            if (typeof angular.optimizely[test] == "undefined" || !angular.optimizely[test].template) {
                $log.debug("[Optimizely] '" + test + "' is inactive")
                return false;
            }

            $log.debug("[Optimizely] '" + test + "' active")

            var tmpName = "/angular/app/optimizely/" + test + "/" + angular.optimizely[test].template + ".html"
            angular.element(el).css('display', 'none')

            OptimizelyService.getTemplate(tmpName).then(function(tplContent) {
                var compiled = $compile(tplContent)($scope)
                el.replaceWith(compiled)
            })
        }
    }

    optimizely.$inject = ['$http', '$templateCache', '$compile', '$log', 'OptimizelyService'];

})();

BetabrandApp.factory('OptimizelyService', ["$q", "$http", "$log", '$templateCache', '$kookies', "_", "NotificationsService", "$timeout", "ModalService",
    function OptimizelyService($q, $http, $log, $templateCache, $kookies, _, NotificationsService, $timeout, ModalService) {
        var variations = {}
        var ready = false
        var consts = {}

        var _optimizely = function() {
            return (window.optimizely && 'push' in window.optimizely) ? window.optimizely : []
        }

        var _setDefaults = function() {
            //Required for Julian's popup tests. DON'T REMOVE:
            angular.optimizely.popup = {}

            angular.optimizely.blackSheepImages = { id: "original" }
            angular.optimizely.dpypGalleryTest = { id: "original" }
            angular.optimizely.replaceVoted = { id: "original" };
            angular.optimizely.modelStats = { id: "original" }
            angular.optimizely.spmRelatedProducts = { id: "baseline" };
            angular.optimizely.spmCrossSells = { id: "baseline" };
            angular.optimizely.spmSalePage = { id: "spm" };
            angular.optimizely.voteRewardTest = { id: "original" };
            angular.optimizely.commentAfterVote = { id: "original" };
            angular.optimizely.otherProductsOnDpyp = { id: "original" };
            angular.optimizely.showTshirtOffer = { id: "original" };
            angular.optimizely.articleOnStream = { id: "original" };
            angular.optimizely.mcPhotosInGallery = { id: "original" };
            angular.optimizely.squareThumbnails = { id: "original" };
            angular.optimizely.loginModal = { id: "original" };
        }

        return {
            consts: {},
            activate: function(testId) {
                _setDefaults();

                if ($kookies.get("betabrand-filter-internal") == 1)
                    return;


                if (testId)
                    _optimizely().push(["activate"])
                else
                    _optimizely().push(["activate", testId])

                this.setReady(true)
                $log.debug("[Optimizely] Activated optimizely")

            },
            setKeys: function(keys) {
                this.consts = keys || {}
            },
            setVariation: function(testName, value) {
                variations[testName] = value
            },
            variation: function(which) {
                return variations[which]
            },
            setReady: function(which) {
                if (ready == false && which == true)
                    this.handle("initialLoad")

                ready = which
            },
            ready: function() {
                return ready
            },
            getTemplate: function(tmpName) {
                var deferred = $q.defer()

                $http.get(tmpName, { cache: $templateCache }).success(function(tplContent) {
                    deferred.resolve(tplContent)
                }).error(function(response) {
                    deferred.reject(response)
                })

                return deferred.promise
            },
            handle: function(event, data) {
                //Required for Julian's popup tests. DON'T REMOVE:
                var popupTest = angular.optimizely.popup || {}

                var blackSheepTest = angular.optimizely.blackSheepImages || {}
                var replaceTest = angular.optimizely.replaceVoted || {}

                var spmRelatedProducts = angular.optimizely.spmRelatedProducts || {}
                var spmCrossSells = angular.optimizely.spmCrossSells || {}
                var spmSalePage = angular.optimizely.spmSalePage || {}

                var voteRewardTest = angular.optimizely.voteRewardTest || {}

                var otherProductsOnDpypTest = angular.optimizely.otherProductsOnDpyp || {}

                var showTshirtOffer = angular.optimizely.showTshirtOffer || {}
                var loginModal = angular.optimizely.loginModal || {}

                var articleOnStream = angular.optimizely.articleOnStream || {}

                var mcPhotosInGallery = angular.optimizely.mcPhotosInGallery || {}

                var squareThumbnails = angular.optimizely.squareThumbnails || {}

                switch (event) {
                    //Required for Julian's popup tests. DON'T REMOVE:
                    case "getPopupId":
                        if (popupTest.id)
                            return popupTest.id;
                        break;

                    case "mediaGalleryTests":
                        switch (parseInt(data.id)) {
                            case 7627:
                                switch (blackSheepTest.id) {
                                    case 1:
                                        return [{ "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/192.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3565, "height": 2085, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/58.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/101.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/251.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3328, "height": 2096, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/203.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3711, "height": 2170, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/152.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2999, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/177.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 4500, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/109.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/208.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 1150, "height": 473, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/89.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }];
                                        break;
                                    case 2:
                                        return [{ "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/213.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 1150, "height": 672, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/145.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2999, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/135.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2750, "height": 1608, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/32.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/222.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3319, "height": 2080, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/227.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3335, "height": 2071, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/61.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/9.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/27.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/140.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2999, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/221.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2470, "height": 2080, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/183.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 5616, "height": 3284, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/115.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/160.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2999, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }];
                                        break;
                                    case 3:
                                        return [{ "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/160.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2999, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/66.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/182.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 4885, "height": 2857, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/116.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/187.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 5441, "height": 3182, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/143.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2999, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/111.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/29.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/109.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/54.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }];
                                        break;
                                    case 4:
                                        return [{ "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/248.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3343, "height": 2096, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/233.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3335, "height": 2064, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/207.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 1150, "height": 673, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/51.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/141.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2999, "height": 1754, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/236.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3335, "height": 2071, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/234.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3287, "height": 2088, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/175.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 3000, "height": 4500, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }, { "type": "image", "url": "https:\/\/www.betabrand.com\/media\/blacksheep\/124.jpg", "label": "Womens Black Sheep Wool Wrap Sweater", "stats": "false", "width": 2750, "height": 1608, "id": 0, "counts": { "comments": { "count": 0 }, "votes": { "count": 1 } } }];
                                        break;
                                }
                                //Default to the old gallery
                                return [{ "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_28.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_31.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_21_1.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_23.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_22_1.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_34.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_25.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_23_1.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_18_2.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_22.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_27.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_32.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_33.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_36.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_19_2.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_20_2.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_23_2.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_24.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_30.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_35.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }, { "type": "image", "url": "https://www.betabrand.com/media/catalog/product/b/l/black_sheep_wrap_sweater_29.jpg", "label": "", "stats": false, "width": 1150, "height": 673, "counts": { "votes": { "count": 1 } } }];
                                break;
                        }

                        return data.media.gallery;
                        break;

                    case "successVoteCards":
                        return successVoteTest.quantity || 4
                        break;

                    case "replaceVoted":
                        return replaceTest.verb || "Skip";
                        break;
                    case "replaceVoted":
                        return replaceTest.verb || "Skip";
                        break;
                    case "spmCrossSells":
                        return spmCrossSells.id == "spm" ? true : false
                        break;
                    case "spmSalePage":
                        return spmSalePage.id == "spm" ? true : false
                        break;
                    case "spmRelatedProducts":
                        return spmRelatedProducts.id == "spm" ? true : false
                        break;

                    case "voteReward":
                        return voteRewardTest.id == "reward" ? true : false;
                        break;


                    case "otherProductsOnDpyp":
                        return (otherProductsOnDpypTest.id) ? otherProductsOnDpypTest.id : false;
                        break;

                    case "showTshirtOffer":
                        return showTshirtOffer.id == 'showTshirtOffer';
                        break;

                    case "showArticleOnStream":
                        return articleOnStream.id == 'show-article';
                        break;

                    case "showMcPhotosInGallery":
                        return mcPhotosInGallery.id == "show-photos";
                        break;

                    case "useSquareThumbnails":
                        return (squareThumbnails.id == 'square') ? true : false;
                        break;

                    case "loginModal":
                        return (loginModal.id == "new") ? true : false;
                        break;
                }
            },
            getProjects: function() {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: this.consts.PROJECTS_PATH,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            getProject: function() {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: this.consts.PROJECTS_PATH + this.consts.PROJECT_ID,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            getProjectExperiments: function() {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: this.consts.PROJECTS_PATH + this.consts.PROJECT_ID + "/experiments",
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            getExperiment: function(experiment_id) {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: this.consts.EXPERIMENTS_PATH + experiment_id,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            updateExperiment: function(experiment) {
                var deferred = $q.defer()
                var request = $http({
                    method: "PUT",
                    url: this.consts.EXPERIMENTS_PATH + experiment.id,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    },
                    data: {
                        audience_ids: experiment.audience_ids,
                        activation_mode: experiment.activation_mode,
                        description: experiment.description,
                        edit_url: experiment.edit_url,
                        status: experiment.status,
                        custom_css: experiment.custom_css,
                        custom_js: experiment.custom_js,
                        percentage_included: experiment.percentage_included,
                        url_conditions: experiment.url_conditions
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            getExperimentStats: function(experiment_id) {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: this.consts.EXPERIMENTS_PATH + experiment_id + "/stats",
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            createExperiment: function(edit_url, description) {
                var deferred = $q.defer()
                var request = $http({
                    method: "POST",
                    url: this.consts.PROJECTS_PATH + this.consts.PROJECT_ID + "/experiments",
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    },
                    data: {
                        edit_url: edit_url,
                        description: description,
                        activation_mode: "manual"
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            deleteExperiment: function(experiment_id) {
                var deferred = $q.defer()
                var request = $http({
                    method: "DELETE",
                    url: this.consts.EXPERIMENTS_PATH + experiment_id,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            getVariation: function(variation_id) {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: this.consts.VARIATIONS_PATH + variation_id,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            createVariation: function(experiment_id, description, js_component) {
                var deferred = $q.defer()
                var request = $http({
                    method: "POST",
                    url: this.consts.EXPERIMENTS_PATH + experiment_id + "/variations",
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    },
                    data: {
                        description: description,
                        js_component: js_component,
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            deleteVariation: function(variation_id) {
                var deferred = $q.defer()
                var request = $http({
                    method: "DELETE",
                    url: this.consts.VARIATIONS_PATH + variation_id,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            updateVariation: function(variation_id, data) {
                var deferred = $q.defer()
                var request = $http({
                    method: "PUT",
                    data: data,
                    url: this.consts.VARIATIONS_PATH + variation_id,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            getGoals: function() {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: this.consts.PROJECTS_PATH + this.consts.PROJECT_ID + "/goals",
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            getGoal: function(goal_id) {
                var deferred = $q.defer()
                var request = $http({
                    method: "GET",
                    url: this.consts.GOALS_PATH + goal_id,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    }
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            createGoal: function(options) {
                var deferred = $q.defer()
                var request = $http({
                    method: "POST",
                    url: this.consts.PROJECTS_PATH + this.consts.PROJECT_ID + "/goals",
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    },
                    data: options
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
            updateGoal: function(goal_id, options) {
                var deferred = $q.defer()
                var request = $http({
                    method: "PUT",
                    url: this.consts.GOALS_PATH + goal_id,
                    headers: {
                        'Token': this.consts.API_TOKEN,
                        'Content-Type': 'application/json'
                    },
                    data: options
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(error) {
                    deferred.reject(error)
                })
                return deferred.promise
            },
        }
    }
]);

BetabrandApp.factory('OrderService', ['$http', '$rootScope', '$log', '$q', 'TrackingService',
    function($http, $rootScope, $log, $q, TrackingService) {

        function OrderService() {

            var self = this

            self.getOrder = function(id, hash) {
                // get a new defer each request
                var deferred = $q.defer();
                var endpoint = '/api/rest/orders/' + id;

                if (hash) {
                    endpoint = endpoint + "?hash=" + hash
                }

                $http
                    .get(endpoint)
                    .success(function(response) {
                        deferred.resolve(response)
                    })
                    .error(function(response) {
                        deferred.reject(response)
                    })

                return deferred.promise
            }

            self.getAllOrders = function(id) {

                return $http.get('/api/rest/orders/')
            }


            self.getRMA = function(incrementId, email) {

                return $http.get('/api/rest/whiplash/rma/incrementId/' + incrementId + '/email/' + email)
            }
        }

        return new OrderService()
    }
]);

(function() {
    'use strict';
    angular
        .module('BetabrandApp')
        .controller("PageController", pageController);
    pageController.$inject = ["$scope", "PageService"];

    function pageController($scope, PageService) {
        $scope.page = PageService
    }
})();

BetabrandApp.factory('PageService', ['ConfigService', '$log',
    function PageService(ConfigService, $log) {
        var title = "Betabrand"
        var description = ''
        var canonical = window.location.href
        var image = ''
        var bodyClass = 'home'
        var microdataItemType = 'WebPage'

        var _updateAttribute = function(selector, attributeName, attributeValue) {
            if (!document) {
                $log.error('updateMetaAttribute: document is not available!');
                return;
            }

            if (!selector) {
                $log.error('updateMetaAttribute: Either of "name", "httpEquiv", "property" or "charset" must be provided!');
                return;
            }

            var el = document.querySelector(selector);
            if (el && el.setAttribute) {
                el.setAttribute(attributeName, attributeValue);
            }
        }

        _setTitle = function(newTitle) {
            title = newTitle ? newTitle : 'Betabrand | Crowdfunded Clothing | A Global Community Of Collaborators',
                _updateAttribute('meta[name="title"]', 'content', title);
            _updateAttribute('meta[property="og:title"]', 'content', title);

        }

        _setDescription = function(newDescription) {
            description = newDescription || "Home of Dress Pant Yoga Pants, Disco Hoodies, Bike to Work Pants, and tons more. Become a part of the Betabrand Collaborator Community: take photos, submit designs, crowdfund projects."
            _updateAttribute('meta[name="description"]', 'content', description);
            _updateAttribute('meta[property="og:description"]', 'content', description);
        }

        _setCanonical = function(url) {
            canonical = url || "https://www.betabrand.com"
            _updateAttribute('link[rel="canonical"]', 'href', url);
            _updateAttribute('meta[property="og:url"]', 'content', url);
        }

        _setImage = function(url) {
            image = url
            _updateAttribute('meta[property="og:image"]', 'content', image);
        }


        return {

            title: function() { return title },
            description: function() { return description },
            canonical: function() { return canonical },
            image: function() { return image },
            bodyClass: function() { return bodyClass },
            microdataItemType: function() { return microdataItemType },
            setTitle: function(newTitle) { _setTitle(newTitle) },
            setDescription: function(newDescription) { _setDescription(newDescription) },
            setCanonical: function(url) { _setCanonical(url) },
            setImage: function(url) { _setImage(url) },
            updateMetaData: function(metaData) {
                if ("title" in metaData && metaData.title)
                    _setTitle(metaData.title)

                if ("description" in metaData && metaData.description)
                    _setDescription(metaData.description)

                if ("image" in metaData && metaData.image)
                    _setImage(metaData.image)

                if ("canonical" in metaData && metaData.canonical)
                    _setCanonical(metaData.canonical)
            },
            setBodyClass: function(newBodyClass) { bodyClass = newBodyClass ? newBodyClass : 'home' },
            setMicrodataItemType: function(newMicrodataItemType) { microdataItemType = newMicrodataItemType ? newMicrodataItemType : 'WebPage' },
            showMobileMenu: false
        }
    }
]);

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller('CommunityFeaturesController', CommunityFeaturesController);

    CommunityFeaturesController.$inject = ['$scope', '$q', '$location', 'TrackingService', 'PageService', 'CustomerService']

    function CommunityFeaturesController($scope, $q, $location, TrackingService, PageService, CustomerService) {

        var vm = this

        vm.zendeskEnabled = window.zE

        vm.customer = CustomerService

        vm.viewProfile = function() {

            if (vm.customer.data.loggedIn) {

                $location.path("/u/" + (vm.customer.data.urlKey || vm.customer.data.id))

            } else {

                CustomerService.showLoginModal({
                        source: "community features"
                    })
                    .then(function(loggedIn) {
                        if (loggedIn)
                            $location.path("/u/" + (vm.customer.data.urlKey || vm.customer.data.id))
                    })

            }

        }

        vm.viewFeed = function() {

            if (vm.customer.data.loggedIn) {

                $location.path("/")

            } else {

                CustomerService.showLoginModal({
                        source: "community features"
                    })
                    .then(function(loggedIn) {
                        if (loggedIn)
                            $location.path("/")
                    })

            }

        }

        vm.viewDashboards = function() {

            if (vm.customer.data.loggedIn) {

                if (vm.customer.data.designedProducts.length) {
                    $location.path("/u/" + (vm.customer.data.urlKey || vm.customer.data.id))
                } else {
                    $location.path("/submission")
                }

            } else {

                $location.path("/submission")

            }

        }

        vm.activateZendesk = function() {
            if (window.zE !== undefined)
                window.zE.activate()
        }

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            'Source': "Community Features"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType('ItemPage')
        PageService.setBodyClass('community-features-page')

        $scope.$emit('viewLoaded')

    }

})();

(function() {
    'use strict';
    angular
        .module('BetabrandApp')
        .controller("NotFoundController", notFoundController);
    notFoundController.$inject = ["$scope", "ConfigService"];

    function notFoundController($scope, ConfigService) {
        var vm = this

        $scope.categoryId = 36

        $scope.$emit("viewLoaded")

    }
})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("productRecommendations", productRecommendations);

    function productRecommendations() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {

            },
            transclude: true,
            templateUrl: "/angular/app/personalization/recommendations.html",
            link: linkFunc,
            controller: productRecommendationsController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            ctrl.sectionId = attr.sectionId
        }
    }

    productRecommendationsController.$inject = ["$scope", "AssetService", "SailthruService"];

    function productRecommendationsController($scope, AssetService, SailthruService) {

        var vm = this;
        vm.recommendations = {};
        AssetService.waitForLibrary('sailthru').then(activate)

        function activate() {
            SailthruService.getRecommendations(vm.sectionId, 'spm' + vm.sectionId).then(recommendationsComplete, recommendationsFailed);

            function recommendationsComplete(recommendations) {
                vm.recommendations = recommendations;
            }

            function recommendationsFailed() {

            }

        }
    }

})();

(function() {
    'use strict';
    angular
        .module('BetabrandApp')
        .controller("RecommendationsController", RecommendationsController);

    RecommendationsController.$inject = ['$scope', '$q', 'TrackingService', 'PageService', 'products', 'CustomerService', 'ImageService'];

    function RecommendationsController($scope, $q, TrackingService, PageService, products, CustomerService, ImageService) {
        var vm = this
        vm.CustomerService = CustomerService
        vm.formattedThumbnails = ImageService.lazyFormatSrc
        vm.shardUrl = ImageService.formatImgSrc
        vm.products = products
        vm.showFreeShipping = true
        vm.spmSectionId = '9d8c0bca-9af5-11e6-b7c8-002590d1a2f6'

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            'Source': "Recommendations Page"
        }
        trackingDeferred.resolve(trackingData)
        PageService.setMicrodataItemType('ItemPage')
        PageService.setBodyClass('recommendations-page')

        vm.filterSorter = {}
        vm.filterOptions = [
            { "label": "Gender", "attribute": "gender", "position": 1, "active": true },
            { "label": "Category", "attribute": "classification", "position": 2, "active": true }
        ]
        vm.sorterOptions = [
            { "label": "Hot", "attribute": "hotness", "default": true },
            { "label": "Price (Low > High)", "attribute": "prices.final" },
            { "label": "Price (High > Low)", "attribute": "-prices.final" }
        ]

        vm.image = window.location.origin + '/media/catalog/category/referral_header_1.png'

        $scope.$emit('viewLoaded')
    }
})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("spmTrack", spmTrack);

    function spmTrack() {
        var directive = {
            restrict: "A",
            link: linkFunc,
            controller: spmTrackController,
            controllerAs: "vma",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            ctrl.url = attr.spmTrack
            ctrl.sectionId = attr.spmSection

            el.bind('click', elementClicked);

            function elementClicked() {
                ctrl.trackClick()
            };
        }

    }

    spmTrackController.$inject = ["$scope", "AssetService", "SailthruService"];

    function spmTrackController($scope, AssetService, SailthruService) {

        var vma = this;
        vma.recommendations = {};
        AssetService.waitForLibrary('sailthru').then(activate)

        function activate() {
            SailthruService.trackImpression(vma.sectionId, vma.url)
        }

        vma.trackClick = function() {
            SailthruService.trackClick(vma.sectionId, vma.url)
        }
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("poll", poll);

    function poll() {
        var directive = {
            restrict: "E",
            replace: true,
            scope: {
                pollId: '=',
                pollType: '=',
                pollPoller: '=',
                pollData: '='
            },
            transclude: true,
            templateUrl: "/angular/app/polls/poll.html",
            link: linkFunc,
            controller: pollController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    pollController.$inject = ["$scope", "PollsService", "CustomerService", "_", "$location", "$document", "$timeout", "$filter", "$rootScope", "$log"];

    function pollController($scope, PollsService, CustomerService, _, $location, $document, $timeout, $filter, $rootScope, $log) {
        var vm = this;

        vm.message = '';
        vm.status = '';
        vm.poll = false;
        vm.vote = vote;

        // If pollData was passed in, then bypass getting the poll from the API
        if (vm.pollData) {
            _setUpPoll(vm.pollData);
        } else {
            _getPoll(vm.pollId);
        }

        function vote(answerId) {
            if (!CustomerService.data.loggedIn) {
                CustomerService.showLoginModal({ "action": "vote", source: "poll" + vm.poll.id, submission: vm.submission }).then(function() {
                    if (CustomerService.data.loggedIn) {
                        _vote(vm.poll.id, answerId);
                    }
                });
            } else {
                _vote(vm.poll.id, answerId);
            }
        }

        function _vote(pollId, answerId) {
            if (!vm.poll.customerVote) {
                vm.poll.customerVote = answerId;
            }
            PollsService.vote(pollId, answerId).then(
                    function(response) {
                        vm.status = 'success';
                        // Increment vote count for the view.
                        vm.poll.votesCount++;
                        $rootScope.$broadcast('pollVoteProductVote', vm.poll.id);
                    },
                    function(response) {
                        var error = response.data.messages.error[0];
                        if (error !== undefined) {
                            vm.status = 'error';
                            vm.message = 403 === error.code ? 'You have already voted on this poll. Thanks again!' : 'There was a problem voting on this poll. Make sure you are logged in and try again.';
                        }
                        _getCustomerVote(pollId);
                    })
                .then(function() {
                    $timeout(function() {
                        vm.message = '';
                        vm.status = '';
                    }, 5000);
                })
        }

        function _getCustomerVote(pollId) {
            PollsService.getCustomerVote(pollId).then(
                function(response) {
                    vm.poll.customerVote = response.data;
                },
                function(response) {
                    $log.debug('failed to get customer vote');
                });
        }

        function _getPoll(pollId) {
            PollsService.getPoll(pollId).then(
                function(response) {
                    _setUpPoll(response.data);
                });
        }

        function _hexToRgb(hex) {
            hex = hex || ""
                // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
            var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, function(m, r, g, b) {
                return r + r + g + g + b + b;
            });

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }

        function _getPerceivedBrightness(c) {
            if (!c) return 0;

            return parseInt(Math.sqrt(
                c.r * c.r * .299 +
                c.g * c.g * .587 +
                c.b * c.b * .114));
        }

        function getVoteFromQuery() {
            var params = $location.search()
            if (params.pollId && params.answerId) {
                $timeout(function() {
                    $document.scrollTo(angular.element(document.querySelector('.poll-' + params.pollId)), 200, 500).then(function() {
                        _vote(params.pollId, params.answerId)
                    })
                }, 2000);
            }
        }

        function _setUpPoll(poll) {

            //Convert date
            poll.datePosted = $filter('date')(new Date(poll.datePosted), 'mediumDate');

            //if closed is a string, covert to boolean
            if (typeof(poll.closed) === "string") {
                poll.closed = poll.closed == "1";
            }

            // Convert Answers to an Array and Shuffle
            if (poll.answers) {
                poll.answers = _.shuffle(_.values(poll.answers));
            }

            //Set poll type
            if (!_.every(poll.answers, 'imageUrl') && !_.every(poll.answers, 'color')) {
                poll.type = 'list';
            } else {
                poll.type = 'grid';
            }

            //Set poll image text color
            _.each(poll.answers, function(answer) {
                if (answer.color) {
                    var colorRGB = _hexToRgb(answer.color),
                        brightness = _getPerceivedBrightness(colorRGB);
                    answer.textColor = brightness > 130 ? "dark" : "light";
                }
            })

            vm.poll = poll;

            //Check is this customer voted on this poll and set answer
            CustomerService.getData().then(function(response) {
                if (response.loggedIn) {
                    _getCustomerVote(poll.id);
                }
            });

            //Vote on poll using url params
            getVoteFromQuery();
        }

        $scope.$on('loggedIn', function(response) {
            if (!vm.poll.customerVote) {
                _getCustomerVote(vm.pollId);
            }
        });

        $scope.$on('loggedOut', function(response) {
            vm.poll.customerVote = false;
        });
    }
})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller("PollsPageController", pollsPageController);

    pollsPageController.$inject = ["$scope", "$location", "PollsService", "$routeParams", "PageService"];

    function pollsPageController($scope, $location, PollsService, $routeParams, PageService) {
        var vm = this;

        PollsService.getPoll($routeParams.pollId).then(function(response) {
                vm.poll = response.data;
                PageService.setBodyClass('poll__page--' + vm.poll.id);
                PageService.setTitle('Betabrand | ' + vm.poll.title);
                $scope.$emit('viewLoaded');
            },
            function(error) {
                $location.path("/404");
            })
    }
})();

BetabrandApp.factory('PollsService', ['$http', '$location', '$log',
    function PollsService($http, $location, $log) {
        return {
            getPoll: function(id) {
                return $http({
                    method: 'GET',
                    url: '/api/rest/betapoll/poll/' + id
                });
            },

            vote: function(pollId, answerId) {
                $log.debug('Voting on poll', pollId);

                return $http({
                    method: 'POST',
                    url: '/api/rest/betapoll/vote/poll',
                    data: {
                        poll_id: pollId,
                        poll_answer_id: answerId
                    }
                });
            },

            getProductPolls: function(productId) {
                return $http({
                    method: 'GET',
                    url: '/api/rest/betapoll/product/' + productId
                });
            },

            getCustomerVote: function(pollId) {
                return $http({
                    method: 'GET',
                    url: '/api/rest/betapoll/vote/poll/' + pollId
                });
            }
        }
    }
]);
(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbPrism", bbPrism);

    function bbPrism() {
        var directive = {
            restrict: "EA",
            scope: {
                template: "@"
            },
            link: linkFunc,
            controller: bbPrismController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            $scope.showSource = false

            var source = ctrl.$templateCache.get(ctrl.template);

            // replacing initial tabs with smileys, for easier tracking.
            var indentCount,
                formattedSource = []
            var sourceList = source.replace(/\t/g, '☺').replace(/  /g, '☺').split(/\n/).filter(function(n) {
                    // Must also trim leading or ending lines.
                    if ((n != (undefined | "")) && (n.length !== (n.split("☺").length - 1))) {
                        return n
                    }
                })
                // Remove empty array elements unless we're deliberately showing whitespace lines, and putting into an array to make line structure clear before reformatting.
            if (sourceList.length) {
                indentCount = (sourceList[0].split("☺").length - 1)
                for (var i = 0; i < sourceList.length; i++) {
                    // Use substring if we can expect automatic output to be formatted.
                    formattedSource.push(sourceList[i].substring(indentCount).replace(/\☺/g, "  "))
                }
                formattedSource = formattedSource.join('\n')
            }

            $scope.code = formattedSource

            var createPre = angular.element('<pre class="language-markup" ng-class="{\'is-active\':showSource}"><code>{{code}}</code></pre>')
            var sourceButton = angular.element('<button class="button button-outline button-small show-source" ng-click="toggleSource()"><i class="fa fa-code"></i> Source</button>')

            el.append(createPre)
            ctrl.$compile(createPre)($scope)

            el.append(sourceButton)
            ctrl.$compile(sourceButton)($scope)

            ctrl.$timeout(function() {
                Prism.highlightElement(el.find("code")[0])
            }, 0)

            $scope.toggleSource = function() {
                $scope.showSource = !$scope.showSource
            }

        }
    }

    bbPrismController.$inject = ["$scope", "$timeout", "$compile", "$templateCache"];

    function bbPrismController($scope, $timeout, $compile, $templateCache) {

        var vm = this;
        vm.$compile = $compile;
        vm.$timeout = $timeout;
        vm.$templateCache = $templateCache;

    }

})();

/**
 * CrosssellDirective
 *
 * NOTE: This directive will track Views on link, so don't render it until it is displayed
 */

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("crosssell", crosssell);

    function crosssell() {
        var directive = {
            restrict: 'E',
            replace: true,
            templateUrl: '/angular/app/product/crosssell.html',
            link: linkFunc,
            controller: crosssellController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attrs, ctrl) {

            var tracked = false

            if ($scope.product) {

                $scope.isInView = function(inview, inviewpart, event) {

                    if (!tracked) {
                        ctrl.TrackingService.trackEvent("View Cross Sell", ctrl._.merge({ 'Source': $scope.source }, ctrl.TrackingService.buildProductTrackingData($scope.product)))
                        tracked = true
                    }
                }

                el.on("click", function() {
                    // Analytics: Set up Page Tracking Data
                    var trackingData = ctrl.TrackingService.buildProductTrackingData($scope.product)
                    trackingData['Source'] = $scope.source
                    ctrl.TrackingService.trackEvent("Click Cross Sell", trackingData)
                })
            }


        }
    }

    crosssellController.$inject = ["$scope", "TrackingService", "_", "ImageService"];

    function crosssellController($scope, TrackingService, _, ImageService) {
        var vm = this
        vm.TrackingService = TrackingService
        vm.formattedThumbnails = ImageService.lazyFormatSrc
        vm._ = _
    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('crowdfundingPriceAdjust', crowdfundingPriceAdjust);

    function crowdfundingPriceAdjust() {
        var directive = {
            restrict: 'A',
            replace: false,
            link: linkFunc,
            controller: crowdfundingPriceAdjustController,
            scope: {
                crowdfundingPriceAdjust: "="
            }
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    crowdfundingPriceAdjustController.$inject = ['$scope', 'CustomerService', '$rootScope']

    function crowdfundingPriceAdjustController($scope, CustomerService, $rootScope) {

        var product = $scope.crowdfundingPriceAdjust
        if ((product.crowdfundingActivated || product.state == "crowdfunding") && product.prices) {
            adjustPrice()
            $scope.$on('loggedIn', adjustPrice)
            $scope.$on('loggedOut', adjustPrice)
        }

        function adjustPrice() {
            CustomerService.getData().then(function() {
                var discount = 15;

                if (CustomerService.hasVoted('submission', product.submissionId)) {
                    discount = 30;
                }
                product.prices.discount_percentage = discount
                var newPrice = parseFloat(product.prices.old) - (parseFloat(product.prices.old) * discount / 100)
                product.prices.discount_amount = parseFloat(product.prices.old) - newPrice
                product.prices.discount = newPrice
                product.prices.final = parseFloat(newPrice).toFixed(2)

                $rootScope.$broadcast('filterSorterInit')
            })
        }

    }
})();



(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('productCard', productCard);

    function productCard() {
        var directive = {
            restrict: 'E',
            replace: false,
            scope: {
                product: "=",
                index: "@",
                category: "=",
                isThinkTankCategory: "=",
                useCanonical: "=",
                activity: "=",
                activityData: "=",
                activityPosition: "=",
                mcTakeoverId: "=?"
            },
            templateUrl: '/angular/app/product/product-card.html',
            link: linkFunc,
            controller: productCardController,
            controllerAs: 'vm',
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            // var dimensions = [{screenWidth:320, imageWidth:320}, {screenWidth:480, imageWidth:480}];
            var dimensions = [{ screenWidth: 480, imageWidth: 480 }, { screenWidth: 680, imageWidth: 680 }, { screenWidth: 813, imageWidth: 813 }];
            if (!ctrl.activity) {
                dimensions = [{ screenWidth: 480, imageWidth: 480 }, { screenWidth: 680, imageWidth: 680 }];
            }

            // Only show the square themnail test for products, not submissions. Finding a key that's only available on submissions to filter
            var isProduct = ("isVisible" in ctrl.product) ? false : true
            ctrl.square = (ctrl.optimizely.handle("useSquareThumbnails") && isProduct) ? true : false
                // If it's a product and the square test is on, rewrite the thumbnail url to look for the sqaure version. The square version should have the same base file name
            var image = ctrl.square ? "https://static1.betabrands.com/media/thumbnails-square" + ctrl.product.thumbnail.match("\/[^\/]+$")[0] : ctrl.product.thumbnail

            ctrl.thumbnail = ctrl.product.formattedThumbnails(dimensions, image);

        }
    }

    productCardController.$inject = ['$scope', 'ModalService', 'TrackingService', '$rootScope', 'ImageService', '$window', '_', 'OptimizelyService'];

    function productCardController($scope, ModalService, TrackingService, $rootScope, ImageService, $window, _, OptimizelyService) {
        var vm = this;
        vm.root = $rootScope;
        vm._ = _;
        vm.optimizely = OptimizelyService;

        vm.showQuickLook = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/quicklook/quick-look.html",
                controller: "QuickLookModalController as vm",
                inputs: {
                    product: vm.product,
                    category: vm.category,
                    useCanonical: vm.useCanonical
                }
            }).then(function(modal) {
                modal.close.then(function(result) {});
            });
        };

        vm.getTrackingData = function() {
            var trackingData = TrackingService.buildProductTrackingData(vm.product);
            trackingData['Source'] = ('crowdfunding' == vm.product.state) ? 'Crowdfunding Product Page' : (vm.product.state == 'voting' ? 'Voting Page' : 'Product Page');
            return trackingData;
        };

        vm.product.formattedThumbnails = ImageService.lazyFormatSrc;
        vm.link = (vm.useCanonical) ? vm.product.canonicalUrl : vm.product.url
        vm.link = vm.link + ((vm.mcTakeoverId) ? "?m=" + vm.mcTakeoverId : "")
    }
})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .filter('floor', productCardFilterFloor);

    function productCardFilterFloor() {
        return function(input) {
            return Math.floor(input)
        }
    }


})();

(function() {

    "use strict";

    ProductController.$inject = ["$scope", "$location", "$q", "ProductService", "CartService", "CategoryService", "TrackingService", "LookupService", "ModalService", "$rootScope", "$window", "_", "ModelCitizenService", "PageService", "CustomerService", "$timeout", "$sce", "OptimizelyService", "$document", "ImageService", "hotkeys", "$route", "AssetService", "APP_CONFIG", "SailthruService"]

    function ProductController($scope, $location, $q, ProductService, CartService, CategoryService, TrackingService, LookupService, ModalService, $rootScope, $window, _, ModelCitizenService, PageService, CustomerService, $timeout, $sce, OptimizelyService, $document, ImageService, hotkeys, $route, AssetService, APP_CONFIG, SailthruService) {

        var vm = this


        vm._ = _
        vm.templateUrl = LookupService.templateUrl
        vm.formatImages = ImageService.lazyFormatSrc
        vm.showNavigationTip = false
        vm.CustomerService = CustomerService
        vm.commentHighlights = {} //To highlight designers or whatever else we decide to highlight in the future
            // Route Resolve
        vm.product = $route.current.locals.lookupResolve.product
        vm.modelcitizen = $route.current.locals.lookupResolve.modelcitizen
        vm.activeCommentTab = "product"
        vm.activeTab = "details"
        vm.tabs = {
            'productTab': "details"
        }
        vm.metaData = {
            title: vm.product.name,
            image: vm.product.thumbnail,
            description: vm.product.shortDescription ? vm.product.shortDescription : false,
            canonical: vm.product.canonicalUrl ? vm.product.canonicalUrl : false
        }

        vm.showTshirtOffer = false;

        if (OptimizelyService.handle('showMcPhotosInGallery')) {
            ModelCitizenService.getPhotosByTag(vm.product.name, 50).then(function(response) {
                if (response.data.length == 0) {
                    return;
                }

                response.data = _.filter(response.data, function(elm) {
                    return typeof elm.customer == "object"
                })
                response.data = response.data.reverse().slice(0, 3);

                vm.mcImages = response.data;
                var idx = 1;
                angular.forEach(vm.mcImages, function(image) {
                    image.image = image.image.replace("betabrand.local.betabrand.io:32769", "betabrand.com")
                    var mgImage = {
                        type: "mc",
                        photo: image
                    }
                    vm.product.media.gallery.splice(idx, 0, mgImage);
                    idx = idx + 2
                })
            });
        }

        //Handle optimizely free t-shirt test
        if (OptimizelyService.handle('showTshirtOffer')) {
            vm.showTshirtOffer = (vm.product.state != 'crowdfunding' && vm.product.categoryUrlMap[49]) || vm.product.categoryUrlMap[72];
        }

        //Handle the optimizely media gallery tests
        vm.product.media.gallery = OptimizelyService.handle("mediaGalleryTests", vm.product)

        // send a promise to the Tracking service for page tracking data
        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)

        // check local storage for nav tip

        if ('localStorage' in window && window['localStorage'] !== null) {
            if (!localStorage['viewedProductNavigationTip']) {
                vm.showNavigationTip = true
            }
        }

        if (vm.modelcitizen && vm.product.media.gallery.length) {
            var newMedia = {
                type: "image",
                url: vm.modelcitizen.image,
                label: vm.modelcitizen.caption
            }
            vm.product.media.gallery.unshift(newMedia)

            //update page metadata for mc hijack
            PageService.setImage(vm.modelcitizen.image)
            PageService.setTitle("Betabrand Unveils Its Next Supermodel")
            PageService.setDescription("The fashion world is already abuzz over this dashing new sensation!")
            TrackingService.track('View Model Citizen Photo')
        }

        _.each(vm.product.media.gallery, function(image) {

            if (image.type == "image") {
                image.ratio = (image.width && image.height) ? ((image.height / image.width) * 100) + "%" : "58.5106383%"
            } else if (image.type == "video") {
                image.ratio = "56.25%"
            }

        })

        vm.product.videos = _.filter(vm.product.media.gallery, function(media) {
            return media.videoType == 'story'
        });

        angular.forEach(vm.product.designers, function(designer) {
            if (!designer.id)
                return;
            vm.commentHighlights[designer.id] = 'designer'
        })

        // Page tracking
        // ACHTUNG!: This is used to fire GTM events
        var trackingData = TrackingService.buildProductTrackingData(vm.product)
        trackingData['Source'] = ('crowdfunding' == vm.product.state) ? 'Crowdfunding Product Page' : (vm.product.state == 'voting' ? 'Voting Page' : 'Product Page')
        trackingDeferred.resolve(trackingData)
        TrackingService.track('updateProductData', vm.product)

        var categoryId = CategoryService.id

        if (LookupService.categoryId) {
            categoryId = LookupService.categoryId
        } else {
            //Get products from the default category
            if (vm.product.breadcrumbs && vm.product.breadcrumbs.default) {
                var categories = vm.product.breadcrumbs.default;
                categoryId = categories[Object.keys(categories)[Object.keys(categories).length - 1]].id //Get the last property of an object
            } else {
                // Force /shop category if there isn't a category found
                categoryId = 99
            }
        }

        // track category Id if it hasn't been (eg: initial page load)
        if (!CategoryService.id) {
            TrackingService.track('updateCategoryData', { id: categoryId })
        }

        var initArrowNavigation = function() {
            vm.loadNavigationProductImage()


            Mousetrap.unbind('right')
            Mousetrap.unbind('left')

            hotkeys.bindTo($scope)
                .add({
                    combo: 'right',
                    description: 'Next Product',
                    callback: function() {
                        vm.loadNextProduct()
                    }
                })
                .add({
                    combo: 'left',
                    description: 'Previous Product',
                    callback: function() {
                        vm.loadPreviousProduct()
                    }
                })

        }

        ProductService.getProductsForCategoryId(categoryId, 7, "card").then(function(products) {
            // Remove current product from related products
            vm.categoryProducts = products

            if (products.length)
                initArrowNavigation()

            vm.relatedProducts = _.without(products, _.find(products, {
                id: vm.product.id
            }))

            vm.relatedProducts = vm.shuffleArray(vm.relatedProducts)


        })

        // -> Fisher–Yates shuffle algorithm
        vm.shuffleArray = function(array) {
            var m = array.length,
                t, i;

            // While there remain elements to shuffle
            while (m) {
                // Pick a remaining element…
                i = Math.floor(Math.random() * m--);

                // And swap it with the current element.
                t = array[m];
                array[m] = array[i];
                array[i] = t;
            }

            return array;
        }

        vm.setUpMicrodata = function() {
            vm.microdata = {}

            if (vm.product.state == "in-stock") {
                vm.microdata.availability = "InStock"
            } else if (vm.product.state == "out-of-stock") {
                vm.microdata.availability = "OutOfStock"
            } else {
                vm.microdata.availability = "PreOrder"
            }

            var crumbs = vm.breadcrumbs()
            var category = []
            angular.forEach(crumbs, function(value, key) {
                category.push(value.label)
            })

            vm.microdata.category = category.join(" > ")

        }

        vm.showMobileBuybar = function() {
            $rootScope.mobileBuybar = true
        }

        vm.hideMobileBuybar = function() {
            $rootScope.mobileBuybar = false
        }

        vm.addSimpleProductToCart = function(item) {

            CartService.addProduct(angular.copy(item)).then(
                function(response) {

                },
                function(error) {

                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })

                }
            )

            CartService.showCart = true
            $document.unbind('keydown')

        }

        vm.breadcrumbs = function() {
            if (vm.product == null)
                return

            if (typeof vm.product.breadcrumbs == "undefined")
                return

            if (typeof vm.product.breadcrumbs[CategoryService.id] !== "undefined") {
                return vm.product.breadcrumbs[CategoryService.id]
            } else if (LookupService.categoryId) {
                return vm.product.breadcrumbs[LookupService.categoryId]
            }

            return vm.product.breadcrumbs.default
        }

        vm.addToCart = function(item) {
            CartService.addProduct(angular.copy(item))
            CartService.showCart = true
        }

        vm.showReferralModal = function(id) {
            $rootScope.$broadcast('toggleModal')
            ModalService.showModal({
                templateUrl: "/angular/app/modal/referrals/referral-modal.html",
                controller: "ReferralModalController",
                inputs: {
                    productId: id
                }
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        vm.showQuestionsModal = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/product/questions-modal.html",
                controller: "QuestionsModalController as vm",
                inputs: {
                    product: vm.product
                }
            }).then(function(modal) {
                modal.close.then(function(result) {
                    // console.log("Closed modal")
                })
            })
        }

        vm.showStats = function() {
            vm.statsView = !vm.statsView
        }

        vm.changeTab = function(tab) {
            if (tab == "details") {
                vm.activeTab = "details"
            }
            if (tab == "dashboard") {
                TrackingService.trackEvent('View Dashboard')
                vm.activeTab = "dashboard"
            }
        }

        vm.twitterReady = false;

        AssetService.waitForLibrary('twitter').then(function() {
            vm.twitterReady = true;
        })

        vm.changeProductTab = function(tab) {
            vm.tabs.productTab = tab
        }

        $scope.$on("initArrowNavigation", function() {
            $timeout(function() {
                initArrowNavigation()
            }, 200);
        })

        vm.loadPreviousProduct = function() {
            var index = _.findIndex(vm.categoryProducts, { "id": vm.product.id })
            index--
            var previous = (index >= 0) ? vm.categoryProducts[index] : vm.categoryProducts[vm.categoryProducts.length - 1]
            var url = new URL(previous.url)
            $location.url(url.pathname)
        }

        vm.loadNextProduct = function() {
            var index = _.findIndex(vm.categoryProducts, { "id": vm.product.id })
            index++
            var next = (index <= (vm.categoryProducts.length - 1)) ? vm.categoryProducts[index] : vm.categoryProducts[0]
            var url = new URL(next.url)
            $location.url(url.pathname)
        }

        vm.loadNavigationProductImage = function() {
            var index1 = _.findIndex(vm.categoryProducts, { "id": vm.product.id })
            index1++
            var next = (index1 <= (vm.categoryProducts.length - 1)) ? vm.categoryProducts[index1] : vm.categoryProducts[0]
            vm.nextProductImage = next.thumbnail

            var index2 = _.findIndex(vm.categoryProducts, { "id": vm.product.id })
            index2--
            var previous = (index2 >= 0) ? vm.categoryProducts[index2] : vm.categoryProducts[vm.categoryProducts.length - 1]
            vm.previousProductImage = previous.thumbnail
        }

        vm.hideNavigationTip = function() {
            vm.showNavigationTip = false
            if ('localStorage' in window && window['localStorage'] !== null) {
                localStorage["viewedProductNavigationTip"] = true
            }

        }

        vm.showStats = function() {
            vm.statsView = !vm.statsView
        }

        vm.changeTab = function(tab) {
            if (tab == "details") {
                vm.activeTab = "details"
            }
            if (tab == "dashboard") {
                TrackingService.trackEvent('View Dashboard')
                vm.activeTab = "dashboard"
            }
        }

        PageService.setTitle(vm.product.title)
        PageService.setDescription(vm.product.description)
        PageService.setCanonical(vm.product.canonicalUrl)
        PageService.setImage(vm.product.thumbnail)

        PageService.updateMetaData(vm.metaData)
        PageService.setBodyClass('product-page')
        PageService.setMicrodataItemType('ItemPage')

        angular.element($window).triggerHandler('scroll');
        $scope.$emit('viewLoaded')

        vm.setUpMicrodata()

        var spmRelatedTestActive = OptimizelyService.handle("spmRelatedProducts")
        vm.spmRelatedProducts = false;
        vm.spmSectionId = APP_CONFIG.spmConfig && APP_CONFIG.spmConfig.relatedProductsSectionId ? APP_CONFIG.spmConfig.relatedProductsSectionId : "";
        if (spmRelatedTestActive && vm.spmSectionId) {
            var getSailthruRecommendations = function() {
                SailthruService.getRecommendations(vm.spmSectionId, 'cart-recommendations', { context_key: vm.product.canonicalUrl }).then(function(response) {
                    vm.spmRelatedProducts = response;
                    console.log("SPM Related Products")
                })
            }
            AssetService.waitForLibrary('sailthru').then(getSailthruRecommendations)
        }

    }

    angular
        .module("BetabrandApp")
        .controller("ProductController", ProductController);

})();

(function() {
    'use strict';

    angular
        .module("BetabrandApp")
        .filter('floor', function() {
            return function(input) {
                return Math.floor(input)
            }
        })

})();

(function() {
    'use strict';

    angular
        .module("BetabrandApp")
        .filter('dpypName', function() {
            return function(input) {
                if (input) {
                    if (input.indexOf('Dress Pant Yoga Pants') > -1) {
                        return input.substr(0, input.indexOf(" Dress Pant Yoga Pants")).replace("|", "•") + "<span>Dress Pant Yoga Pants</span>"
                    }
                    if (input.indexOf('Travel Yoga Pants') > -1) {
                        var title = input.substr(0, input.indexOf(" Travel Yoga Pants")).replace("|", "•")
                        if (title.substr(title.length - 2, title.length - 1) == ' •') {
                            title = title.substr(0, title.length - 2)
                        }
                        return title + "<span>Travel Yoga Pants</span>"

                    }
                    return input
                }
                return false
            }
        })
        .filter('capitalize', function() {
            return function(input, scope) {
                if (input != null)
                    input = input.toLowerCase()
                return input.substring(0, 1).toUpperCase() + input.substring(1)
            }
        })
        .filter('titlecase', function() {
            return function(s) {
                s = (s === undefined || s === null) ? '' : s
                return s.toString().toLowerCase().replace(/\b([a-z])/g, function(ch) {
                    return ch.toUpperCase()
                })
            }
        })

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("productGallery", productGallery);

    function productGallery() {
        var directive = {
            restrict: "E",
            scope: {
                collection: "=?",
                ids: "=?",
                categoryId: "=?",
                limit: "=?",
                inStock: "@",
                mcTakeoverId: "=?"
            },
            templateUrl: "/angular/app/product/productGallery.html",
            link: linkFunc,
            controller: productGalleryController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attrs, ctrl) {

        }
    }

    productGalleryController.$inject = ["$scope", "ProductService", "_"];

    function productGalleryController($scope, ProductService, _) {

        var vm = this

        vm._ = _
        vm.productLimit = vm.limit || 100

        if (vm.ids) {
            var collection = new Array()
            angular.forEach(vm.ids, function(id) {
                ProductService.getProduct(id).then(function(product) {
                    collection.push(product)
                })
            })
            vm.collection = collection
        } else if (vm.categoryId) {
            var page_size = vm.limit || null
            ProductService.getProductsForCategoryId(vm.categoryId, page_size).then(function(products) {
                vm.collection = products
            })
        } else if (vm.collection) {
            if (vm.inStock) {
                // Remove out of stock products
                angular.forEach(vm.collection, function(product, index) {
                    if (product.state == 'out-of-stock') {
                        vm.collection.splice(index, 1)
                    }
                })
            }
        }

    }

})();

BetabrandApp.factory('ProductService', ['$http', '$q', '$log', '$location', 'TrackingService', 'OptimizelyService', '$kookies',
    function($http, $q, $log, $location, TrackingService, OptimizelyService, $kookies) {
        function ProductService() {

            var self = this

            //  Returns a promise which gets the product data
            self.getProduct = function(id) {
                var deferred = $q.defer()

                $http({
                        method: "get",
                        url: '/api/rest/products/' + id,
                        cache: true
                    })
                    .success(function(data) {
                        if (!data.url) {
                            data.url = data.canonicalUrl;
                        }

                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            //ids is an array of ids
            //returns array of product objects
            self.getProducts = function(ids, view, context) {
                if (typeof ids == "string" || typeof ids == "number") {
                    ids = [ids]
                }

                ids = (ids || [])

                var deferred = $q.defer()
                if (ids.length) {
                    var viewBase = view || "card";
                    var contextBase = context || "min";

                    var queryString = "?id[]=" + ids.join("&id[]=") + "&view=" + viewBase + "&context=" + contextBase;

                    $http({
                            method: "get",
                            url: '/api/rest/productsbyid' + queryString,
                            cache: true
                        }).success(function(data) {
                            angular.forEach(data, function(elm, i) {
                                if (!elm.url) {
                                    elm.url = elm.canonicalUrl;
                                }
                            })
                            deferred.resolve(data)
                        })
                        .error(function(data) {
                            deferred.reject(data)
                        })
                } else {
                    deferred.resolve([]);
                }
                return deferred.promise
            }

            self.getProductsForCategoryId = function(category_id, page_size, view, context) {
                // card or full

                var view = view || "card"

                var queryString = "?category_id=" + category_id + "&view=" + view;

                if (page_size) {
                    queryString += ('&pageSize=' + page_size)
                }

                if (context) {
                    queryString += ("&context=" + context)
                }

                var deferred = $q.defer()


                $http({
                    method: "get",
                    url: '/api/rest/products/' + queryString,
                    cache: true
                }).success(function(data) {
                    // Set up URL as the URL we have from categoryUrlMap if not already set
                    angular.forEach(data, function(elm, i) {
                        if (!elm.url) {
                            if ((typeof elm.categoryUrlMap == 'object') && (category_id in elm.categoryUrlMap)) {
                                elm.url = elm.categoryUrlMap[category_id];
                            } else {
                                elm.url = elm.canonicalUrl;
                            }
                        }
                    })
                    deferred.resolve(data)
                }).error(function(data) {
                    deferred.reject(data)
                })
                return deferred.promise
            }

            self.getProductRecommendations = function(tags) {

                var hid = $kookies.get('sailthru_hid') || "generic";
                var url = "/api/rest/products/recommend/" + hid;

                if (tags) {
                    url += "/" + tags
                }

                return $http({
                    method: "get",
                    url: url
                })
            }

            /**
             * submitFeedback
             * @param type  String: question, restock
             * @param data
             * @returns {*}
             */
            self.submitFeedback = function(type, data) {
                var deferred = $q.defer()
                $http({
                    method: "post",
                    url: "/api/rest/feedback/" + type,
                    data: data
                }).success(function(response) {
                    deferred.resolve(response)
                }).error(function(response) {
                    $log.error("error: feedback/" + type, response);
                    deferred.reject(response)
                })
                return deferred.promise
            }
        }

        return new ProductService()
    }
]);

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .directive("questionsForm", questionsForm);

    function questionsForm() {
        var directive = {
            restrict: "EA",
            scope: {
                product: "="
            },
            transclude: true,
            templateUrl: "/angular/app/product/questions-form.html",
            link: linkFunc,
            controller: questionsFormController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    questionsFormController.$inject = ["$scope", "TrackingService", "CustomerService", "ProductService", "NotificationsService"];

    function questionsFormController($scope, TrackingService, CustomerService, ProductService, NotificationsService) {

        var vm = this;

        vm.data = {
            productId: vm.product.id
        }

        CustomerService.getData().then(function(response) {
            if (!vm.data.email && response.email) {
                vm.data.email = response.email
            }

        })

        vm.submitQuestion = function(event, form) {
            //vm.product is inherited from the parent QuestionsModalController vm
            if (form.$valid) {
                vm.data.productId = vm.product.id
                ProductService.submitFeedback('question', vm.data).then(function() {
                    $scope.$parent.vm.close()
                    TrackingService.trackEvent('Submit a Question')
                    NotificationsService.addNotification({
                        message: "Thank you for writing. We'll get back to you soon.",
                        type: "success"
                    })
                }, function(error) {
                    NotificationsService.addNotification({
                        message: error,
                        type: "error"
                    })
                })

            }
        }

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbProgress", bbProgress);

    function bbProgress() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {
                variety: "@",
                percent: "@",
                label: "@",
                daysLeft: "@"
            },
            transclude: true,
            templateUrl: "/angular/app/progress/progress.html",
            link: linkFunc,
            controller: bbProgressController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    bbProgressController.$inject = ["$scope"];

    function bbProgressController($scope) {

        var vm = this;

    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("ReferralsController", ReferralsController);

    ReferralsController.$inject = ["$scope", "$q", "TrackingService", "PageService", "$routeParams"]

    function ReferralsController($scope, $q, TrackingService, PageService, $routeParams) {

        var vm = this
        vm.email = $routeParams.email
        vm.productId = $routeParams.productId
        vm.souce = $routeParams.source

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            'Source': "Referrals page"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType("ItemPage")
        PageService.setBodyClass("Referrals-page")

        $scope.$emit("viewLoaded")

    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive("referralsForm", referralsForm);

    function referralsForm() {
        var directive = {
            restrict: 'E',
            replace: true,
            scope: {
                ngModel: '=',
                productId: '=?',
                productName: '=?',
                email: '=?',
            },
            templateUrl: '/angular/app/referrals/referrals-form.html',
            link: linkFunc,
            controller: referralsFormController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    referralsFormController.$inject = ["$scope", "ReferralsService", "$rootScope", "$document", "$timeout", "CustomerService", "TrackingService", "AssetService", "NotificationsService", "_"];

    function referralsFormController($scope, ReferralsService, $rootScope, $document, $timeout, CustomerService, TrackingService, AssetService, NotificationsService, _) {
        var vm = this;
        AssetService.loadJs("//www.google.com/recaptcha/api.js?onload=vcRecaptchaApiLoaded&render=explicit", 'recaptcha')

        vm.reCatpchaKey = "6Ld2d_8SAAAAAJ4lxnLK8v-mOrrDxjyzZtdsA3UQ";
        vm.customer = CustomerService;
        vm.referrals = ReferralsService;
        vm.clickedSocial = false;
        vm.linkGenerated = false;

        CustomerService.getData().then(function(response) {
            if (!vm.advocateEmail && response.email) {
                vm.advocateEmail = response.email;
                vm.generateLink();
            } else if (vm.email) {
                vm.advocateEmail = vm.email;
            }
            vm.newAdvocate = (response.referralsAdvocateCode) ? false : true;
        });


        var productId = (vm.productId) ? vm.productId : "";
        ReferralsService.getSettings(productId).then(function(response) {
            vm.settings = response;
        });

        $rootScope.$on('loggedIn', function() {
            CustomerService.getData().then(function(response) {
                if (!vm.advocateEmail && response.email) {
                    vm.advocateEmail = response.email
                    vm.generateLink()
                }
            })
        })
        $rootScope.$on('loggedOut', function() {
            vm.advocateEmail = null
            vm.url = null
            vm.linkGenerated = false
        })

        vm.validateEmail = function() {
            ReferralsService.getValidateEmail(vm.friendEmail).then(function() {
                vm.invalidEmail = false;
            }, function(error) {
                vm.invalidEmail = true;
            })
        };

        vm.generateLink = function() {
            ReferralsService.postGerenateLink(vm.advocateEmail, vm.productId).then(function(response) {
                vm.url = response.url;
                vm.linkGenerated = true;
            })
        }

        vm.showCopiedMessage = function() {
            vm.showCopyMessage = true;
            $timeout(function() {
                vm.showCopyMessage = false
            }, 3000)
        }

        vm.setCaptchaResponse = function(response) {
            vm.captcha = response
        };

        vm.referralShare = function(event, form) {
            event.preventDefault()

            if (form.$valid) {
                if (vm.advocateEmail == vm.friendEmail && vm.advocateEmail && vm.friendEmail) {
                    NotificationsService.addNotification({
                        message: "Sorry, You can not refer yourself.",
                        type: "error"
                    })
                    grecaptcha.reset();
                } else {
                    _postReferral(form)
                }
            } else {

                NotificationsService.addNotification({
                    message: "Please fill out the highlighted fields",
                    type: "error"
                })

            }
        };

        function _postReferral(form) {
            vm.isWaiting = true

            ReferralsService.referEmail(vm.friendEmail, vm.settings.emailText, vm.settings.program, vm.url, "email", vm.productId, vm.captcha).then(function(response) {

                vm.isWaiting = false
                vm.friendEmail = null

                grecaptcha.reset()

                form.$setPristine()
                form.$setUntouched()
                form.$rollbackViewValue()

                var trackingData = {
                    "Program": vm.settings.program,
                    "Method": "Email",
                    "NewAdvocate": vm.newAdvocate
                }
                TrackingService.trackEvent("Refer", trackingData)

                NotificationsService.addNotification({
                    message: "Your friend will receive an email shortly!",
                    type: "success"
                })

            }, function(error) {
                vm.isWaiting = false

                NotificationsService.addNotification({
                    message: error,
                    type: "error"
                })

            }).finally(function() {
                vm.isWaiting = false
                    //reset the captcha
                if (typeof grecaptcha !== "undefined") {
                    grecaptcha.reset()
                }
            })
        }

        vm.clickSocial = function() {
            vm.clickedSocial = true;
        };

        vm.fbShareSuccess = function() {
            ReferralsService.referSocial(vm.settings.program, vm.url + ReferralsService.settings.fbUtmCodes, "facebook", vm.productId);
        };

        $scope.twitterShareSuccess = function() {
            ReferralsService.referSocial(vm.settings.program, vm.url + ReferralsService.settings.fbUtmCodes, "twitter", vm.productId);
        };

        $scope.twitterShareFail = function(fail) {
            console.log(fail)
        };
    }
})();

BetabrandApp.factory('ReferralsService', ['$http', '$q', '$cookies', '$rootScope', 'NotificationsService', 'TrackingService', '$location', 'CustomerService',
    function($http, $q, $cookies, $rootScope, NotificationsService, TrackingService, $location, CustomerService) {

        function ReferralsService() {

            var self = this
            self.initialized = false
            var f = ""
            if ("Fingerprint" in window) {
                f = new Fingerprint().get()
            }
            this.settings = {}
            this.stats = {}

            $rootScope.$on('viewLoaded', function() {
                if ($location.search().r) {
                    self.getSettings().then(function() {
                        self.applyReferral()
                    })
                }
                if ($location.search().a) {
                    self.getSettings().then(function() {
                        self.setupAdvocateMessaging()
                    })
                }
            })

            self.getValidateEmail = function(friendEmail) {
                var self = this
                var deferred = $q.defer()
                var url = '/api/rest/referrals/validate/?email=' + friendEmail

                $http
                    .get(url)
                    .success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.postGerenateLink = function(advocateEmail, productId) {
                var self = this
                var deferred = $q.defer()
                var dataObj = {
                    "productId": productId,
                    "email": advocateEmail,
                    "f": f
                }

                $http({
                        method: "post",
                        url: "/api/rest/referrals/generate/",
                        data: dataObj
                    }).success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.referEmail = function(friendEmail, emailMessage, program, url, method, productId, captcha) {
                var dataObj = {
                    "method": method,
                    "email": friendEmail,
                    "f": f,
                    "program": program,
                    "message": emailMessage,
                    "url": url,
                    "product": productId,
                    "captcha": captcha
                }

                return _postReferral(dataObj)
            }

            self.referSocial = function(program, url, method, productId) {

                var dataObj = {
                    "method": method,
                    "f": f,
                    "program": program,
                    "url": url,
                    "product": productId
                }

                return _postReferral(dataObj)
            }

            var _postReferral = function(dataObj) {
                var deferred = $q.defer()
                $http({
                        method: "post",
                        url: "/api/rest/referrals/refer/",
                        data: dataObj
                    }).success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)
                    })
                return deferred.promise
            }

            self.applyReferral = function() {
                var params = window.location.search || ""

                if ($location.search().r) {
                    var advocateCode = $location.search().r.trim()
                }

                if ($location.search().s) {
                    var shareId = $location.search().s.trim()
                }

                //document.cookie= '_fp='+this.options.f+'; path=/; domain=' + Betabrand.GLOBALS.CONFIG.domain + '; expires=' + expires.toGMTString() + ';';

                $cookies._fp = f

                if (advocateCode) {
                    var data = {
                        f: f,
                        advocateCode: advocateCode,
                        shareId: shareId
                    }
                    $http({
                        method: "post",
                        url: "/api/rest/referrals/apply/",
                        data: data
                    }).success(function(response) {

                        NotificationsService.addNotification({
                            message: response.message,
                            type: "success"
                        })

                        TrackingService.trackEvent("View Referral", { "Program": response.program, "Channel": response.method || "Other", "Reward": response.reward })
                    }).error(function(response) {

                        NotificationsService.addNotification({
                            message: response.messages.error[0].message,
                            type: "error"
                        })

                    })
                }
            }

            self.getSettings = function(productId) {
                productId = productId || ""
                var dataObj = { 'product': productId }
                var deferred = $q.defer()
                $http({
                        method: "get",
                        url: "/api/rest/referrals/settings/?product=" + productId,
                    }).success(function(data) {
                        self.settings = data
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)

                    })
                return deferred.promise
            }

            self.getStats = function() {
                var deferred = $q.defer()
                $http({
                        method: "get",
                        url: "/api/rest/referrals/stats/",
                    }).success(function(data) {
                        deferred.resolve(data)
                    })
                    .error(function(data) {
                        deferred.reject(data)

                    })
                return deferred.promise
            }

            self.setupAdvocateMessaging = function() {
                //Check for an advocate code
                if ($location.search().a) {
                    CustomerService.getData().then(function(data) {
                        var message
                        if (data.referralsAdvocateCredit > 0) {
                            message = "Thanks for referring! Here's your $" + parseFloat(data.referralsAdvocateCredit).toFixed(2) + " to spend!"

                        } else if (data.id) {
                            message = "You don't have any advocate credit, but refer now and earn!"
                        } else {
                            message = "Log in to see your reward for referring!"
                        }
                        NotificationsService.addNotification({
                            message: message,
                            type: "success"
                        })

                    })
                }
            }

            $rootScope.$on('loggedIn', function() {
                self.setupAdvocateMessaging()
            })
        }

        return new ReferralsService()
    }
]);

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller('ReturnsController', ReturnsController);

    ReturnsController.$inject = ['$scope', '$location', '$compile', 'OrderService', '$routeParams', '$sce', 'PageService', 'CustomerService', '$window', '$timeout', '$document'];

    function ReturnsController($scope, $location, $compile, OrderService, $routeParams, $sce, PageService, CustomerService, $window, $timeout, $document) {
        var vm = this;
        vm.CustomerService = CustomerService;

        vm.startRMA = function(event, form) {

            if (form.$valid) {

                vm.returnData.incrementId = vm.returnData.incrementId.replace(/#/g, "");

                return OrderService.getRMA(vm.returnData.incrementId, vm.returnData.customerEmail).then(function(response) {
                        vm.returnData.url = response.data.rma_url;
                        $window.scroll(0, 0);
                    },
                    function(error) {
                        alert(error.data.messages.error[0].message);
                    });

            }

        }

        if ("customerEmail" in $routeParams && "incrementId" in $routeParams) {
            vm.returnData = $routeParams;

            vm.startRMA().finally(function() {
                $scope.$emit('viewLoaded');
            });
        } else if ("returnToken" in $routeParams) {
            vm.returnData = {
                'url': "https://www.whiplashmerch.com/rma/" + $routeParams.returnToken,
                'incrementId': $routeParams.incrementId
            };
            $scope.$emit('viewLoaded');

        } else {
            vm.returnData = {};

            CustomerService.getData().then(function(data) {
                vm.returnData.customerEmail = data.email;
                $scope.$emit('viewLoaded');
            });
        }

        vm.startOver = function() {
            vm.returnData.url = false;
            vm.returnData.incrementId = '';
            $timeout(function() {
                $document.scrollTo(document.getElementById('rma__form'), 200, 400);
            });
        }


        PageService.setBodyClass('returns');
        PageService.setTitle('Returns & Exchanges | Betabrand');

        $scope.$emit('viewLoaded');
    }
})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("reviewRating", reviewRating);

    function reviewRating() {
        var directive = {
            restrict: "AE",
            scope: {
                scoreId: "=",
                ratingOptions: "="
            },
            templateUrl: "/angular/app/reviews/rating.html",
            link: linkFunc,
            controller: reviewRatingController,
            controllerAs: "vm",
            bindToController: true,
            transclue: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            ctrl.label = attr.label

            if (attr.editable) {
                ctrl.editable = true;
            }

        }
    }

    reviewRatingController.$inject = ["$scope", "_"];

    function reviewRatingController($scope, _) {

        var vm = this;
        vm.editable = false;

        vm.actions = {
            setScore: setScore
        }

        if (vm.scoreId && !vm.scoreValue) {
            var ratingLookup = _.find(vm.ratingOptions, { 'optionId': parseInt(vm.scoreId) })
            vm.scoreValue = ratingLookup ? ratingLookup.value : false
        }

        updateScore()

        function updateScore() {
            //build star array, suffixes to add to the font-awesome class name in order to show empty/half/full stars
            vm.stars = []
            for (var i = 0; i < 5; i++) {
                if (vm.scoreValue >= i + 1) {
                    vm.stars[i] = "";
                } else {
                    vm.stars[i] = "-o"
                }
            }

        }

        function setScore(index) {
            if (vm.editable) {
                vm.scoreId = vm.ratingOptions[index].optionId;
                vm.scoreValue = vm.ratingOptions[index].value
                updateScore()
            }
        }

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("reviewRatingSummary", reviewRatingSummary);

    function reviewRatingSummary() {
        var directive = {
            restrict: "E",
            scope: {},
            templateUrl: "/angular/app/reviews/rating-summary.html",
            link: linkFunc,
            controller: reviewRatingSummaryController,
            controllerAs: "vm",
            bindToController: true,
            transclue: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            if (attr.score) {
                ctrl.setScore(attr.score);
            }

            if (attr.label) {
                ctrl.setLabel(attr.label);
            }
        }
    }

    reviewRatingSummaryController.$inject = ["$scope"];

    function reviewRatingSummaryController($scope) {
        var vm = this
        vm.stars = [];
        vm.score = false;
        vm.label = "";

        vm.setLabel = function(label) {
            vm.label = label
        }

        vm.setScore = function(score) {
            //max 1 decimal place
            vm.score = parseFloat(score).toFixed(1)

            //translate score from 0.00..5.00 to [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]
            var roundedScore = Math.ceil(score * 2) / 2;
            //build star array, suffixes to add to the font-awesome class name in order to show empty/half/full stars
            vm.stars = []
            for (var i = 0; i < 5; i++) {
                if (roundedScore >= i + 1) {
                    vm.stars[i] = "";
                } else if (roundedScore >= i + .5) {
                    vm.stars[i] = "-half-o"
                } else {
                    vm.stars[i] = "-o"
                }
            }

        }
    }
})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("reviewCreate", reviewCreate);

    function reviewCreate() {
        var directive = {
            restrict: "E",
            scope: {
                entity: "=",
                reviewModel: "=",
                itemId: "=",
            },
            templateUrl: "/angular/app/reviews/review-create.html",
            link: linkFunc,
            controller: reviewCreateController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {


        }
    }

    reviewCreateController.$inject = ["$scope", "$route", "ReviewsService", "_", "$location", "NotificationsService", "TrackingService"];

    function reviewCreateController($scope, $route, ReviewsService, _, $location, NotificationsService, TrackingService) {

        var vm = this;
        vm.reviewOptions = {}
        vm.firstRatingId = false

        //if the incoming review object is empty, stub out the object
        vm.review = vm.reviewModel || {
            ratings: {},
            title: "",
            detail: "",
            productId: vm.entity.id,
            itemId: vm.itemId
        };

        if (vm.review.ratingVotes) {
            vm.review.ratings = {}
            _.each(vm.review.ratingVotes, function(rating) {
                vm.review.ratings[rating.ratingId] = rating.value
            })

        }

        $scope.$watchCollection("vm.review.ratings", function(current, original) {
            // If ratings have a new value set, submit
            if (current !== original && !_.every(_.values(current), function(v) { return !v; })) {
                submit(vm.review, true)
            }
        })

        //if the ratings object is empty, this should be a new fresh review
        vm.newReview = _.isEmpty(vm.review.ratings)

        vm.actions = {
            submit: submit,
            update: update,
            remove: remove,
        }

        activate()

        //load the review Options map
        function activate() {
            return ReviewsService.getReviewOptions().then(function(data) {
                vm.reviewOptions = data


                //stub out each of the rating options in the review object
                _.each(vm.reviewOptions.ratingOptions, function(rating, ratingId) {

                    if (vm.firstRatingId === false) {
                        vm.firstRatingId = ratingId
                    }

                    if (!vm.review.ratings[ratingId]) {
                        vm.review.ratings[ratingId] = false
                    }
                })
                checkForReviewParams()
            })
        }

        function checkForReviewParams() {
            if ($location.search().product == vm.itemId && $location.search().score) {
                var firstRating = _.head(_.values(vm.reviewOptions.ratingOptions))
                vm.review.ratings[vm.firstRatingId] = parseInt($location.search().score)
                submit(vm.review, true)
            }
        }

        //saveRating=true allows us to only change the rating in the event that the review form is incomplete
        function submit(review, saveRating) {
            //clean up unasigned ratings
            if ($scope.reviewForm.$valid || saveRating) {
                _.each(review.ratings, function(rating, key) {
                    if (!rating) {
                        delete review.ratings[key]
                    }
                })

                if (review.title && review.detail && !saveRating) {
                    review.hasReview = true
                }
                if ($route.current.params.orderId && $route.current.params.orderHash) {
                    review.orderId = $route.current.params.orderId;
                    review.orderHash = $route.current.params.orderHash;
                }
                ReviewsService.submitReview(review).then(function(response) {
                    if ($scope.reviewForm.$valid && !saveRating) {
                        NotificationsService.addNotification({
                            message: "Thanks for your review! We posted it on the " + vm.entity.name + " page.",
                            type: "success"
                        })
                        vm.entity.hide = true
                    }

                    trackReview(review)
                }, function(response) {

                })

            }
        }

        function trackReview(review) {
            var scores = _.values(review.ratings),
                score = false,
                hasBody = false,
                hasTitle = false,
                rateFromLink = false;

            if (scores.length) {
                score = scores[0]
            }

            if (review.title) {
                hasTitle = true;
            }

            if (review.detail) {
                hasBody = true;
            }

            if ($location.search().product == vm.itemId && $location.search().score) {
                rateFromLink = true;
            }

            TrackingService.trackEvent('Review', { 'Product': vm.entity.name, 'Score': score, 'Has Title': hasTitle, 'Has Body': hasBody, 'Rated From Link': rateFromLink })
        }

        function update(review) {
            console.log("Updating", review)
        }

        function remove(reviewId) {
            console.log("Removing", reviewId)
        }

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("reviewsDisplay", reviewsDisplay);

    function reviewsDisplay() {
        var directive = {
            restrict: "E",
            scope: {
                entity: "="
            },
            templateUrl: "/angular/app/reviews/reviews-display.html",
            link: linkFunc,
            controller: reviewsDisplayController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {


        }
    }

    reviewsDisplayController.$inject = ["$scope", "ReviewsService", "_", '$log', 'VotingService', 'CustomerService', "$document"];

    function reviewsDisplayController($scope, ReviewsService, _, $log, VotingService, CustomerService, $document) {

        var vm = this;
        vm.CustomerService = CustomerService
        vm.actions = {
            vote: vote,
            submit: submit,
            update: update,
            remove: remove,
            getRatingLabel: getRatingLabel
        }

        activate()

        function activate() {
            return getReviews().then(function() {

            })
        }

        function getReviews() {
            return ReviewsService.getReviews(vm.entity.id)
                .then(function(data) {
                    vm.reviews = data.reviews.data
                    vm.count = data.reviews.count
                    vm.ratingOptions = data.ratingOptions.ratingOptions
                    vm.reviews = _.sortBy(vm.reviews, [function(r) { return -r.votes.up; }])
                    return vm.reviews;
                })
        }

        function getRatingLabel(ratingId) {
            var rating = vm.ratingOptions[parseInt(ratingId)]
            if (rating) {
                return rating.ratingCode
            }
            return false
        }

        vm.scrollToReviews = function(newPageNumber, oldPageNumber) {
            if (oldPageNumber) {
                $document.scrollTo(angular.element(document.getElementById("reviews")), 120, 1000)
            }
        }

        function vote(reviewId, score) {
            $log.debug("Voting", reviewId, score)
            VotingService.castVote('review', reviewId, score)
            CustomerService.updateVotes('review', reviewId, score)
        }

        function submit(review) {
            $log.debug("Submitting", review)
        }

        function update(review) {
            $log.debug("Updating", review)
        }

        function remove(reviewId) {
            $log.debug("Removing", reviewId)
        }

    }

})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .controller('ReviewsOverviewController', ReviewsOverviewController)
        .config(config);

    ReviewsOverviewController.$inject = ['$scope', '$document', '$timeout', 'ReviewsService', '$q', 'TrackingService', 'orders', 'ratingOptions', 'showPreviouslyReviewed', '_', '$location', '$route'];

    function ReviewsOverviewController($scope, $document, $timeout, ReviewsService, $q, TrackingService, orders, ratingOptions, showPreviouslyReviewed, _, $location, $route) {
        var vm = this;
        if ('data' in orders)
            vm.orders = orders.data;
        else {
            vm.order = orders
            vm.orders = [orders]
        }

        vm.showPreviouslyReviewed = showPreviouslyReviewed

        activate();

        //reinit page on log in and out
        $scope.$on('loggedIn', function(response) {
            $route.reload()
        })

        $scope.$on('loggedOut', function(response) {
            $route.reload()
        })

        function activate() {

            vm.productsToReview = []
            _.each(vm.orders, function(order) {
                _.each(order.items, function(product) {
                    product.ordered_at = order.date
                    if ((!product.review || vm.showPreviouslyReviewed) && (product.qtyShipped > 0 || product.shippedAt)) {
                        var i = _.findIndex(vm.productsToReview, { 'id': product.id })
                        if (i == -1) {
                            // If we haven't seen this before, add it to things to review
                            vm.productsToReview.push(product)
                        } else {
                            if (!vm.productsToReview[i].simpleProducts) {
                                // Initialize the array of simple products if not done so already
                                vm.productsToReview[i].simpleProducts = [{
                                    'simpleProductId': vm.productsToReview[i].simpleProductId,
                                    'attributes': vm.productsToReview[i].attributes
                                }]
                            }
                            // If we already have this product, add these simple details
                            vm.productsToReview[i].simpleProducts.push({
                                'simpleProductId': product.simpleProductId,
                                'attributes': product.attributes
                            })
                        }
                    }
                })
            })

            // Set up tracking promise
            var trackingDeferred = $q.defer();
            TrackingService.setTrackingPromise(trackingDeferred.promise);

            $scope.$emit('viewLoaded');

            trackingDeferred.resolve({ "Source": "Reviews Overview Page" });

            //scroll review form in to view if you came form email link
            var productFromEmailLink = $location.search().product;
            if (productFromEmailLink) {
                $timeout(function() {
                    var theReview = angular.element(document.getElementById('review-item-' + productFromEmailLink))[0]
                    $document.scrollTo(theReview, 50, 800)
                })
            }
        }
    }

    config.$inject = ['$routeProvider'];

    function config($routeProvider) {
        $routeProvider
            .when('/account/reviews', {
                controller: 'ReviewsOverviewController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/reviews/my-reviews.html',
                title: 'Betabrand - Review Your Items',
                resolve: {
                    orders: ["OrderService", function(OrderService) {
                        return OrderService.getAllOrders()
                    }],
                    ratingOptions: ["ReviewsService", function(ReviewsService) {
                        return ReviewsService.getReviewOptions()
                    }],
                    showPreviouslyReviewed: function() { return false }
                }
            })
            .when('/account/review/:orderId/:orderHash', {
                controller: 'ReviewsOverviewController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/reviews/my-reviews.html',
                title: 'Betabrand - Review Your Items',
                resolve: {
                    orders: ["$route", "OrderService", function($route, OrderService) {
                        return OrderService.getOrder($route.current.params.orderId, $route.current.params.orderHash)
                    }],
                    ratingOptions: ["ReviewsService", function(ReviewsService) {
                        return ReviewsService.getReviewOptions()
                    }],
                    showPreviouslyReviewed: function() { return true }
                }
            })
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .factory('ReviewsService', ReviewsService);

    ReviewsService.$inject = ['$http', '$q', '$log', 'TrackingService'];

    function ReviewsService($http, $q, $log, TrackingService) {
        var vm = this;
        vm.reviewOptionsDefer = false;

        return {
            getReview: getReview,
            getReviews: getReviews,
            getReviewOptions: getReviewOptions,
            submitReview: submitReview,
            getReviewed: getReviewed,
            getUnreviewed: getUnreviewed,
            rateReview: rateReview,
        };

        /*
		    Review Object structure
		    {
			  "reviewId": 56,
			  "createdAt": "2016-09-16 23:43:24",
			  "productId": 17401,
			  "simpleProductId": 17408,
			  "deleted": 0,
			  "title": "Title of the review goes here",
			  "detail": "Body of review goes here",
			  "customerId": 4751,
			  "ratingVotes": [
			  	//magento supports a configurable number of 'rating' questions like
			  	//rate how it fits, rate the quality, these are the scores assigned to each rating
			  	//the question associated with ratingId:1 is found from getReviewOptions()
			    {
			      "ratingId": 1,
			      "value": 2
			    },
			    {
			      "ratingId": 2,
			      "value": 2
			    },
			    {
			      "ratingId": 3,
			      "value": 5
			    }
			  ]
			}
	    */

        /* 
        	Read a single review from the api
        	in: review id (int)
        	out: review object
        */
        function getReview(reviewId) {
            return $http.get('/api/rest/review/read/' + reviewId)
                .then(getReviewComplete)
                .catch(getReviewFailed);

            function getReviewComplete(response) {
                return response.data;
            }

            function getReviewFailed(error) {
                $log.debug('XHR Failed for getReview.' + error.data);
            }
        }

        /* 
        	Read the available review questions
        	in: null
        	out: list of available review options
        */
        function getReviewOptions() {
            if (!vm.reviewOptionsDefer) {
                vm.reviewOptionsDefer = $q.defer()
                $http.get('/api/rest/review/options/get')
                    .then(getReviewOptionsComplete)
                    .catch(getReviewOptionsFailed);
            }

            return vm.reviewOptionsDefer.promise

            function getReviewOptionsComplete(response) {
                vm.reviewOptionsDefer.resolve(response.data);
            }

            function getReviewOptionsFailed(error) {
                $log.debug('XHR Failed for getReviewOptions.' + error.data);
                vm.reviewOptionsDefer.reject(error.data)
            }
        }

        /* 
        	Get published reviews for a product
        	in: product id (int)
        	out: array of review objects
        */
        function getReviews(productId) {
            return $http.get('/api/rest/reviews/product/' + productId)
                .then(getReviewsComplete)
                .catch(getReviewsFailed);

            function getReviewsComplete(response) {
                return response.data;
            }

            function getReviewsFailed(error) {
                $log.debug('XHR Failed for getReviews.' + error.data);
            }
        }

        /* 
        	Submit a review
        	in: review object
        	out: review object
        */
        function submitReview(review) {
            return $http.post('/api/rest/review/create/', review)
                .then(submitReviewComplete)
                .catch(submitReviewFailed);

            function submitReviewComplete(response) {
                return response.data;
            }

            function submitReviewFailed(error) {
                $log.debug('XHR Failed for submitReview.' + error.data);
            }
        }

        /* 
        	Submit a review
        	in: review object
        	out: review object
        */
        function updateReview(review) {
            return $http.put('/api/rest/review/update/', review)
                .then(submitReviewComplete)
                .catch(submitReviewFailed);

            function submitReviewComplete(response) {
                return response.data;
            }

            function submitReviewFailed(error) {
                $log.debug('XHR Failed for submitReview.' + error.data);
            }
        }

        /* 
        	Get customer reviews
        	in: customer id (int)
        	out: array of review objects
        */
        function getReviewed(customerId) {
            return $http.get('/api/rest/reviews')
                .then(getReviewedComplete)
                .catch(getReviewedFailed);

            function getReviewedComplete(response) {
                return response.data;
            }

            function getReviewedFailed(error) {
                $log.debug('XHR Failed for getReviewed.' + error.data);
            }
        }
        /* 
        	Get products available for review
        	in: customer id (int)
        	out: array of products to review
        */
        function getUnreviewed(customerId) {
            return $http.get('/api/rest/reviews')
                .then(getUnreviewedComplete)
                .catch(getUnreviewedFailed);

            function getUnreviewedComplete(response) {
                return response.data;
            }

            function getUnreviewedFailed(error) {
                $log.debug('XHR Failed for getUnreviewed.' + error.data);
            }
        }

        /* 
        	Rate a review
        	in: review id (int), score (1 or -1)
        */
        function rateReview(reviewId, score) {
            //force score to 1 or -1
            if (score < 0)
                score = -1;
            else
                score = 1;

            var vote = { type: "review", id: reviewId, score: score }
            return $http.post('/api/rest/votes/create/', vote)
                .then(rateReviewComplete)
                .catch(rateReviewFailed);

            function rateReviewComplete(response) {
                return response.data;
            }

            function rateReviewFailed(error) {
                $log.debug('XHR Failed for rateReview.' + error.data);
            }
        }
    }

})();

BetabrandApp.factory('LookupService', ['$http', '$q', '$location',
    function LookupService($http, $q, $location) {
        return {
            id: null,
            originalPath: '',
            controller: '',
            pageType: '',
            templateUrl: '',
            categoryId: '',
            query: function(url) {
                var deferred = $q.defer()
                var self = this

                $http({
                        method: "get",
                        url: "/api/rest/lookup/?path=" + url,
                        cache: true
                    })
                    .then(
                        //Success
                        function(response) {
                            var data = response.data
                            var capitalizedController = data.controller.charAt(0).toUpperCase() + data.controller.substring(1)

                            self.id = data.id
                            self.originalPath = url
                            self.pageType = data.controller
                            self.categoryId = data.categoryId
                            self.controller = capitalizedController + 'Controller'
                            self.templateUrl = '/angular/app/' + data.controller + '/' + data.controller + '.html'
                            deferred.resolve(data)
                        },
                        //Fail
                        function() {
                            // $location.url('/404')
                            deferred.reject()
                        }
                    )

                return deferred.promise
            }
        }
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .factory('SailthruService', SailthruService);

    SailthruService.$inject = ['$http', '$q', '$log', 'AssetService', 'APP_CONFIG'];

    function SailthruService($http, $q, $log, AssetService, APP_CONFIG) {
        var vm = this;
        var _setup = $q.defer();
        var waitForActivation = _setup.promise
        vm.reviewOptionsDefer = false;

        if (APP_CONFIG.spmConfig && APP_CONFIG.spmConfig.library) {
            AssetService.loadJs(APP_CONFIG.spmConfig.library, 'sailthru', { 'data-sailthru-setup': 'true' }).then(activate)
        }

        return {
            trackPageView: trackPageView,
            trackImpression: trackImpression,
            trackClick: trackClick,
            getRecommendations: getRecommendations,
        };

        /* 
        	Set up the Sailthru library for pageview tracking
        */
        function activate() {
            if (APP_CONFIG.spmConfig && APP_CONFIG.spmConfig.customerId) {
                Sailthru.SPM.setup(APP_CONFIG.spmConfig.customerId, {
                    autoTrackPageView: false
                });
                _setup.resolve()
            }
        }


        /* 
        	Track a sailthru page view
        	in: url
        */
        function trackPageView(url) {
            Sailthru.SPM.trackPageView(url, {
                onSuccess: trackPageSuccess,
                onError: trackPageError
            });

            function trackPageSuccess() {

            }

            function trackPageError() {

            }
        }

        /* 
        	Track impression of a recommendations section
        	in: section ID, canonicalUrl
        */
        function trackImpression(sectionId, canonicalUrl) {
            waitForActivation.then(doTrackImpression)

            function doTrackImpression() {
                Sailthru.SPM.trackImpression(sectionId, [canonicalUrl], {
                    onSuccess: trackImpressionSuccess,
                    onError: trackImpressionError
                });

                function trackImpressionSuccess() {

                }

                function trackImpressionError() {

                }
            }
        }

        /* 
        	Track click of an SPM element
        	in: section ID, canonicalUrl
        */
        function trackClick(sectionId, canonicalUrl) {
            Sailthru.SPM.trackClick(sectionId, canonicalUrl, {
                onSuccess: trackClickSuccess,
                onError: trackClickError
            });

            function trackClickSuccess() {

            }

            function trackClickError() {

            }
        }

        /* 
        	Get recommendations from SPM
        	in: section ID
        	out: recommendations
        */
        function getRecommendations(sectionId, containerElementId, options) {
            var deferred = $q.defer()
            waitForActivation.then(doGetRecs)

            function doGetRecs() {
                Sailthru.SPM.addSection(sectionId, {
                    elementId: 'fb-root',
                    autoTrackImpressions: false,
                    autoTrackClicks: false,
                    onSuccess: addSectionSuccess,
                    onError: addSectionError
                });

                Sailthru.SPM.personalize({
                    onSuccess: personalizeSuccess,
                    onError: personalizeError,
                    vars: options
                })

                function addSectionSuccess(response) {
                    deferred.resolve(processSailthruToProductCard(response))

                    function processSailthruToProductCard(data) {
                        var products = [];

                        angular.forEach(data, function(rec) {
                            if (rec.vars && rec.vars.cardViewData) {
                                //transform urls to current host, needed for dev/staging environments
                                rec.vars.cardViewData.canonicalUrl = rec.vars.cardViewData.canonicalUrl.replace(/www\.betabrand\.com/, window.location.host)
                                if (!rec.vars.cardViewData.url) {
                                    rec.vars.cardViewData.url = rec.vars.cardViewData.canonicalUrl
                                }

                                products.push(rec.vars.cardViewData)
                            }
                        })

                        return products
                    }
                }

                function addSectionError(response) {
                    deferred.reject(response)
                }

                function personalizeSuccess(response) {}

                function personalizeError(response) {}
            }

            return deferred.promise
        }


    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .config(config);

    function config($routeProvider) {
        $routeProvider
            .when('/sale', {
                controller: 'SaleController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/sale/sale.html',
                title: 'Betabrand - Welcome',
                reloadOnSearch: false,
                resolve: {
                    config: ["ConfigService", function(ConfigService) {
                        return ConfigService.getConfig(["sale"])
                    }],
                    category: ["$location", "$route", function($location, $route) {
                        return {
                            shopSection: "Category",
                            key: "welcome",
                            logo: null,
                            image: "",
                            name: "Welcome to Betabrand",
                            description: ""
                        }
                    }],
                    products: ["$location", "algolia", "APP_CONFIG", "$route", "$q", "_", "OptimizelyService", "AssetService", "SailthruService", function($location, algolia, APP_CONFIG, $route, $q, _, OptimizelyService, AssetService, SailthruService) {
                        var deferred = $q.defer();

                        //forcing optimizely to activate here so we can do the test in the resolve function
                        OptimizelyService.activate()

                        var spmSalePageTestActive = OptimizelyService.handle("spmSalePage")
                        var spmSectionId = APP_CONFIG.spmConfig && APP_CONFIG.spmConfig.shopSectionId ? APP_CONFIG.spmConfig.shopSectionId : "";
                        if (spmSalePageTestActive && spmSectionId) {

                            var getSailthruRecommendations = function() {
                                SailthruService.getRecommendations(spmSectionId, '').then(function(response) {
                                    deferred.resolve(response)
                                })
                            }

                            AssetService.waitForLibrary('sailthru').then(getSailthruRecommendations)
                        } else {
                            var client = algolia.Client(APP_CONFIG.algoliaAppId, APP_CONFIG.algoliaApiKey)
                            var index = client.initIndex('products');

                            index.browse().then(function(response) {
                                var products = []
                                _.each(response.hits, function(product) {
                                    product.id = parseInt(product.objectID)
                                    product.url = product.canonicalUrl.replace("32777", "32769")
                                    product.thumbnail = product.thumbnail.replace("32777", "32769")
                                    if (product.id !== 4407) {
                                        products.push(product)
                                    }
                                })
                                deferred.resolve(products)
                            })
                        }

                        return deferred.promise

                    }]
                }
            })
    }

})();

(function() {

    "use strict";

    SaleController.$inject = ["$scope", "$document", "$rootScope", "$filter", "$q", "CategoryService", "ProductService", "CartService", "TrackingService", "LookupService", "_", "$window", "$timeout", "$location", "PageService", "$route", "OptimizelyService", "$routeParams", "ImageService", "CustomerService"]

    function SaleController($scope, $document, $rootScope, $filter, $q, CategoryService, ProductService, CartService, TrackingService, LookupService, _, $window, $timeout, $location, PageService, $route, OptimizelyService, $routeParams, ImageService, CustomerService) {

        var vm = this

        vm.cart = CartService
        vm.CustomerService = CustomerService
        vm._ = _
        vm.collectionLogo = false
        vm.crosssells = []
        vm.PageService = PageService

        // Advocate Vars

        vm.email = $routeParams.email
        vm.productId = $routeParams.productId
        vm.souce = $routeParams.source
        vm.optimizely = angular.optimizely
        vm.formattedThumbnails = ImageService.lazyFormatSrc
        vm.shardUrl = ImageService.formatImgSrc

        var category = {}

        vm.filterSorter = {}

        vm.discountSlider = {}
        vm.classificationSlider = {}

        vm.showClassifications = true
        vm.showFreeShipping = true
        vm.filterOptions = [
            { "label": "Gender", "attribute": "gender", "position": 0, "active": true },
            { "label": "Discount", "attribute": "prices.discount_percentage", "position": 1, "active": true },
            { "label": "Category", "attribute": "classification", "position": 2, "active": true }
        ]

        vm.sorterOptions = [
            { "label": "Hot", "attribute": "hotness", "default": true },
            { "label": "Price (Low > High)", "attribute": "prices.final" },
            { "label": "Price (High > Low)", "attribute": "-prices.final" }
        ]

        // send a promise to the Tracking service for page tracking data
        var trackingData = null
        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)


        vm.filterCollection = function(filter) {
            $rootScope.$broadcast('changeFilter', "classification", filter, filter)
            $rootScope.$broadcast('resetRevealCount')
        }

        vm.filterDiscount = function(filter) {
            $rootScope.$broadcast('changeFilter', "prices.discount_percentage", filter, filter)
        }

        vm.onReadySwiper = function(swiper) {
            swiper.initObservers();
        };

        function _buildTrackingData(data) {
            // Analytics: Set up Page Tracking Data
            // ACHTUNG!: This is used to fire GTM events

            trackingData = {
                'Source': 'Category Page',
                'Shop Section': data.shopSection,
                'Shop Category': data.key
            }

            trackingDeferred.resolve(trackingData)
        }

        var category_id = null

        category = $route.current.locals.category
        var extension = $location.absUrl().indexOf(".io") > 0 ? "" : "https://static1.betabrands.com"
        category.image = extension + "/media/sale/config/images/" + $route.current.locals.config.config.sale.saleHero
        category.name = $route.current.locals.config.config.sale.saleTitle || category.name
        category.description = $route.current.locals.config.config.sale.saleDescription || category.description

        vm.collectionLogo = (category.logo !== "") ? true : false

        _buildTrackingData(category)

        var setUpProducts = function() {
            // Convert API object to array if not already
            var categoryProducts = $route.current.locals.products
            category.products = angular.isArray(categoryProducts) ? categoryProducts : Object.keys(categoryProducts).map(function(k) {
                return categoryProducts[k]
            })

            _.each(category.products, function(product, i) {
                if (product.counts) {
                    // Check if all products in voting for vote count sorters
                    if (product.counts.state == 'voting') {
                        category.isVotingCategory = true
                    } else {
                        category.isVotingCategory = false
                    }
                } else {
                    // For filtering when mixed CF and RTW products
                    product.counts = { crowdfunding: { activated: 0, count: 0, days_remaining: 0, end_date: "1970/01/01 00:00:00", min: null, tiers: [] }, state: "voting", voting: { activated: 0, count: 0, min: 0, start_date: "1970/01/01 00:00:00" } }
                }
                // For filtering when mixed CF and RTW products
                if (product.counts.comments == undefined) {
                    product.counts.comments = { count: 0 }
                }

                product.gender = (product.gender == "unisex") ? ["men", "women"] : product.gender

            })

            vm.data = category
            vm.categoryData = category

            vm.PageService.setTitle(category.title)

            TrackingService.track('updateCategoryData', category)

        }

        setUpProducts()

        vm.PageService.setBodyClass('sale__page category__page')
        vm.PageService.setMicrodataItemType('CollectionPage')

        $scope.$on("resetRevealCount", function() {
            $document.scrollTo(angular.element(document.body), 0, 400);
        })

        $scope.$emit('viewLoaded')

        $timeout(function() {
            angular.element($window).triggerHandler('scroll')
        });

        vm.filterProducts = function(item) {
            if (item.id == "19193" || item.id == "19205")
                return false;
            return item.state == "preorder" || item.state == "crowdfunding" || item.state == "in-stock";
        }


    }

    angular
        .module("BetabrandApp")
        .controller("SaleController", SaleController);

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("SearchController", SearchController);

    SearchController.$inject = ["$scope", "PageService", "TrackingService", "$q"]

    function SearchController($scope, PageService, TrackingService, $q) {

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            "Source": "Search page"
        }
        trackingDeferred.resolve(trackingData)

        var vm = this
        $scope.$emit("viewLoaded");

        PageService.setBodyClass("search__page");
        PageService.setMicrodataItemType("SearchResultsPage");


    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("search", search)

    function search() {
        var directive = {
            restrict: "E",
            scope: {
                variety: "@",
                context: "@"
            },
            templateUrl: "/angular/app/search/search-form.html",
            link: linkFunc,
            controller: searchController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {}
    }

    searchController.$inject = ["$scope", 'SearchService', '_', '$document', '$window', '$rootScope', 'TrackingService', 'PageService', '$timeout', 'hotkeys', '$location', '$filter', 'algolia', 'APP_CONFIG'];

    function searchController($scope, SearchService, _, $document, $window, $rootScope, TrackingService, PageService, $timeout, hotkeys, $location, $filter, algolia, APP_CONFIG) {

        var vm = this;
        vm.hasSearched = false;

        vm.query = $location.search().q || "";
        var query = $location.search().q || "";

        vm.products = [];
        vm.submissions = [];
        vm.sizingSearch = false
        vm.isPOS = $location.absUrl().indexOf("pos.") > 0
        vm.extension = $location.absUrl().indexOf(".io") > 0 ? ".io" : ".com"

        var client = algolia.Client(APP_CONFIG.algoliaAppId, APP_CONFIG.algoliaApiKey)

        var productIndex = vm.isPOS ? "products_pos" : "products"
        var submissionIndex = "submissions"
        var zendeskIndex = "zendesk_betabrand_articles"

        var debouncedSearch = _.debounce(function() {
            vm.doSearch()
        }, 300)

        $scope.$watch("vm.query", function(current, original) {
            if ($location.path().indexOf('/search') > -1)
                debouncedSearch()
        })

        $scope.$watch("vm.isTypeaheadOpen", function(current, original) {
            if (current) {
                PageService.showTypeaheadDropdown = true
            } else {
                PageService.showTypeaheadDropdown = false
            }
        })

        $scope.$on('$routeUpdate', function(event) {
            query = $location.search().q;
            vm.query = query;
        });

        vm.searchSubmit = function() {
            if (vm.context == 'contact-us-page') {
                vm.doSearch()
            } else {
                $location.path('/search').search("q", vm.query);
            }
        };

        vm.typeaheadNavigate = function($item, $model, $label, $event) {
            vm.query = ""
            var url = new URL($item.canonicalUrl)
            $location.url(url.pathname)
        }

        vm.doSearch = function() {

            if (!vm.query)
                return

            vm.hasSearched = true

            var request = [{
                    indexName: productIndex,
                    query: vm.query,
                    params: {
                        hitsPerPage: 20
                    }
                },
                {
                    indexName: submissionIndex,
                    query: vm.query,
                    params: {
                        hitsPerPage: 20
                    }
                },
                {
                    indexName: zendeskIndex,
                    query: vm.query,
                    params: {
                        hitsPerPage: 20
                    }
                }
            ]

            client.search(request)
                .then(function searchSuccess(response) {

                    _.forEach(response.results, function(result) {

                        // change index name to "products"
                        result.index = result.index.replace("_pos", "")

                        _.forEach(result.hits, function(value) {
                            if (value.canonicalUrl) {
                                value.canonicalUrl = value.canonicalUrl.replace(".com", vm.extension)
                                if (result.index == 'submissions') {
                                    // set attribute for submissions to match categories
                                    value.isVisible = true
                                }
                            }
                            // Algolia obecjt ID to product.id
                            if (result.index !== "zendesk_betabrand_articles")
                                value.id = value.objectID
                        })

                        // vm.products, vm.submissions, vm.zendesk_betabrand_articles
                        vm[result.index] = result.hits

                    })

                    // var trackingData = { "Num of Search Results": (vm.products.length + vm.submissions.length + vm.zendesk_betabrand_articles.length), "Page Type": TrackingService.pageType, "Page": PageService.title(), "Query": vm.query }
                    // TrackingService.trackEvent("Search", trackingData)

                    if ($location.path().indexOf('/search') > -1)
                        $location.search("q", vm.query.toLowerCase())

                    $timeout(function() {
                        angular.element($window).triggerHandler('scroll');
                    });

                }, function searchFailure(err) {
                    vm.products = []
                    vm.submissions = []
                    vm.zendesk_betabrand_articles = []
                });

        }

    }

})();

BetabrandApp.factory('SearchService', ['$http', '$q', '$location', '$timeout',
    function SearchService($http, $q, $location, $timeout) {
        return {
            showSearch: false,
            searchFocus: function() {
                $timeout(function() {
                    var searchInput = angular.element(document.getElementById('search-term'));
                    searchInput[0].focus();
                });
            }
        }
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbSelectDropdown", bbSelectDropdown);

    function bbSelectDropdown() {
        var directive = {
            restrict: "EA",
            scope: {
                variety: "@",
                dropdownData: "=",
                dropdownLabel: "@",
                theme: "@"
            },
            transclude: true,
            templateUrl: "/angular/app/select-dropdowns/select-dropdown.html",
            link: linkFunc,
            controller: bbSelectDropdownController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    bbSelectDropdownController.$inject = ["$scope"];

    function bbSelectDropdownController($scope) {

        var vm = this;
        vm.selectLabel = null;
        vm.openDropdown = false;

    }

})();

(function() {
    "use strict";

    angular.module('bbAnalytics', [])
        .factory('AnalyticsService', ['$http',
            function($http) {
                function AnalyticsService() {
                    var self = this

                    self.getData = function(type, id) {
                        return $http({
                            method: "get",
                            url: "/api/rest/analytics/" + type + "/" + id,
                            data: { "type": type, "id": id }
                        })
                    }
                }

                return new AnalyticsService();
            }
        ])


})();

BetabrandApp.service('AssetService', ['$q', '$timeout',
    function AssetService($q, $timeout) {

        var service = {
            loadOptimizedFont: loadOptimizedFont,
            loadJs: loadJs,
            waitForLibrary: waitForLibrary
        };

        var libraryDeferred = {}
        var libraryLoaded = {}

        return service;

        function waitForLibrary(name) {

            if (name in libraryDeferred) {
                return libraryDeferred[name].promise
            }

            libraryDeferred[name] = $q.defer()
            return libraryDeferred[name].promise
        }


        //Some external js libraries don't need to be loaded on page load, but instead can be loaded at some point after, 
        //this function simply provides a means add an external js library to the page
        //Uses promise structure to allowing you to defer code execution until the js library is loaded
        //Uses the 'name' field to prevent loading the same library more than once
        //In addition, keeps track of old deferred objects and will return previously resolved promises
        function loadJs(url, name, tagOptions) {
            var deferred

            if (name in libraryDeferred)
                deferred = libraryDeferred[name]
            else
                deferred = $q.defer();

            if (!name || !(name in libraryLoaded)) {
                libraryLoaded[name] = true
                var js = document.createElement("script")
                js.type = "text/javascript"
                js.async = !0
                js.src = url

                //add any optional tag parameters
                angular.forEach(tagOptions, function(value, key) {
                    js.setAttribute(key, value)
                })

                document.body.appendChild(js);
                js.onload = js.onreadystatechange = function(e) {
                    if (js.readyState && js.readyState !== 'complete' && js.readyState !== 'loaded') {
                        return;
                    }

                    $timeout(function() {
                        deferred.resolve(e);
                    });
                };
            }

            //store the name of the library so we can use the promise in other places of the code
            if (name)
                libraryDeferred[name] = deferred

            return deferred.promise
        }


        //Using progressive font loading strategy offered by: 
        //https://www.filamentgroup.com/lab/font-loading.html
        //Able to detect browser featureset and then load the appropriate base64 encoded font file.
        //Fonts are also added after the app has bootstrapped.

        //test to see if browser supports Woff2
        function supportsWoff2() {
            if (!("FontFace" in window)) {
                return false;
            }

            var f = new FontFace('t', 'url( "data:application/font-woff2;base64,d09GMgABAAAAAAIkAAoAAAAABVwAAAHcAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlYAgloKLEoBNgIkAxgLDgAEIAWDcgc1G7IEyB6SJAFID5YA3nAHC6h4+H7s27nP1kTyOoQkGuJWtNGIJKYznRI3VEL7IaHq985ZUuKryZKcAtJsi5eULwUybm9KzajBBhywZ5ZwoJNuwDX5C/xBjvz5DbsoNsvG1NGQiqp0NMLZ7JlnW+5MaM3HwcHheUQeiVokekHkn/FRdefvJaTp2PczN+I1Sc3k9VuX51Tb0Tqqf1deVXGdJsDOhz0/EffMOPOzHNH06pYkDDjs+P8fb/z/8n9Iq8ITzWywkP6PBMMN9L/O7vY2FNoTAkp5PpD6g1nV9WmyQnM5uPpAMHR2fe06jbfvzPriekVTQxC6lpKr43oDtRZfCATl5OVAUKykqwm9o8R/kg37cxa6eZikS7cjK4aIwoyh6jOFplhFrz2b833G3Jii9AjDUiAZ9AxZtxdEYV6imvRF0+0Nej3wu6nPZrTLh81AVcV3kmMVdQj6Qbe9qetzbuDZ7vXOlRrqooFSxCv6SfrDICA6rnHZXQPVcUHJYGcoqa3jVH7ATrjWBNYYkEqF3RFpVIl0q2JvMOJd7/TyjXHw2NyAuJpNaEbz8RTEVtCbSH7JrwQQOqwGl7sTUOtdBZIY2DKqKlvOmPvUxJaURAZZcviTT0SKHCXqzwc=" ) format( "woff2" )', {});
            f.load()['catch'](function() {});

            return f.status == 'loading' || f.status == 'loaded';
        }

        //Simply add a css file to the head
        function injectCss(cssFile) {
            var link = document.createElement('link')
            link.setAttribute('rel', 'stylesheet')
            link.setAttribute('type', 'text/css')
            link.setAttribute('href', cssFile)
            document.getElementsByTagName('head')[0].appendChild(link)
        }

        //takes list object of css files keyed by woff2, woff or ttf and decides which one to include based on browser support
        function loadOptimizedFont(fontList) {
            var ua = window.navigator.userAgent;
            // Use WOFF2 if supported
            if ('woff2' in fontList && supportsWoff2()) {
                injectCss(fontList.woff2);
            } else if ('ttf' in fontList && ua.indexOf("Android 4.") > -1 && ua.indexOf("like Gecko") > -1 && ua.indexOf("Chrome") === -1) {
                // Android's Default Browser needs TTF instead of WOFF
                injectCss(fontList.ttf);
            } else {
                // Default to WOFF
                injectCss(fontList.woff);
            }
        };

    }
]);

(function() {
    "use strict";


    // Q1 Features:
    // send message (publish/stream etc)   message/send/
    // To send (as yourself) a draft message to customer 111:
    // HTTP POST with body: {"messageId":1, "destinationType":"customer", "destinationId":111}
    // To send (as another user) a draft message to customer 111:
    // HTTP POST with body: {"messageId":1, "destinationType":"customer", "destinationId":111, "senderCustomerId":11}
    // To publish (as a designer) a draft message to product 2693:
    // HTTP POST with body: {"messageId":"3", "destinationType":"submission", "destinationId":"2693", "senderCustomerId":"11", "publishToPage":true}
    // NB. flow will be to always preview content before sending/publishing so no such thing as sending a message before it has been saved as draft
    // NB. senderCustomerid, if omitted, defaults to the logged in user

    // CommunicationService Factory
    angular
        .module("bbCommunication", [])
        .factory('CommunicationService', CommunicationService);

    CommunicationService.$inject = ['$http', '$q'];


    // Your current user inbox.
    // https://www.betabrand.io/api/rest/messages/inbox
    function CommunicationService($http, $q) {

        return {
            getInbox: getInbox,
            getSent: getSent,
            getDrafts: getDrafts,
            getPotentialSenders: getPotentialSenders,
            getProductDrafts: getProductDrafts,
            getInboxMessage: getInboxMessage,
            getSentMessage: getSentMessage,
            getDraftMessage: getDraftMessage,
            getSingleMessage: getSingleMessage, // Internal users only.
            createDraft: createDraft,
            updateMessage: updateMessage,
            sendMessage: sendMessage,
            deleteMessage: deleteMessage,
            unsendMessage: unsendMessage
        };

        function getInbox() {
            return $http.get('/api/rest/messages/inbox.json')
                .then(getInboxComplete)
                .catch(getInboxFailed);

            function getInboxComplete(response) {
                return response;
            }

            function getInboxFailed(error) {
                console.log('XHR Failed for getInbox.' + error.data);
            }
        }


        // Sent messages:
        // https://www.betabrand.io/api/rest/messages/sent
        function getSent() {
            return $http.get('/api/rest/messages/sent.json')
                .then(getSentComplete)
                .catch(getSentFailed);

            function getSentComplete(response) {
                return response;
            }

            function getSentFailed(error) {
                console.log('XHR Failed for getSent.' + error.data);
            }
        }

        // Draft messages:
        // https://www.betabrand.io/api/rest/messages/drafts
        function getDrafts() {
            return $http.get('/api/rest/messages/draft')
                .then(getDraftsComplete)
                .catch(getDraftsFailed);

            function getDraftsComplete(response) {
                return response;
            }

            function getDraftsFailed(error) {
                console.log('XHR Failed for getDrafts.' + error.data);
            }
        }


        // Get product drafts
        // https://www.betabrand.io/api/rest/broadcasts/submission/2693?sent=0

        function getProductDrafts(productId) {
            return $http.get('/api/rest/broadcasts/submission/' + productId + '?sent=0')
                .then(getProductDraftsComplete)
                .catch(getProductDraftsFailed);

            function getProductDraftsComplete(response) {
                return response;
            }

            function getProductDraftsFailed(error) {
                console.log('XHR Failed for getProductDrafts.' + error.data);
            }
        }


        // Get potential authors for a product.
        // potentialSenders
        // https://www.betabrand.io/api/rest/message/senders/submission/2693

        function getPotentialSenders(productId) {
            return $http.get('/api/rest/message/senders/submission/' + productId)
                .then(getPotentialSendersComplete)
                .catch(getPotentialSendersFailed);

            function getPotentialSendersComplete(response) {
                return response;
            }

            function getPotentialSendersFailed(error) {
                console.log('XHR Failed for getPotentialSenders.' + error.data);
            }
        }



        // Get specific drafts for a specific page:
        // https://www.betabrand.io/api/rest/broadcasts/submission/2693?sent=0


        // get a single message you received       message/inbox/<MESSAGE_ID>
        // getInboxMessage: getInboxMessage,
        function getInboxMessage(id) {
            return $http.get('/api/rest/message/inbox/' + id)
                .then(getInboxMessageComplete)
                .catch(getInboxMessageFailed);

            function getInboxMessageComplete(response) {
                return response;
            }

            function getInboxMessageFailed(error) {
                console.log('XHR Failed for getInboxMessage.' + error.data);
            }
        }


        // get a single message you sent           message/sent/<MESSAGE_ID>
        // getSentMessage: getSentMessage,
        function getSentMessage(id) {
            return $http.get('/api/rest/message/sent/' + id)
                .then(getSentMessageComplete)
                .catch(getSentMessageFailed);

            function getSentMessageComplete(response) {
                return response;
            }

            function getSentMessageFailed(error) {
                console.log('XHR Failed for getSentMessage.' + error.data);
            }
        }

        // get a single message you wrote          message/draft/<MESSAGE_ID>
        // getDraftMessage: getDraftMessage,
        function getDraftMessage(id) {
            return $http.get('/api/rest/message/draft/' + id)
                .then(getDraftMessageComplete)
                .catch(getDraftMessageFailed);

            function getDraftMessageComplete(response) {
                return response;
            }

            function getDraftMessageFailed(error) {
                console.log('XHR Failed for getDraftMessage.' + error.data);
            }
        }


        // get a single message detail
        //  (internal users: see all)          message/get/<MESSAGE_ID>
        function getSingleMessage(id) {
            return $http.get('/api/rest/message/get/' + id)
                .then(getSingleMessageComplete)
                .catch(getSingleMessageFailed);

            function getSingleMessageComplete(response) {
                return response;
            }

            function getSingleMessageFailed(error) {
                console.log('XHR Failed for getSingleMessage.' + error.data);
            }
        }

        // Creates a draft:
        // create message (draft)          message/create
        // HTTP POST with body: {"authorCustomerId":11,"subject":"this is a subject","body":"this is the body"}
        function createDraft(data) {
            return $http.post('/api/rest/message/create/', data)
                .then(createDraftComplete)
                .catch(createDraftFailed);

            function createDraftComplete(response) {
                return response;
            }

            function createDraftFailed(error) {
                console.log('XHR Failed for createDraft.' + error.data);
            }
        }

        // Update a message that has been created as a draft:
        // https://www.betabrand.io/api/rest/message/send/:id
        // update message (draft or published) message/update
        // HTTP PUT with body: {"id":1,"subject":"this is a subject updated","body":"this is the body updated"}

        function updateMessage(data) {
            return $http.put('/api/rest/message/update/', data)
                .then(updateMessageComplete)
                .catch(updateMessageFailed);

            function updateMessageComplete(response) {
                return response;
            }

            function updateMessageFailed(error) {
                console.log('XHR Failed for updateMessage.' + error.data);
            }
        }

        // Send a message that has been created as a draft:
        // https://www.betabrand.io/api/rest/message/send/:id

        // To send (as yourself) a draft message to customer 111:
        // HTTP POST with body: {"messageId":1, "destinationType":"customer", "destinationId":111, publishToPage: 1}

        // To send (as another user) a draft message to customer 111:
        // HTTP POST with body: {"messageId":1, "destinationType":"customer", "destinationId":111, "senderCustomerId":11, publishToPage: 1}
        // If delete is passed with data it just unsends that message.
        function sendMessage(data) {
            // This is the send message invoked inside of CommunicationDirective tools.
            return $http.post('/api/rest/message/send/', data)
        }

        // Delete a message by ID:
        // https://www.betabrand.io/api/rest/message/delete/:id
        // HTTP DELETE with body: {"messageId":1, "senderCustomerId":11, "destinationType":"product", "destinationId":2693}

        function deleteMessage(id, data) {
            return $http.delete('/api/rest/message/delete/' + id, data)
        }

        // To unsend a previously broadcast message for product 2693:
        // HTTP DELETE with body: {"messageId":1, "senderCustomerId":11, "destinationType":"product", "destinationId":2693}

        // unsend message (unpublish)          message/unsend/

        // To unsend a previously sent message to customer 111:
        // HTTP DELETE with body: {"messageId":1, "senderCustomerId":11, "recipientEntityType":"customer", "recipientCustomerId":111}

        // To unsend a previously broadcast message for product 2693:
        // HTTP DELETE with body: {"messageId":1, "senderCustomerId":11, "destinationType":"product", "destinationId":2693}

        function unsendMessage(data) {
            return $http.put('/api/rest/message/unsend/', data)
        }



    }


})();

angular.module('error', []).
factory('ErrorInterceptor', ['$q', '$log', 'NotificationsService', function($q, $log) {
    return {

        // Originally I used the NotificationsService to show an error. However, this behavior might not be wanted by the module dealing with the error.
        // Modules should be responsible for showing errors if they want to.
        // However, some modules, like the cart module, just show whatever error comes back form the backend, even if it's a really ugly error message (which is often the case for 50x errors)
        // This module just overrides whatever 500 error is sent by the backend with a generic message.
        // This might not be the best way of handling things but will work for now

        'responseError': function(rejection) {
            if (rejection.status >= 500) {
                $log.debug('[Error Service] 50x Error', rejection)
                rejection.data = "Woops! Seems like we are experiencing difficulties... Please try again in a few seconds"
            }

            return $q.reject(rejection);
        }
    };
}]).
config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('ErrorInterceptor')
}]);


angular.module('forceRefresh', []).
factory('ForceRefreshService', ['$http', '$log', '$interval', '$window', 'NotificationsService', '$rootScope', function($http, $log, $interval, $window, NotificationsService, $rootScope) {
    function ForceRefreshService() {

        var self = this
        self.appVersion = null
        self.alreadyAlerted = false
        self.lastAlerted = false
        self.interval = 30000
        self.initialized = false

        this.checkVersion = function() {
            $log.debug("[ForceRefresh] Requesting app version")

            // Let's get the NG-app version from Magento
            $http({
                method: "get",
                url: "/api/rest/angularversion"
            }).success(
                function(response) {

                    $log.debug("[ForceRefresh] App version received:", response.version)

                    // When the NG app is loaded the first time, appVersion is null
                    if (self.appVersion == null) {
                        $log.debug("[ForceRefresh] App version is null, setting new app version:", response.version)
                        self.appVersion = response.version
                    } else if (self.appVersion < response.version) {
                        if (response.refresh === "force") {
                            $log.debug("[ForceRefresh] New version number. Need to force reload", self.appVersion, $window.location.pathname)
                            $window.location.reload()
                        } else if (response.refresh === "onroutechange") {
                            $log.debug("[ForceRefresh] New version number. Reloading onroutechange", self.appVersion, $window.location.pathname)
                            $rootScope.$on('$routeChangeSuccess', function() {
                                $window.location.reload()
                            })
                        } else if (response.refresh === "popup") {
                            if (self.lastAlerted != false) {
                                $log.debug("[ForceRefresh] last popup:", (Date.now() - self.lastAlerted.getTime()) / 1000, "seconds ago")
                            }

                            if (!self.alreadyAlerted || (self.lastAlerted != false && (Date.now() - self.lastAlerted.getTime()) > 300000)) {
                                NotificationsService.addNotification({
                                    message: "Hi there! A new version of Betabrand is available! <a href='" + $window.location.href + "' target='_self'>Click Here to reload!</a>",
                                    type: "alert"
                                })

                                self.alreadyAlerted = true
                                self.lastAlerted = new Date()
                            }
                        }
                    }
                }
            ).error(function(response) {
                $log.debug("[ForceRefresh] Error", response)
            })
        }

        this.initialize = function() {
            $rootScope.$on('viewLoaded', function(event, current) {
                if (!self.initialized) {
                    self.checkVersion() //We do a first version check to initialize the appVersion right away
                    self.startLoop()
                    self.initialized = true
                }
            })
        }

        // This function starts an interval function every x seconds
        this.startLoop = function() {
            $log.debug("[ForceRefresh] Initialize")

            // The interval function
            $interval(self.checkVersion, self.interval)

        }

    }

    return new ForceRefreshService();
}]).
run(function(ForceRefreshService) { // instance-injector
    ForceRefreshService.initialize()

});

BetabrandApp.service('ImageService', ['APP_CONFIG', '_',
    function ImageService(APP_CONFIG, _) {

        var defaultImageQuality = APP_CONFIG.defaultImageQuality || null
        var shards = APP_CONFIG.shards || [];

        var service = {
            formatImgSrc: formatImgSrc,
            lazyFormatSrc: lazyFormatSrc
        };

        return service;

        //handle sharding and image mod options
        function formatImgSrc(baseUrl, imageWidth, iopts) {
            // Skip image proxy if image baseUrl contains .gif
            // Running gifs through image proxy drastically increases file size
            if (!baseUrl || baseUrl.match("\.gif$"))
                return baseUrl

            // Get pixel ratio if available, and trim the decimal place.
            var ratio = ((typeof window.devicePixelRatio !== 'undefined') ? window.devicePixelRatio : 1);
            //handle sharding to cookieless domains if configured
            if (shards.length > 0) { baseUrl = baseUrl.replace((new RegExp((window.location.host.toString()), 'g')), shards[(baseUrl.length % shards.length)]) };

            iopts = iopts ? angular.copy(iopts) : []

            //add default quality
            if (defaultImageQuality) {
                iopts.unshift('q' + defaultImageQuality)
            }

            //apply image proxy options
            if (imageWidth) {
                iopts.unshift(Math.round(imageWidth) + 'x')
            }

            if (iopts.length) {
                var optionString = "iopts=" + iopts.join(",");
                baseUrl = baseUrl.match(/\?/) ? baseUrl + '&' + optionString : baseUrl + '?' + optionString
            }

            return baseUrl;
        };

        function lazyFormatSrc(breakpoints, src, options) {
            var thumbnails = [];
            _.each(breakpoints, function(breakpoint) {
                thumbnails.push(([formatImgSrc(src, breakpoint.imageWidth, options), (breakpoint.screenWidth + 'w')]).join(' '))
            });

            thumbnails = thumbnails.join(', ');
            return thumbnails;
        };

    }
]);

(function() {

    "use strict";

    initLookupResolve.$inject = ["$q", "$location", "$timeout", "LookupService", "ThinkTankService", "ProductService", "CategoryService", "CmsService", "$route", "ModelCitizenService"];

    function initLookupResolve($q, $location, $timeout, LookupService, ThinkTankService, ProductService, CategoryService, CmsService, $route, ModelCitizenService) {
        return {
            getData: getData
        };

        function getData() {
            var deferred = $q.defer();

            switch (LookupService.controller) {
                case "CmsController":
                    CmsService.getCmsPage(LookupService.id).then(function(response) {
                        deferred.resolve(response);
                    })
                    break
                case "ProductController":
                    var promises = {}

                    promises.product = ProductService.getProduct(LookupService.id)

                    // Find model citizen id if there is one
                    var m = window.location.search.match(/[\?|&]m=(\d+)/)

                    if (m) {
                        promises.modelcitizen = ModelCitizenService.getModelCitizen(m[1])
                    } else {
                        promises.modelcitizen = false
                    }

                    $q.all(promises).then(function(response) {
                        deferred.resolve(response);
                    })

                    break
                case "CategoryController":
                    var category_id = $route.current.categoryId || LookupService.id
                    var promises = {}

                    promises.category = CategoryService.getCategory(category_id)
                    promises.products = ProductService.getProductsForCategoryId(category_id)

                    $q.all(promises).then(
                        function(response) {
                            deferred.resolve(response);
                        },
                        function(response) {
                            $location.url("/404").replace();
                            deferred.reject();
                        }
                    )

                    break
                case "SubmissionController":
                    ThinkTankService.getDesign(LookupService.id, true).then(function(response) {
                        deferred.resolve(response.data);
                    })
                    break
                default:
                    deferred.resolve();
            }

            return deferred.promise
        }
    }

    angular
        .module("BetabrandApp")
        .factory("initLookupResolve", initLookupResolve);

})();

angular.module('BetabrandApp').provider('imageSharder', function ImageSharderProvider() {
    this.shards = {}

    this.addShards = function(host, shards) {
        this.shards[host] = shards
    };

    this.$get = [function imageSharderFactory() {
        return new ImageSharder(shards)
    }]

}).config(["$provide", "imageSharderProvider", "APP_CONFIG", function($provide, imageSharderProvider, APP_CONFIG) {

    if (APP_CONFIG && 'shards' in APP_CONFIG && APP_CONFIG.shards.length > 0) {
        imageSharderProvider.addShards(window.location.host, APP_CONFIG.shards)

        $provide.decorator('ngSrcDirective', function($delegate, $parse) {

            function getShard(url, shards) {
                var number = url.length,
                    shardIndex = number % shards.length;
                return shards[shardIndex]
            }

            function shardUrl(url) {
                angular.forEach(imageSharderProvider.shards, function(shards, host) {
                    if (url.match(new RegExp(host, "i"))) {
                        var shardHost = getShard(url, shards)
                        var hostRe = new RegExp(host, "i")
                        url = url.replace(hostRe, shardHost)
                    }
                })
                return url
            }

            // `$delegate` is an array of directives registered as `ngSrc`
            // the one we want is the first one.
            var ngSrc = $delegate[0]

            ngSrc.compile = function(element, attrs) {
                //console.log(attrs)

                return function(scope, element, attr) {
                    attr.$observe('ngSrc', function(value) {
                        //console.log(shardUrl(value))
                        if (value) {
                            attr.$set('src', shardUrl(value))
                        }
                    })
                }
            }

            // our compile function above returns a linking function
            // so we can delete this
            delete ngSrc.link

            return $delegate
        });
    }
}]);

angular.module('BetabrandApp').filter('phone', function() {
    return function(tel) {
        if (!tel) { return ''; }

        var value = tel.toString().trim().replace(/^\+/, '');

        if (value.match(/[^0-9]/)) {
            return tel;
        }

        var country, city, number;

        switch (value.length) {
            case 10: // +1PPP####### -> C (PPP) ###-####
                country = 1;
                city = value.slice(0, 3);
                number = value.slice(3);
                break;

            case 11: // +CPPP####### -> CCC (PP) ###-####
                country = value[0];
                city = value.slice(1, 4);
                number = value.slice(4);
                break;

            case 12: // +CCCPP####### -> CCC (PP) ###-####
                country = value.slice(0, 3);
                city = value.slice(3, 5);
                number = value.slice(5);
                break;

            default:
                return tel;
        }

        if (country == 1) {
            country = "";
        }

        number = number.slice(0, 3) + '-' + number.slice(3);

        return (country + " (" + city + ") " + number).trim();
    };
});
BetabrandApp.directive('emailShare', ['$window', '$log', function($window, $log) {

    return {
        restrict: 'E',
        replace: true,
        template: '<a ng-transclude ng-click></a>',
        scope: {
            url: "@",
            text: "@",
            subject: "@"
        },
        transclude: true,
        link: function(scope, element, attrs) {

            scope.url = scope.url || $window.location.href
            scope.subject = scope.subject || "Check this out"
            scope.text = scope.text || ""

            var shareUrl = "mailto:?subject=" + scope.subject + "&body=" + scope.text + " " + scope.url
            attrs.$set('target', "_blank");
            attrs.$set('href', shareUrl);
        }
    }
}]);

BetabrandApp.directive('facebookShare', ['$window', '$log', '$facebook', function($window, $log, $facebook) {

    return {
        restrict: 'EA',
        template: '<a ng-transclude ng-click></a>',
        scope: {
            url: "@",
            image: "@",
            description: "@",
            caption: "@",
            name: "@",
            callbackSuccess: "=?",
            callbackFail: "=?",
            valid: "="
        },
        transclude: true,
        link: function(scope, element, attrs) {

            element.on('click', function() {

                if (typeof FB !== "object") {
                    return
                }

                var shareData = {
                    method: 'feed',
                    link: scope.url ? scope.url : $window.location.href
                }

                if (scope.image) {
                    shareData['picture'] = scope.image
                }
                if (scope.caption) {
                    shareData['caption'] = scope.caption
                }
                if (scope.description) {
                    shareData['description'] = scope.description
                }
                if (scope.name) {
                    shareData['name'] = scope.name
                }

                $log.debug('Facebook sharing:', shareData)

                $facebook.ui(
                    shareData,
                    function(response) {
                        $log.debug("fb ui response", response)
                        var eventData = {};
                        if (response && response.post_id) {
                            scope.callbackSuccess(response)
                        } else {
                            scope.callbackFail()
                        }
                    }
                );

                return false

            })
        }
    }
}]);

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('twitterShare', twitterShare);

    function twitterShare() {
        var directive = {
            restrict: 'E',
            replace: true,
            template: '<a ng-transclude ng-click></a>',
            scope: {
                url: "@",
                text: "@",
                via: "@",
                hashtags: "@",
                callbackSuccess: "=?",
                valid: "="
            },
            transclude: true,
            link: linkFunc,
            controller: twitterShareController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            el.on('click', function() {
                $scope.vm.share();
            })
        }
    }

    twitterShareController.$inject = ['$scope', '$window', '$log'];

    function twitterShareController($scope, $window, $log) {
        var vm = this;

        vm.share = share;

        function share() {
            vm.url = vm.url || $window.location.href;
            var shareParams = ["url=" + vm.url];

            if (vm.via) {
                shareParams.push("via=" + vm.via);
            }

            if (vm.text) {
                shareParams.push("text=" + vm.text);
            }

            if (vm.hashtags) {
                shareParams.push("hashtags=" + vm.hashtags);
            }

            var shareUrl = encodeURI(shareParams.join("&"));

            vm.twitterWindow = window.open("http://twitter.com/intent/tweet?" + shareUrl,
                "Twitter",
                "status = 1, left = 430, top = 270, height = 550, width = 420, resizable = 0");

            vm.listener = function(event) {
                //watch for a successful tweet
                if (vm.twitterWindow && event.source == vm.twitterWindow && event.data != "__ready__") {
                    $log.debug("twitter callback", event);
                    vm.callbackSuccess();
                    window.removeEventListener("message", vm.listener, false);
                }
            };

            window.addEventListener("message", vm.listener, false);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('bbSharing', bbSharing);

    function bbSharing() {
        var directive = {
            restrict: 'EA',
            replace: true,
            scope: {
                size: '@',
                variety: '@',
                variant: '@'
            },
            transclude: true,
            templateUrl: '/angular/app/sharing_new/sharing.html',
            link: linkFunc,
            controller: bbSharingController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };
        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            var $facebook = scope.vm.$facebook;

            scope.callbackFail = function() {
                // Only if necessary.
            };
            scope.callbackSuccess = function() {
                // Only if necessary.
            };

            var share_title = scope.$parent.vm.productName ? scope.$parent.vm.productName : angular.element(window.document)[0].title;
            var share_url = attr.value ? attr.value : angular.element(window.document)[0].location.href;
            var share_subject = scope.subject || "Check this out";
            var share_text = scope.text || "";
            var share_image = attr.image ? attr.image : document.querySelector('meta[property="og:image"]')['content'];
            var share_description = document.querySelector('meta[name="description"]')['content'];

            var buildEmailShare = function() {
                if (ctrl.variety == 'referral') { share_url = scope.$parent.vm.url };
                scope.vm.emailShareUrl = "mailto:?subject=" + share_subject + "&body=" + share_text + " " + share_url;
                ctrl.$log.debug('emailShareUrl', scope.vm.emailShareUrl);
            }();

            scope.vm.buildFacebookShare = function() {
                ctrl.$log.debug('vm.buildFacebookShare');

                if (typeof FB !== "object") {
                    return
                }

                if (ctrl.variety == 'referral') {
                    share_url = scope.$parent.vm.url;
                    share_image = scope.$parent.vm.referrals.settings.shareImage;
                };

                var shareData = {
                    method: 'feed',
                    link: scope.url ? scope.url : share_url
                }

                if (scope.image) {
                    shareData['picture'] = scope.image;
                } else {
                    shareData['picture'] = share_image;
                }

                if (ctrl.variety == 'referral') {
                    shareData['caption'] = scope.$parent.vm.referrals.settings.facebookCaption;
                } else if (scope.caption) {
                    shareData['caption'] = scope.caption;
                }

                if (ctrl.variety == 'referral') {
                    shareData['description'] = scope.$parent.vm.referrals.settings.facebookDescription;
                } else if (scope.description) {
                    shareData['description'] = scope.description;
                } else {
                    shareData['description'] = share_description;
                }

                if (ctrl.variety == 'referral') {
                    shareData['name'] = scope.$parent.vm.referrals.settings.facebookName;
                }
                if (scope.name) {
                    shareData['name'] = scope.name;
                } else {
                    shareData['name'] = share_title;
                }

                $facebook.ui(
                    shareData,
                    function(response) {
                        var eventData = {};
                        if (response && response.post_id) {
                            scope.callbackSuccess(response)
                        } else {
                            scope.callbackFail()
                        }
                    }
                );

                return false;
            };

            scope.vm.buildTwitterShare = function() {
                // console.log('build the Twitter share link.');
                scope.url = scope.url || share_url;
                var shareParams = [];
                if (scope.via) {
                    shareParams.push("via=" + scope.via)
                }
                if (ctrl.variety == 'referral') {
                    shareParams.push("text=" + scope.$parent.vm.referrals.settings.twitterText.replace(/[; ]+/g, " ").trim())
                } else if (scope.text) {
                    shareParams.push("text=" + scope.text)
                }
                if (scope.hashtags) {
                    shareParams.push("hashtags=" + scope.hashtags)
                }
                if (ctrl.variety == 'referral') {
                    shareParams.push("url=" + scope.$parent.vm.url)
                } else {
                    shareParams.push("url=" + share_url)
                };
                var twitterShareUrl = encodeURI(shareParams.join("&"))

                scope.twitterWindow = window.open("http://twitter.com/intent/tweet?" + twitterShareUrl,
                    "Twitter",
                    "status = 1, left = 430, top = 270, height = 550, width = 420, resizable = 0");

                scope.listener = function(event) {
                    console.log('twitter listener', event);
                    //watch for a successful tweet
                    if (scope.twitterWindow && event.source == scope.twitterWindow && event.data != "__ready__") {
                        ctrl.$log.debug("twitter callback", event);
                        scope.callbackSuccess();
                        window.removeEventListener("message", scope.listener, false);
                    }
                }
                window.addEventListener("message", scope.listener, false);
            };

            var buildPinterestShare = function() {
                ctrl.AssetService.loadJs('//assets.pinterest.com/js/pinit.js', 'pinterest').then(function() {
                    if (typeof window.parsePins !== 'undefined') {
                        window.parsePins();
                    }
                })
                var pinTotal = [
                    '//www.pinterest.com/pin/create/button/?url=',
                    share_url,
                    '&media=',
                    share_image,
                    '&description=',
                    share_description
                ].join('');
                scope.vm.pinterestShareUrl = pinTotal;
            }();
        }
    }

    bbSharingController.$inject = ['$scope', '$facebook', '$log', 'AssetService'];

    function bbSharingController($scope, $facebook, $log, AssetService) {
        var vm = this;
        vm.$facebook = $facebook;
        vm.$log = $log;
        vm.AssetService = AssetService
    }


})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .directive("sharingTooltip", sharingTooltip);

    function sharingTooltip() {
        var directive = {
            restrict: "E",
            // replace: true,
            scope: {
                size: "@",
                variety: "@",
                image: "@",
                subject: "@",
                text: "@",
                value: "@",
            },
            // transclude: true,
            templateUrl: "/angular/app/sharing_new/sharing-tooltip.html",
            link: linkFunc,
            controller: sharingTooltipController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {


        }
    }

    sharingTooltipController.$inject = ["$scope"];

    function sharingTooltipController($scope) {

        var vm = this;

        vm.share_title = angular.element(window.document)[0].title;
        vm.share_url = vm.value ? vm.value : angular.element(window.document)[0].location.href;
        vm.share_subject = vm.subject || "Check this out";
        vm.share_text = vm.text || "";
        vm.share_image = vm.image ? vm.image : document.querySelector('meta[property="og:image"]')['content'];
        vm.share_description = document.querySelector('meta[name="description"]')['content'];

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("activity", activityDirective);

    function activityDirective() {
        var directive = {
            restrict: "E",
            scope: {
                activity: "=",
                position: "="
            },
            transclude: true,
            templateUrl: "/angular/app/stream/activity.html",
            link: linkFunc,
            controller: activityDirectiveController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    activityDirectiveController.$inject = ["$scope", "$window", "$timeout", "CustomerService", "TrackingService"];

    function activityDirectiveController($scope, $window, $timeout, CustomerService, TrackingService) {

        var vm = this;
        vm.CustomerService = CustomerService;
        vm.showAll = false
        vm.showComments = false
        vm.hasBeenViewed = false;

        vm.superComputer = {
            id: "143278",
            label: "Betabrand Supercomputer",
            url: "/u/betabrand",
            urlKey: "betabrand",
            image: "https://graph.facebook.com/629547323852905/picture?width=100&height=100"
        }

        if (!vm.activity.actors) {
            vm.activity.actors = []
            vm.activity.actors.push(vm.superComputer)
        }

        vm.threadId = false;
        if (vm.activity.product) {
            vm.threadId = "product-" + vm.activity.product[0].id
        }

        if (vm.activity.submission) {
            vm.threadId = "submission-" + vm.activity.submission.id
        }

        vm.toggleShowAll = function() {
            vm.showAll = !vm.showAll;
            $timeout(function() { angular.element($window).triggerHandler('scroll'); }, 0);
        }

        vm.trackImpression = function() {
            if (vm.hasBeenViewed) {
                var trackData = {
                    content_list: [vm.activity.foreign_id],
                    feed_id: vm.feedId,
                    location: 'Homepage',
                    Source: 'Stream'
                };

                TrackingService.trackEvent('View Activities', trackData)
            }
        };

        vm.activityScroll = function() {
            // Only add activity which has a foreign_id (i.e. not product recommendations)
            if (vm.activity.foreign_id !== null && !vm.hasBeenViewed) {
                vm.hasBeenViewed = true;

                vm.trackImpression();
            } else {
                // Disable the method after we've added the activity
                vm.activityScroll = false;
            }
        }
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("stream", stream);

    function stream() {
        var directive = {
            restrict: "E",
            replace: true,
            scope: {
                feedId: "=",
                initialized: "=",
                feedOptions: "="
            },
            transclude: true,
            templateUrl: "/angular/app/stream/stream.html",
            link: linkFunc,
            controller: streamController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    streamController.$inject = ['$scope', 'ActivityStreamService', '_', '$timeout', '$window', '$location', '$document', '$log', 'CustomerService', 'TrackingService', 'ProductService', 'SailthruService', 'AssetService', 'APP_CONFIG', '$kookies', 'PollsService', 'OptimizelyService'];

    function streamController($scope, ActivityStreamService, _, $timeout, $window, $location, $document, $log, CustomerService, TrackingService, ProductService, SailthruService, AssetService, APP_CONFIG, $kookies, PollsService, OptimizelyService) {

        var vm = this;

        // Track how many pages have been loaded
        vm.page = 0

        var _rawStream = [];
        var _rawRecommendations = [];

        var reccomendationsStartingPosition = 2; //the position of the first rec in the stream
        var activitiesPerReccomendation = 4; //how many activities to show before showing a rec

        vm.oldestAcitivityId = false;
        vm.hasLoadedMore = false;
        vm.endOfStream = false;
        vm.initialized = false;
        vm.adminMode = false;
        vm.CustomerService = CustomerService

        vm.spmSectionId = APP_CONFIG.spmConfig && APP_CONFIG.spmConfig.streamSectionId ? APP_CONFIG.spmConfig.streamSectionId : "";

        vm.enableAdminMode = function() {
            vm.adminMode = true
        }

        function _clearActivityCache() {
            $log.debug("Clearing activity cache on log out")
            ActivityStreamService.resetCachedActivities()
        }

        vm.deleteActivity = function(activityId, feedId) {
            $log.debug('[ActivityStreamDirective] Deleteing activity', activityId, ' from origin feed ', feedId)
            if (confirm("Deleting this activity will remove it from all customer's feeds.\nAre you sure that's what you want?")) {
                ActivityStreamService.deleteActivity(activityId, feedId).then(function(response) {
                    ActivityStreamService.removeActivityFromList(_rawStream, activityId)
                });
            }
        }

        //if user logs in or out, lets reset the activity cache
        $scope.$on('loggedOut', _clearActivityCache)
        $scope.$on('loggedIn', _clearActivityCache)

        if (ActivityStreamService.hasCachedActivities(vm.feedId)) {
            $log.debug("[ActivityFeed] Using cached activities")
            var activityCache = ActivityStreamService.getCachedActivities(vm.feedId)
            _rawStream = activityCache.data.activities
            _renderActivities()
        } else {
            $log.debug("[ActivityFeed] Loading fresh activities")
            _getActivities(vm.feedOptions);
        }

        _getRecommendations()

        function _getActivities(options, append) {
            var append = typeof append == "undefined" ? true : append
            vm.loading = true
            ActivityStreamService.getActivities(vm.feedId, options, append).then(
                function(response) {
                    if (append) {
                        _rawStream = _rawStream.concat(response.data.activities)
                    } else {
                        _rawStream = response.data.activities
                    }

                    //if the server sent us back a different feedId
                    //which happens when the requested feed is empty
                    //lets switch over and start using that one for future calls this session
                    if (response.data.feedId && response.data.feedId != vm.feedId) {
                        vm.feedId = response.data.feedId
                    }

                    _renderActivities()
                },
                function(response) {
                    // Do something here if request failed
                    vm.loading = false
                    vm.endOfStream = true
                }
            )
        }

        function _getRecommendations() {
            AssetService.waitForLibrary('sailthru').then(getSailthruRecommendations)

            function getSailthruRecommendations() {
                SailthruService.getRecommendations(vm.spmSectionId, 'homepage-stream').then(function(response) {
                    _rawRecommendations = response;
                    _filterStream()
                    vm.initialized = true
                }, function(error) {
                    vm.initialized = true
                })
            }
        }

        function _renderActivities() {
            vm.filters = _.uniq(_.map(_rawStream, function(v) {
                return v.verb
            }))
            _filterStream()
            vm.loading = false
            vm.initialized = true
        }

        function _filterStream() {

            var counter = 0;
            vm.stream = []
            angular.forEach(_rawStream, function(activity) {
                //inject recommendations in here and there
                counter++

                // Start pinned content 
                // Pinning the stream survey for some data gathering from non-internal
                if (vm.feedId.indexOf("user:") == -1 &&
                    $kookies.get("betabrand-filter-internal") !== 1 &&
                    counter == 1 &&
                    vm.stream.length == 0) {
                    if (OptimizelyService.handle("showArticleOnStream")) {
                        vm.stream.unshift({
                                "id": null,
                                "actors": [{
                                    "id": "80605",
                                    "bio": "<p></p>",
                                    "label": "Jessica E.",
                                    "urlKey": "theoxfordist",
                                    "lastSeen": "2017-01-12 15:00:46",
                                    "avatar": "https://static7.betabrands.com/media/users/80605/20161025210225_unspecified.jpg",
                                    "title": "Her Majesty of all things Social Media @ Betabrand.",
                                    "uniqueUrl": "https://www.betabrand.com/u/theoxfordist/",
                                    "uniqueName": "The Oxfordist"
                                }],
                                "verb": "mc_photo_upload",
                                "time": "2017-01-12T23:02:26-08:00",
                                "origin": "user:80605",
                                "modelcitizen_photo": [{
                                    "entity_id": "73766",
                                    "customer_id": "80605",
                                    "product_id": "8983",
                                    "type": "model",
                                    "customer_email": "zloubier1@gmail.com",
                                    "customer_firstname": "",
                                    "customer_lastname": "",
                                    "image": "https://www.betabrand.com/media/cms/dpyp-outfits/4up-card.jpg",
                                    "show_on_wall_of_fame": "0",
                                    "retail_upload": "0",
                                    "comment": "",
                                    "id": 73766,
                                    "position": "0",
                                    "created_at": "2017-01-12 15:02:26",
                                    "thumbnail": "https://www.betabrand.com/media/cms/dpyp-outfits/4up-card.jpg",
                                    "customer": {
                                        "id": "80605",
                                        "bio": "<p></p>",
                                        "label": "Jessica E.",
                                        "urlKey": "theoxfordist",
                                        "lastSeen": "2017-01-12 15:00:46",
                                        "avatar": "https://static7.betabrands.com/media/users/80605/20161025210225_unspecified.jpg",
                                        "title": "Her Majesty of all things Social Media @ Betabrand.",
                                        "uniqueUrl": "https://www.betabrand.com/u/theoxfordist/",
                                        "uniqueName": "The Oxfordist"
                                    },
                                    "public_base_url": "/mens-black-throwing-star-graphic-t-shirt.html",
                                    "url": "https://www.betabrand.com/4-yoga-pants-outfit-ideas",
                                    "coupon": "MODclownattack4NB6DP",
                                    "votes": {
                                        "score": 0,
                                        "up": 0,
                                        "down": 0
                                    },
                                    "uniqueUrl": "https://www.betabrand.com/4-yoga-pants-outfit-ideas",
                                    "uniqueName": "an article"
                                }],
                                "headline": {
                                    "subject": [{
                                        "url": "https://www.betabrand.com/u/theoxfordist/",
                                        "name": "Jessica Egbu"
                                    }],
                                    "verb": "posted an",
                                    "object": [{
                                        "url": "https://www.betabrand.com/4-yoga-pants-outfit-ideas",
                                        "name": "article"
                                    }]
                                }
                            }

                        );
                    }

                }
                // End pinned content

                if (_rawRecommendations.length &&
                    (counter == reccomendationsStartingPosition || (counter - reccomendationsStartingPosition) % activitiesPerReccomendation == 0)) {
                    var recommendationIndex = Math.floor(counter / activitiesPerReccomendation);
                    vm.stream.push(_createRecommendationActivity(_rawRecommendations[recommendationIndex]))
                }

                if (!vm.filterBy || vm.filterBy == activity.verb) {
                    vm.stream.push(activity)
                }
            })

        }

        function _createRecommendationActivity(product) {
            var activity = {
                "verb": "product_rec",
                headline: {
                    subject: [{
                        name: "Betabrand",
                        url: false
                    }],
                    verb: "recommends",
                    object: [{
                        name: product.name,
                        url: product.canonicalUrl
                    }]
                },
                "product": [product],
                "origin": null,
                "time": new Date(),
                "id": null,
                "foreign_id": null
            }

            return activity;
        }

        vm.getMoreActivities = function() {
            vm.hasLoadedMore = true
            var oldestId = vm.stream[vm.stream.length - 1].id
            vm.feedOptions.id_lt = oldestId

            // Track the fact that the user requested a new page
            vm.page++
                var trackData = {
                    Source: 'Stream',
                    feed_id: vm.feedId,
                    page: vm.page
                }
            TrackingService.trackEvent('Load More Activities', trackData)

            _getActivities(vm.feedOptions, true);
        }

        vm.getMoreActivitiesThrottled = _.throttle(vm.getMoreActivities, 500);

        vm.streamScroll = function() {
            if (!vm.loading && vm.hasLoadedMore && !vm.endOfStream) {
                vm.getMoreActivitiesThrottled()
            }
        }

        var _watchFeedId = function(current, original) {
            if (original && (current !== original)) {
                vm.loading = true;
                vm.oldestAcitivityId = false;
                vm.hasLoadedMore = false;
                vm.endOfStream = false;
                vm.initialized = false;
                _getActivities(vm.feedOptions, false)
            }
        }

        $scope.$watch('vm.feedId', _watchFeedId, false)


    }

})();

BetabrandApp.factory('ActivityStreamService', ['$http', '$q', '$location', '_', '$log',
    function ActivityStreamService($http, $q, $location, _, $log) {
        function ActivityStreamService() {
            var self = this

            //private variable for storing loaded activities
            _cacheTTL = 300 //time to live in seconds
            _activityCache = {}
            self.resetCachedActivities = function(feedId) {
                _activityCache[feedId] = {
                    updatedAt: new Date(),
                    data: {
                        activities: []
                    }
                }
                return _activityCache[feedId]
            }

            self.lastClickedActivity = null

            self.hasCachedActivities = function(feedId) {
                //does this feed exist in the activity cache?
                if (!(feedId in _activityCache)) {
                    return false
                }

                var now = new Date(),
                    cacheAge = (now - _activityCache[feedId].updatedAt) / 1000

                return _activityCache[feedId].data && _activityCache[feedId].data.activities && _activityCache[feedId].data.activities.length > 0 && cacheAge < _cacheTTL
            }

            self.getCachedActivities = function(feedId) {
                if (!(feedId in _activityCache)) {
                    return self.resetCachedActivities(feedId)
                } else {
                    return _activityCache[feedId]
                }
            }



            self.getActivities = function(feed, options, appendToCache) {
                var optionStr = '',
                    separator = '?';

                var appendToCache = typeof appendToCache == "undefined" ? true : appendToCache
                var deferred = $q.defer()

                // List of available options: http://getstream.io/docs/#retrieve
                // NAME    TYPE    DESCRIPTION DEFAULT OPTIONAL
                // limit   {int}   The amount of activities requested from the APIs
                // id_gte  {int}   Filter the feed on ids greater than or equal to the given value
                // id_gt   {int}   Filter the feed on ids greater than the given value
                // id_lte  {int}   Filter the feed on ids smaller than or equal to the given value
                // id_lt   {int}   Filter the feed on ids smaller than the given value
                // offset  {int}   The offset

                _.each(options, function(option, optionName) {
                    optionStr += separator + 'option[' + optionName + ']=' + option;
                    if (separator == '?') {
                        separator = '&';
                    }
                });

                $http({
                    method: 'GET',
                    url: '/api/rest/stream/feed/' + feed + optionStr
                }).then(function(response) {
                    //if cache is enabled, lets store the activities in a class variable so we can recall later without an http request
                    //mainly used for back button returning you to the same point in the feed
                    if (appendToCache) {
                        if (!self.hasCachedActivities(feed)) {
                            _activityCache[feed] = self.resetCachedActivities(feed)
                        }
                        _activityCache[feed].updatedAt = new Date()
                        _activityCache[feed].data.activities = _activityCache[feed].data.activities.concat(response.data.activities)
                    }
                    deferred.resolve(response)
                }, function(error) {
                    deferred.reject(error);
                })

                return deferred.promise
            }

            self.getFollowers = function(feed, offset, limit) {
                offset = offset || 0;
                limit = limit || 25;

                var optionStr = '?offset=' + offset + '&limit=' + limit;

                return $http({
                    method: 'GET',
                    url: '/api/rest/stream/followers/' + feed + optionStr
                });
            }

            self.deleteActivity = function(activityId, feedId) {
                var deferred = $q.defer()

                $log.debug('[ActivityStreamService] Deleteing activity', activityId, ' from origin feed ', feedId)
                $http({
                    method: 'DELETE',
                    url: '/api/rest/stream/feed/delete/' + feedId + '/' + activityId
                }).then(function(response) {
                    deferred.resolve(response);

                    self.removeActivityFromList(_activityCache[feed].data.activities, activityId)
                }, function(error) {
                    deferred.reject(error);
                })

                return deferred.promise
            }

            self.canDeleteActivities = function(customerId) {
                return true;
            }

            self.removeActivityFromList = function(activityList, activityId) {
                _.each(activityList, function(activity, index) {
                    if (activity.id == activityId) {
                        $log.debug('[ActivityStreamService] Removed activity ', activityId, ' from cached activities')
                        delete activityList[index]
                    }
                })
            }

            self.addActivity = function(verb, entityId) {
                return $http({
                    method: 'POST',
                    url: '/api/rest/stream/activities',
                    data: {
                        verb: verb,
                        submission_id: entityId
                    }
                });
            }
        }

        return new ActivityStreamService()
    }
]);

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .config(config);

    function config($routeProvider) {
        $routeProvider
            .when('/styleguide', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/atoms.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/atoms', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/atoms.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/molecules', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/molecules.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/organisms', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/organisms.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/templates', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/templates.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/pages', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/pages.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/pages/product', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/product.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/pages/submission', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/submission.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/pages/patternlab', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/patternlab.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
            .when('/styleguide/pages/collection', {
                controller: 'StyleguideController as vm',
                controllerAs: 'styleguide',
                templateUrl: '/angular/app/styleguide/collection.html',
                reloadOnSearch: false,
                resolve: {
                    styleguidePrepService: styleguidePrepService
                }
            })
    }

    function styleguidePrepService($q, HomepageService, CustomerService, ConnectionsService, CategoryService, ProductService, ThinkTankService, ModelCitizenService) {

        return $q.all({
            homepage: HomepageService.getHomepage(),
            me: CustomerService.getData(),
            addresses: CustomerService.getAddresses(4880),
            profile: CustomerService.getProfile(4880),
            connections: ConnectionsService.getFollowers(4880, 'full'),
            crowdfunding: CategoryService.getCategory(69),
            crowdfundingProducts: ProductService.getProductsForCategoryId(69, 12),
            dpyp: CategoryService.getCategory(88),
            dpypProducts: ProductService.getProductsForCategoryId(88, 12),
            dressPants: ProductService.getProduct(2222),
            preorderProducts: ProductService.getProducts([12790, 12792]),
            submission: ThinkTankService.getDesign(8081, true),
            polarVortex: ThinkTankService.getDesign(5367, true),
            mcPhotos: ModelCitizenService.getPhotosByTag('USA Pants')
        });
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .controller('StyleguideController', StyleguideController);

    StyleguideController.$inject = ["$scope", "$q", "$timeout", "$window", "styleguidePrepService", "TrackingService", "PageService", "_", "CustomerService", "CartService", "CheckoutService", "ProductService"]

    function StyleguideController($scope, $q, $timeout, $window, styleguidePrepService, TrackingService, PageService, _, CustomerService, CartService, CheckoutService, ProductService) {

        var vm = this,
            flktyInitialized = false

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            'Source': "Styleguide"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType('ItemPage')
        PageService.setBodyClass('styleguide')

        vm.setActionButtonSample = function() {
            vm.actionButtonSample = true
            $timeout(function() {
                vm.actionButtonSample = false
            }, 2000);
        }

        vm.CartService = CartService
        vm.CustomerService = CustomerService
        vm.CheckoutService = CheckoutService
        vm.TrackingService = TrackingService
        vm.ProductService = ProductService

        vm.homepage = styleguidePrepService.homepage.config.homepage
        vm.users = styleguidePrepService.connections.following
        vm.user = styleguidePrepService.me
        vm.fullProfile = styleguidePrepService.me
        vm.addresses = styleguidePrepService.addresses
        vm.profile = styleguidePrepService.profile.data
        vm.crowdfunding = styleguidePrepService.crowdfunding
        vm.crowdfunding.products = styleguidePrepService.crowdfundingProducts
        vm.dpyp = styleguidePrepService.dpyp
        vm.dpyp.products = styleguidePrepService.dpypProducts
        vm.dressPants = styleguidePrepService.dressPants
        vm.preorderProducts = styleguidePrepService.preorderProducts
        vm.submission = styleguidePrepService.submission.data
        vm.polarVortex = styleguidePrepService.polarVortex.data
        vm.mcPhotos = styleguidePrepService.mcPhotos.data

        vm.commentThread = [{ "id": "44185", "threadId": "product-2222", "rootParent": null, "parent": null, "user": { "id": "650139", "bio": null, "label": "Kaichi I.", "urlKey": "kaichi-i", "lastSeen": null, "role": "Collaborator", "avatar": "https:\/\/graph.facebook.com\/772709344204\/picture?width=100&height=100", "title": null }, "score": 0, "body": "There used to be a matching blazer to go with these pants; is this no longer available?", "date": "2016-03-01T09:55:40-08:00", "deleted": 0 }, { "id": "61799", "threadId": "product-2222", "rootParent": null, "parent": null, "user": { "id": "1025193", "bio": null, "label": "S D.", "urlKey": "s-d-1180", "lastSeen": "2016-07-06 02:18:43", "role": "Collaborator", "avatar": "https:\/\/secure.gravatar.com\/avatar\/88d18860d3792ac560bc22c1c72789b8?d=identicon", "title": null }, "score": 0, "body": "Wish these came in a slightly larger waist size.", "date": "2016-07-03T18:30:51-07:00", "deleted": 0 }, { "id": "63963", "threadId": "product-2222", "rootParent": null, "parent": null, "user": { "id": "557457", "bio": null, "label": "Rebecca J.", "urlKey": "557457", "lastSeen": "2016-07-17 13:34:32", "role": "Collaborator", "avatar": "https:\/\/graph.facebook.com\/658173484600\/picture?width=100&height=100", "title": null }, "score": 0, "body": "purchased for husband. One of the buttons ripped off when buttoning them (inside one ripped like thread was weakened or it was a poor sew). They also look like sweat pants and not really like dress pants, so if you have less casual office environment, just know others will immediately recognize them as sweat pants. They were worn twice after the button ripped and have since been recycled.", "date": "2016-07-17T13:34:46-07:00", "deleted": 0 }]
        vm.comment = {
            "id": "44185",
            "threadId": "product-2222",
            "rootParent": null,
            "parent": null,
            "user": {
                "id": "650139",
                "bio": null,
                "label": "Kaichi I.",
                "urlKey": "kaichi-i",
                "lastSeen": null,
                "role": "Collaborator",
                "avatar": "https://graph.facebook.com/772709344204/picture?width=100&height=100",
                "title": null
            },
            "score": 0,
            "body": "There used to be a matching blazer to go with these pants; is this no longer available?",
            "date": "2016-03-01T09:55:40-08:00",
            "deleted": 0
        }

        _.each(vm.mcPhotos, function(photo) {
            photo.image = photo.image.replace('.io:443', '.com')
            photo.image = photo.image.replace('.io', '.com')
        })

        vm.make = '<h4 class="h4">Care</h4> <p>Machine-wash cold, lay flat to dry.</p> <h4 class="h4">Fit</h4> <p>The Comfort-First Blouse fits loose through the body, with fitted sleeves.</p> <h4 class="h4">Vital Statistics</h4> <ul> <li>Fabric: jersey viscose blend (94% siro viscose, 6% spandex).</li> <li>Bust-flattering surplice style with hook closure.</li> <li>Faux-tuck front. </li> <li>Long back keeps your rear covered.</li> </ul>'

        vm.story = '<h3 class="h3">Effortlessly Put Together</h3><p class="h5">Here\'s what Yuri Lee has to say about her design:</p><p>After falling in love with Dress Pant Yoga Pants, I wanted to design a top that does everything they do for my wardrobe. This ultra-comfy, professional blouse tops my favorite pants perfectly; whether at work or getting together with friends, you\'ll look effortlessly put-together without compromising comfort.</p><p>This blouse has a hidden snap above the bust to ensure work-wearability, as well as faux-tuck functionality to eliminate bunching and re-tucking! Finally, the loose back means you\'ll never accidentally show off your backside again.</p>'

        vm.dpypBillboard = '<h2 class="h2">Dress Pant <i class="betabrand-lotus"></i> Yoga Pants</h2><p>Dress Pant Yoga Pants combine sophisticated styling with a soft, stretch performance knit.<br> We think they\'ll be the most comfortable pants you ever wear to work.</p>'

        vm.dropdownSizeData = [{ id: 1, label: 'X-Small' }, { id: 2, label: 'Small' }, { id: 3, label: 'Medium' }, { id: 4, label: 'Large' }]
        vm.dropdownColorData = [{ id: 1, label: 'Marsala', swatch: 'https://www.betabrand.com/media/catalog/product/s/t/straight_leg___marsala_dress_pant_yoga_pants_15.jpg' }, { id: 2, label: 'Pewter', swatch: 'https://www.betabrand.com/media/catalog/product/s/t/straight_leg___pewter_dress_pant_yoga_pants_7.jpg' }, { id: 3, label: 'Black', swatch: 'https://www.betabrand.com/media/catalog/product/s/t/straight_leg___black_dress_pant_yoga_pants_9.jpg' }, ]

        $scope.$on('updateAddresses', function(event, addresses) {
            vm.addresses = addresses
        })

        $scope.$emit('viewLoaded')

        $timeout(function() {
            if (!flktyInitialized) {
                var flktyElement = document.querySelector('.carousel');
                if (flktyElement) {

                    var flkty = new Flickity(flktyElement, {
                        // options
                        cellAlign: 'center',
                        freeScroll: true,
                        wrapAround: true,
                        pageDots: false,
                        autoPlay: false

                    });
                    flktyInitialized = true
                }
            }
            // angular.element($window).triggerHandler('scroll');
        }, 200);

    }

    angular
        .module('BetabrandApp').directive('colorCard', ['$timeout', function($timeout) {
            return {
                replace: true,
                scope: true,
                template: '<div class="grid-item card--color"> <footer class="background-{{color}}-middark"> <strong>{{color | capitalize}} Dark</strong> <span>{{dark}}</span></footer> <header class="background-{{color}}"> <strong>{{color | capitalize }}</strong> <span>{{base}}</span> </header> <footer class="background-{{color}}-midlight"> <strong>{{color | capitalize}} Light</strong> <span>{{light}}</span> </footer> </div> ',
                link: function(scope, elm, attrs) {

                    scope.color = attrs.color

                    scope.rbgToHex = function(color) {
                        if (color.substr(0, 1) === "#") {
                            return color;
                        }
                        var nums = /(.*?)rgb\((\d+),\s*(\d+),\s*(\d+)\)/i.exec(color),
                            r = parseInt(nums[2], 10).toString(16),
                            g = parseInt(nums[3], 10).toString(16),
                            b = parseInt(nums[4], 10).toString(16);
                        return "#" + (
                            (r.length == 1 ? "0" + r : r) +
                            (g.length == 1 ? "0" + g : g) +
                            (b.length == 1 ? "0" + b : b)
                        );
                    }

                    $timeout(function() {
                        var rgbBase = getComputedStyle(document.querySelector('.background-' + scope.color)).backgroundColor
                        scope.base = scope.rbgToHex(rgbBase).toUpperCase()

                        var rgbDark = getComputedStyle(document.querySelector('.background-' + scope.color + '-middark')).backgroundColor
                        scope.dark = scope.rbgToHex(rgbDark).toUpperCase()

                        var rgbLight = getComputedStyle(document.querySelector('.background-' + scope.color + '-midlight')).backgroundColor
                        scope.light = scope.rbgToHex(rgbLight).toUpperCase()
                    }, 0);

                }
            }
        }])
})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .directive("styleselector", styleselector);

    function styleselector() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {
                product: "="
            },
            transclude: true,
            templateUrl: "/angular/app/styleselector/styleselector.html",
            link: linkFunc,
            controller: styleSelectorController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    styleSelectorController.$inject = ["$scope", "_", "CategoryService", "LookupService", "ProductService"];

    function styleSelectorController($scope, _, CategoryService, LookupService, ProductService) {

        var vm = this;
        vm.styles = {}
        var dpyp = new RegExp(/boot-cut|straight-leg|cropped-leg|leggings/)
        var match = dpyp.exec(vm.product.subClassification)

        if (match && (vm.product.name.indexOf('Dress Pant Yoga Pants') > -1)) {

            ProductService.getProductsForCategoryId(88, 50, "full").then(function(products) {

                var styles = _.compact(_.uniq(_.flattenDeep(_.map(products, 'subClassification'))))

                _.each(styles, function(key, i) {

                    var styleProducts = _.filter(products, function(product) {
                        return product.subClassification && product.subClassification.indexOf(key) >= 0
                    })

                    vm.styles[key] = {
                        'products': styleProducts,
                        'name': key,
                        'url': styleProducts[0].url,
                        'active': vm.product.subClassification == key
                    }

                })

            })

        }

    }

})();


(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("SubmissionController", SubmissionController);

    SubmissionController.$inject = ['$scope', '$timeout', '$document', '$window', 'ProductService', 'LookupService', '$route', 'ThinkTankService', 'ModalService', 'PageService', '$sce', "_", "ImageService", 'CustomerService', '$q', 'TrackingService', '$routeParams']

    function SubmissionController($scope, $timeout, $document, $window, ProductService, LookupService, $route, ThinkTankService, ModalService, PageService, $sce, _, ImageService, CustomerService, $q, TrackingService, $routeParams) {

        var vm = this

        //If we're coming in from a route like /idea/12345
        //then just grab the submission id from the route params
        if ($routeParams.submissionId) {
            vm.submissionId = $routeParams.submissionId
            vm.templateUrl = '/angular/app/submission/submission.html'

        }
        //otherwise, we're using the lookup service to grab the submission ID and template
        else {
            vm.templateUrl = LookupService.templateUrl
            vm.submissionId = LookupService.id
        }

        vm.CustomerService = CustomerService
        vm._ = _
        vm.statsView = false
        vm.activeTab = "details"
        vm.submission = $route.current.locals.lookupResolve
        vm.gender = vm.submission.gender == "Not specified" ? null : vm.submission.gender
        vm.tags = _.chain(vm.submission.tags).map("tag").without("Womens").without("Mens").without("Unisex").value()

        vm.formatImages = ImageService.lazyFormatSrc

        var trackingData = null
        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)

        function _buildTrackingData(data) {
            data = data || {}

            // Analytics: Set up Page Tracking Data
            var source = 'Think Tank Submission'

            trackingData = {
                'Source': source,
                'Submission ID': data.id,
                'Submission Name': data.name,
                'Submission Gender': data.gender
            }

            trackingDeferred.resolve(trackingData)
        }

        _buildTrackingData(vm.submission)

        vm.submission.media.images = _.filter(vm.submission.media.images, function(elm) {
            return elm.indexOf('.ai') == -1 && elm.indexOf('.eps') == -1 && elm.indexOf('.pdf') == -1 && elm.indexOf('.word') == -1
        })

        vm.commentHighlights = {}
        angular.forEach(vm.submission.designers, function(designer) {
            if (!designer.id)
                return;
            vm.commentHighlights[designer.id] = 'designer'
        })

        //create an array of designers
        var collaborators = "designers" in vm.submission ? _.map(vm.submission.designers, "label") : []
            //add betabrand on the end
        collaborators.push("Betabrand")
            //make a nice list of designers for the page title
        var collaboratorList = collaborators.join(" X ")
        var previewImage = "preview" in vm.submission.media ? vm.submission.media.preview.image : vm.submission.thumbnail

        vm.metaData = {
            title: vm.submission.name ? vm.submission.name + " | " + collaboratorList : false,
            image: previewImage ? previewImage : false,
            description: vm.submission.shortDescription ? vm.submission.shortDescription : false,
            canonical: vm.submission.canonicalUrl ? window.location.origin + '/' + vm.submission.canonicalUrl : false
        }


        vm.showHowItWorksModal = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/how-it-works/how-it-works-modal.html",
                controller: "HowItWorksModalController"
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        vm.changeTab = function(tab) {
            if (tab == "details") {
                vm.activeTab = "details"
            }
            if (tab == "dashboard") {
                TrackingService.trackEvent('View Dashboard')
                vm.activeTab = "dashboard"
            }
        }

        PageService.setBodyClass('submission-page')
        PageService.setMicrodataItemType('ItemPage')
        PageService.updateMetaData(vm.metaData);

        $scope.$emit('viewLoaded')

        $timeout(function() {
            angular.element($window).triggerHandler('scroll');
        }, 300);

    }

})();


(function() {
    'use strict';

    angular
        .module('BetabrandApp')
        .directive('submissionGallery', submissionGallery);

    function submissionGallery() {
        var directive = {
            restrict: 'E',
            replace: true,
            templateUrl: '/angular/app/submission/submissionGallery.html',
            scope: {
                tag: "@?",
                sortMethod: "@?",
                hideSubmitIdea: "@?",
                limit: "=",
                hideVoted: "=",
                replaceVoted: "=?",
                contest: "@?",
                hideId: "@?",
            },
            transclude: true,
            link: linkFunc,
            controller: submissionGalleryController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

            if (ctrl.replaceVoted) {
                // Helper to climb DOM looking for click region ancestor.
                var findAncestor = function(el, cls) {
                    while ((el = el.parentElement) && !el.classList.contains(cls));
                    return el;
                };
                var swapArrayElements = function(arr, indexA, indexB) {
                    var temp = arr[indexA];
                    arr[indexA] = arr[indexB];
                    arr[indexB] = temp;
                };
                // You would use this like: swapArrayElements(myArray, 3, 7);

                // Section adds handlers and behavior for card replacer.
                el.bind('click touchstart', function(e) {

                    var newCard,
                        parentEl = findAncestor(e.target, 'product-card'),
                        parentPublished = findAncestor(e.target, 'published') || findAncestor(e.target, 'greenlit'),
                        parentVote = findAncestor(e.target, 'vote-button'),
                        parentSkip = findAncestor(e.target, 'skip-button');

                    var postAction = function(actionName) {
                        var offsets = {
                            width: parentEl.offsetWidth,
                            height: parentEl.offsetHeight,
                            left: parentEl.offsetLeft,
                            top: parentEl.offsetTop
                        };
                        parentEl.classList.add(actionName);
                        $scope.$parent.viewLimit++;
                        // Set height overflow so I can retrieve new entries and use the natural offset.
                        el[0].style.height = el[0].offsetHeight + 'px';

                        ctrl.$timeout(function() {
                            angular.element(ctrl.$window).triggerHandler('scroll');
                        }, 750).then(function() {
                            var cardIndex = ctrl._.findIndex($scope.vm.submissions, function(matchingCard) { return matchingCard.id == parentPublished.dataset.productId });
                            swapArrayElements($scope.vm.submissions, cardIndex, $scope.$parent.viewLimit - 1);
                            // console.log('$scope.vm.submissions', $scope.vm.submissions);					
                            // Trigger scroll for images to load.
                        }, 1000).then(function() {
                            angular.element(ctrl.$window).triggerHandler('scroll');
                        });
                    };
                    if ((parentEl !== null) && (parentVote !== null) || e.target.classList.contains('vote-button')) {
                        // console.log('VOTING initiated.');
                        postAction('voted');
                    }
                    if ((parentEl !== null) && (parentSkip !== null) || e.target.classList.contains('skip-button')) {
                        // console.log('skip this item');
                        postAction('skipped');
                    }
                });

            }

        }
    }

    submissionGalleryController.$inject = ['$scope', 'ThinkTankService', 'CustomerService', '_', '$timeout', '$window', 'OptimizelyService'];

    function submissionGalleryController($scope, ThinkTankService, CustomerService, _, $timeout, $window, OptimizelyService) {
        var vm = this;

        vm._ = _;
        vm.$timeout = $timeout;
        vm.$window = $window;
        vm.isThinkTankCategory = true;
        vm.replaceVerb = OptimizelyService.handle("replaceVoted")

        //limitTo filter breaks when passed undefined value
        if (!vm.limit) {
            vm.limit = 1000;
        }

        ThinkTankService.getSubmissions('all', true, vm.tag).then(function(response) {
            var submissions = response.data;
            if (vm.hideVoted) {
                CustomerService.getData().then(function(response) {
                    if (response.loggedIn) {
                        submissions = _.filter(submissions, function(d) {
                            return !CustomerService.hasVoted('submission', d.id);
                        });
                        vm.submissions = submissions;
                    }
                })
            }

            if (vm.hideId) {
                submissions = _.without(submissions, _.find(submissions, { id: vm.hideId }))
                submissions = _.without(submissions, _.find(submissions, { id: parseInt(vm.hideId) }))
            }

            vm.submissions = submissions
            vm.sortSubmissions(vm.sortMethod)


        });

        vm.sortSubmissions = function(method) {
            switch (method) {
                case "random":
                    var oldSubmissions = _.clone(vm.submissions);
                    vm.submissions = [];
                    do {
                        var index = _.random(0, oldSubmissions.length - 1);
                        vm.submissions.push(oldSubmissions[index]);
                        oldSubmissions.splice(index, 1)
                    } while (oldSubmissions.length > 0);
                    break;
                default:
                    break;
            }
        }

    }

})();

BetabrandApp.directive('swimlane', ['TrackingService', function(TrackingService) {
    return {
        scope: {
            classification: "=",
            carouselCount: "="
        },
        // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
        templateUrl: '/angular/app/swimlane/swimlane.html',
        replace: true,
        link: function($scope, elm, attrs) {

            $scope._init = function() {

            }

            $scope.toggleActive = function() {
                $scope.classification.activateSwimlane = false;
                $scope.classification.transformAmount = 0;
            }

        }
    };
}]);

BetabrandApp.directive('swimlanes', ['TrackingService', '_', '$filter', '$timeout', '$window', 'hotkeys', function(TrackingService, _, $filter, $timeout, $window, hotkeys) {
    return {
        scope: {
            products: "=",
            filterSorters: "=",
            filterOtions: "=",
            sorterOtions: "="
        },
        // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
        templateUrl: '/angular/app/swimlane/swimlanes.html',
        replace: true,
        link: function($scope, elm, attrs) {


            $scope.variation = 1
            $scope.classifications = []
            $scope.swimlaneOrder = '-filteredProducts.length'
            $scope.carouselCount = 3
            $scope.margin = 0
            var body = document.body,
                products,
                classifications

            $scope.$watch('products', function(newVal, oldVal) {
                if (newVal !== oldVal)
                    $scope._init()
            })

            $scope.$on('changeSwimlaneVariation', function(event, swimlaneVariation) {
                $scope.variation = swimlaneVariation || 0
                $timeout(function() {
                    $scope._init()
                }, 0);
            })

            $scope.onResize = function() {

                if (body.clientWidth < 768) {
                    $scope.carouselCount = 1
                    $scope.margin = 0
                } else if (body.clientWidth > 767 && body.clientWidth < 1200) {
                    $scope.carouselCount = 2
                    $scope.margin = .03125
                } else {
                    $scope.carouselCount = 3
                    $scope.margin = .03125
                }

                _.each($scope.classifications, function(classification, i) {
                    if (classification.activateSwimlane)
                        classification.transform()
                })

            }


            $scope._init = function() {

                products = []
                classifications = []
                $scope.classifications = []

                switch ($scope.variation) {
                    case 0:
                        classifications = _.compact(_.uniq(_.flatten(_.map($scope.products, 'classification'))))
                        break
                    case 1:
                        classifications = _.compact(_.uniq(_.flatten(_.map($scope.products, 'classification'))))
                        break
                    case 2:
                        classifications = ['60%+', '50%-60%', '40%-50%', '30%-40%', '20%-30%']
                        break

                }

                _.each(classifications, function(key, i) {

                    if ($scope.variation == 0 || $scope.variation == 1) {

                        products = _.filter($scope.products, { 'classification': [key] })
                        $scope.swimlaneOrder = '-filteredProducts.length'

                    } else {

                        switch (key) {
                            case '60%+':
                                products = _.filter($scope.products, function(d) {
                                    return d.prices.discount_percentage >= 60
                                })
                                break
                            case '50%-60%':
                                products = _.filter($scope.products, function(d) {
                                    return d.prices.discount_percentage >= 50 && d.prices.discount_percentage <= 59
                                })
                                break
                            case '40%-50%':
                                products = _.filter($scope.products, function(d) {
                                    return d.prices.discount_percentage >= 40 && d.prices.discount_percentage <= 49
                                })
                                break
                            case '30%-40%':
                                products = _.filter($scope.products, function(d) {
                                    return d.prices.discount_percentage >= 30 && d.prices.discount_percentage <= 39
                                })
                                break
                            case '20%-30%':
                                products = _.filter($scope.products, function(d) {
                                    return d.prices.discount_percentage >= 20 && d.prices.discount_percentage <= 29
                                })
                                break
                        }
                        $scope.swimlaneOrder = null

                    }

                    console.log(key)

                    $scope.classifications.push({
                        'activateSwimlane': true,
                        'products': products,
                        'filteredProducts': [],
                        'dots': function() {
                            return _.fill(Array(Math.ceil(this.filteredProducts.length / $scope.carouselCount)), '1')
                        },
                        'label': key,
                        'key': key.replace(/[%$& ]/g, "-"),
                        'index': 0,
                        'transformAmount': 0,
                        'setIndex': function(index) {
                            this.index = index
                            this.transform()
                        },
                        'calcIndex': function(direction) {
                            if (direction == 'right') {
                                this.index--
                            } else {
                                this.index++
                            }
                            this.transform()
                        },
                        'transform': function() {
                            var elm = angular.element(document.querySelector('.swimlane__scroll-area-' + this.key.replace(/[%$& ]/g, "-")))[0]
                            var amount = 0
                            if (elm) {
                                var scrollWidth = elm.clientWidth * this.index
                                var margin = scrollWidth * $scope.margin
                                amount = (scrollWidth + margin)
                            }
                            this.transformAmount = amount
                        }
                    })



                })
                console.log($scope.classifications)

                $scope.$watch('filterSorters', $scope.doFilter, true)

                angular.element($window).on('resize', $scope.onResize)

                $scope.onResize()

            }

            $scope.doFilter = function() {

                _.each($scope.classifications, function(classification, i) {

                    classification.filteredProducts = $filter('filterFields')(classification.products, { gender: $scope.filterSorters.selectedFilter.gender, color: $scope.filterSorters.selectedFilter.color, classification: $scope.filterSorters.selectedFilter.classification, subClassification: $scope.filterSorters.selectedFilter.subClassification });
                    classification.filteredProducts = _.sortBy(classification.filteredProducts, function(item) {
                        if ($scope.filterSorters.selectedSorter == "prices.final" && $scope.filterSorters.sortReverse) {
                            return -1 * item.prices.final
                        } else if ($scope.filterSorters.selectedSorter == "prices.final") {
                            return item.prices.final
                        } else if ($scope.filterSorters.selectedSorter == "thinktankCounts.voting.count" && $scope.filterSorters.sortReverse) {
                            return -1 * item.thinktankCounts.voting.count
                        } else if ($scope.filterSorters.selectedSorter == "thinktankCounts.voting.count") {
                            return item.thinktankCounts.voting.count
                        } else {
                            return -1 * item.position
                        }
                    })

                    $timeout(function() {
                        angular.element($window).triggerHandler('scroll');
                        classification.setIndex(0)
                    }, 0)
                })

            }

        }
    };
}]);

angular.module("templates", []).run(["$templateCache", function($templateCache) {
    $templateCache.put("/angular/app/avatars/avatar.html", "<a ng-href=\"{{vm.user.url}}\" class=\"avatar avatar-{{::vm.variety}} avatar-{{::vm.size}}\" ng-style=\"{\'background-image\': \'url(\'+ ( vm.user.avatar || vm.user.image ) +\')\'}\" ng-title=\"{{::vm.user.label}}\">\n	<img ng-src=\"{{::vm.user.image || vm.user.avatar}}\" ng-alt=\"{{::vm.user.label}}\" data-pin-nopin=\"true\">\n</a>\n");
    $templateCache.put("/angular/app/billboards/billboards.html", "<a ng-href=\"{{vm.url}}\" class=\"billboard background-{{ vm.theme }} billboard-{{ vm.variety }} billboard-content--{{ vm.alignment }}\" ng-style=\"{\'background-image\': \'url(\'+ vm.image +\')\'}\" ng-title=\"{{vm.headline}}\" ng-class=\"{\'billboard-image\': vm.image}\">\n	<div class=\"billboard-content\" aria-hidden=\"true\">\n		<h3 class=\"h1\" ng-if=\"vm.headline\">{{ vm.headline }}</h3>\n		<div class=\"billboard__body\" ng-bind-html=\"vm.body | sanitize\" ng-if=\"vm.body\"></div>\n		<span class=\"button button-{{ vm.theme }}\" ng-if=\"vm.buttonText\">{{ vm.buttonText }}</span>\n	</div>\n</a>\n");
    $templateCache.put("/angular/app/buybar/buybar.html", "<div class=\"buybar\">\n\n    <span off-click=\"vm.options.isOpen = false\" ng-class=\"{ \'is-single-attribute\' : vm.attributeCount == 0 } \">\n\n		<div class=\"select-dropdown\" ng-if=\"vm.product.isSalable\" ng-show=\"vm.attributeCount > 0\" my-escape=\"vm.closeDropdown()\">\n			<button type=\"button\" class=\"select-dropdown__label\" ng-class=\"{\'isOpen\':vm.options.isOpen}\" ng-click=\"vm.setOpenState($event)\" aria-haspopup=\"true\" aria-live=\"polite\" aria-atomic=\"true\">\n				{{vm.selectedLabel}}\n			</button>\n			<div class=\"select-dropdown__dropdown\" ng-class=\"{\'isOpen\':vm.options.isOpen, \'select-dropdown__dropdown--multiple\' : vm.attributeCount > 1}\" aria-hidden=\"{{!vm.openDropdown}}\" aria-label=\"color submenu\" tabindex=\"0\">\n                <div class=\"select-dropdown__attribute\" ng-repeat=\"(index, attributes) in vm.product.attributes | toArray\">\n                    <div class=\"h6\" ng-if=\"vm.attributeCount > 1\">{{attributes[0].label}}</div>\n                    <div class=\"select-dropdown__options\">\n	                    <div class=\"select-dropdown__option\" ng-repeat=\"attribute in attributes | orderBy : \'position\'\">\n	                    	<button class=\"select-dropdown__option-label\" ng-click=\'attribute.available ? vm.selectAttribute(index, attribute) : vm.showOutOfStockModal(attribute);\' ng-class=\"{\'button-primary is-selected\': (attribute.selected && attribute.available), \'in-stock\': attribute.available, \'out-of-stock\': !attribute.available, \'button button-outline\' : vm.attributeCount > 1}\">\n		                        <small class=\"size\" ng-class=\"{\'size--pre-order\' : attribute.preorder}\">{{attribute.value}}</small>\n	                    	</button>\n	                        <span class=\"pre-order\" ng-if=\"attribute.available && attribute.preorder && !vm.product.preorder && vm.attributeCount == 1\">Pre-order for 10% off</span>\n	                    </div>                    	\n                    </div>\n                </div>\n\n                <p ng-if=\"vm.containsUnavailable\"><small><button class=\"link-colored\" ng-click=\"vm.showOutOfStockModal()\"><strong>Is your size out of stock?</strong></button></small></p>\n			\n			</div>\n		</div>\n\n        <button class=\"add-to-cart button-cta button button-primary button-full\" type=\"button\" ng-class=\"{\'out-of-stock\': !vm.product.isSalable, \'error\': vm.addToCartText == vm.addToCartError, \'simple__product\' : vm.attributeCount == 0} \" ng-click=\"vm.product.isSalable ? vm.addToCart(vm.product) : vm.showOutOfStockModal()\" ng-if=\"vm.product.isSalable\">\n            {{vm.addToCartText}}\n            <span class=\"explanation\" ng-if=\"vm.product.preorder || vm.product.preorderSelected\">Estimated shipping in <span>{{vm.product.shippingDate}}</span>.</span>\n        </button>\n\n		<div ng-if=\"vm.product.prices.final == 1\">\n			<p>You\'ve found an archived product or idea. Enter your email if you\'d like us to reconsider creating this!</p>\n		</div>\n\n        <out-of-stock-form ng-if=\"vm.product.id && !vm.product.isSalable\" product=\"vm.product\"></out-of-stock-form>\n\n    </span>\n</div>\n");
    $templateCache.put("/angular/app/cart/cart.html", "<div class=\"cart-container\">\n	<h3 class=\"cart__header visuallyhidden\" tabindex=\"0\">Your Cart - press escape to return to the menu.</h3>\n	<div class=\"cart--isEmpty\" ng-if=\"!vm.CartService.data.items && vm.CartService.initialized\">\n		<h4 class=\"h1\"><i class=\"fa fa-frown-o\"></i></h4>\n		<div class=\"h5\">Your cart is empty and sad</div>\n		<div class=\"buttons-container\">\n			<a href=\"/sale\" class=\"button button-primary button-cta\">Shop Now</a>			\n		</div>\n	</div>\n	<div class=\"h5 loading-cart\" ng-if=\"!vm.CartService.initialized\"><i class=\"fa fa-refresh fa-spin\"></i> Loading your cart</div>\n	<div class=\"cart--isFull\" ng-if=\"vm.CartService.data.items.length && vm.initialized\">\n		<apple-pay ng-if=\"vm.cartContext == \'offscreen\' && !vm.CartService.hasCrowdfundingItems\"></apple-pay>\n		<div class=\"checkout-buttons\" ng-if=\"vm.cartContext == \'offscreen\' && vm.CartService.data.items && vm.CartService.initialized\">\n			<button class=\"button button-primary button-cta\" ng-disabled=\"!vm.CartService.mostRecentPromise.promise.$$state.status\" ng-click=\"vm.openCheckout()\"><i class=\"fa fa-shopping-cart\"></i> Checkout</button>\n			<button class=\"button button-paypal\" ng-if=\"!vm.CartService.hasCrowdfundingItems\" ng-disabled=\"!vm.CartService.mostRecentPromise.promise.$$state.status\" ng-click=\"vm.paypalCheckout()\"><i class=\"fa fa-paypal\"></i> Paypal Checkout</button>\n		</div>\n		<div class=\"cart-products\">\n			<div class=\"cart-product\" ng-repeat=\"product in vm.CartService.data.items\">\n				<div class=\"cart-product__row\">\n					<a ng-href=\"{{product.url}}\" class=\"cart-product__image\">\n						<img ng-src=\"{{product.image}}\" ng-alt=\"{{product.name}}\">\n						<span class=\"cart-product__flag cart-product__flag--preorder\" ng-if=\"product.preorder\">Pre-Order</span>\n						<span class=\"cart-product__flag cart-product__flag--crowdfunding\" ng-if=\"product.crowdfunding\">Funding</span>\n						<div class=\"cart-product__shipping cart-product__shipping--preorder\" ng-if=\"product.preorder\">Ships in {{product.shippingDate}}</div>\n						<div class=\"cart-product__shipping cart-product__shipping--crowdfunding\" ng-if=\"product.crowdfunding\">Ships in {{product.shippingDate}}</div>\n					</a>\n					<div class=\"cart-product__details\">\n						<a ng-href=\"{{product.url}}\" class=\"cart-product__name h6\">{{product.name}}</a>\n						<div class=\"cart-product__actions\">\n							<label for=\"quanity-1\" class=\"visuallyhidden\">Quantity</label>\n							<input class=\"input-short\" type=\"number\" min=\"0\" max=\"20\" inputmode=\"numeric\" pattern=\"[0-9]*\" ng-model=\"product.qty\" ng-disabled=\"product.illusion\" ng-required ng-change=\"vm.debouncedUpdateTotal(product)\">\n							<div class=\"cart-product__options\">\n								<span class=\"cart-products__option\" ng-repeat=\"(name, attribute) in product.options | orderBy : \'position\'\">\n		                            {{name}}: {{attribute}}{{!$last?\', \' : \'\'}}\n		                        </span>\n								<div class=\"cart-products__total\">\n									{{product.qty * product.price | currency}}\n								</div>\n								<div ng-if=\"product.crowdfunding\">\n									<span ng-if=\"vm.CustomerService.hasVoted(\'submission\', product.submissionId)\">30%</span>\n									<span ng-if=\"!vm.CustomerService.hasVoted(\'submission\', product.submissionId)\">15%</span> \n									discount reflected below\n								</div>\n							</div>\n						</div>\n						<div class=\"cart-product__shipping cart-product__shipping--preorder\" ng-if=\"product.preorder\">Ships in {{product.shippingDate}}</div>\n						<div class=\"cart-product__shipping cart-product__shipping--crowdfunding\" ng-if=\"product.crowdfunding\">Ships in {{product.shippingDate}}</div>\n					</div>\n					<button class=\"cart-product__remove\" ng-click=\"!product.illusion && vm.removeProduct(product, $index)\"><i class=\"betabrand-close\"></i></button>\n				</div>\n			</div>\n			<free-undies-buy-bar ng-if=\"vm.CartService.freeTshirtEligible\"></free-undies-buy-bar>\n		</div>\n		<div ng-if=\"vm.CartService.outOfStockItems.length\" class=\"cart-products__out-of-stock\">\n			<div class=\"h6\">Some items in your cart are out of stock:</div>\n			<a ng-href=\"{{product.url}}\" ng-repeat=\"product in vm.CartService.data.items track by $index\">\n				<strong>{{product.name}}</strong> - <span ng-repeat=\"(name, attribute) in product.options\">{{name}}: {{attribute}}{{!$last ? \', \' : \' \'}}</span>\n			</a>\n		</div>\n		<div class=\"cart-discount\">\n			<form novalidate>\n				<div class=\"input--has-button\">\n					<label for=\"cart-discount\" class=\"visuallyhidden\">Discount code</label>\n					<input type=\"text\" id=\"cart-discount\" placeholder=\"Have a discount code?\" autocomplete=\"off\" name=\"cart-discount\" ng-model=\"vm.CartService.data.couponCode\" class=\"fb-offer\">\n					<button class=\"button\" type=\"button\" aria-label=\"Apply Discount Code\" ng-class=\"{\'button-primary\':vm.CartService.data.couponCode.length}\" ng-click=\"vm.applyCoupon(vm.CartService.data.couponCode)\">Apply</button>\n				</div>\n\n				<div class=\"cart-discount__response cart-discount__response--error\" ng-if=\"vm.discountErrorMessage && !(vm.discountError.code == 401)\">\n					<p><strong>{{vm.discountErrorMessage}}</strong>.</p>\n					<p>If you need help, please contact customer service at <a class=\"link\" href=\"mailto:info@betabrand.com?subject=Discount code help\">info@betabrand.com</a> or <a class=\"link-colored\" href=\"tel:(800) 694-9491\">(800) 694-9491</a>.</p>\n				</div>\n\n\n				<growl-notification ng-if=\"vm.discountError.code == 401\">\n					<!-- <p>{{vm.discountError.code}}</p> -->\n					<p><strong>You must be logged in to use a gift card. Please <button class=\"link-colored\" ng-click=\"vm.CustomerService.showLoginModal()\">log in</button> or <button class=\"link-colored\" ng-click=\"vm.CustomerService.showLoginModal()\">create an account</button></strong>.</p>\n					<p>If you need help, please contact customer service at <a class=\"link\" href=\"mailto:info@betabrand.com?subject=Gift card code help\">info@betabrand.com</a> or <a class=\"link-colored\" href=\"tel:(800) 694-9491\">(800) 694-9491</a>.</p>\n				</growl-notification>\n\n\n				<div class=\"cart-discount__response cart-discount__response--success\" ng-if=\"vm.discountSuccessMessage\">{{vm.discountSuccessMessage}}</div>\n			</form>\n		</div>\n		<div class=\"cart-totals\" id=\"cart-totals\" ng-if=\"vm.CartService.mostRecentPromise.promise.$$state.status\">\n			<h4 class=\"visuallyhidden\">Cart Totals</h4>\n			<div class=\"justified-list\" ng-show=\"!vm.CartService.calculatingTotals\" ng-repeat=\"item in vm.CartService.data.totals | toArray : false | orderBy:\'position\'\" ng-if=\"item.code!=\'grand_total\' || vm.CartService.mostRecentPromise.promise.$$state.status\">\n				<span class=\"{{ $last ? \'h4\' : \'\'}}\">{{item.title}}: <strong class=\"discount-label\" ng-if=\"item.code == \'discount\'\" ng-click=\"vm.CartService.removeCoupon()\">{{item.subtitle}} <i class=\"fa fa-close\"></i></strong></span>\n				<span class=\"fancy {{ $last ? \'h4\' : \'\'}}\">{{item.value | currency}}</span>\n			</div>\n		</div>\n		<affirm-directive ng-if=\"!vm.CartService.hasCrowdfundingItems\" total=\"{{vm.CartService.getTotal()}}\"></affirm-directive>\n		<div class=\"cart-totals cart-totals__loading-message\" aria-live=\"polite\" ng-if=\"!vm.CartService.mostRecentPromise.promise.$$state.status\">\n			<span class=\"fa fa-refresh fa-spin\"></span> Calculating<span class=\"visuallyhidden\"> new total</span>\n		</div>\n		<div class=\"cart-message\" ng-if=\"vm.CartService.data.items.length\">\n			<p class=\"h5 fancy decorated-type\" ng-if=\"!vm.CustomerService.data.loggedIn && vm.CartService.data.freeShippingOffer.freeShippingActive !== true\">\n				<span>Get free shipping when you  <button class=\"link-colored\" ng-click=\"vm.CustomerService.showLoginModal()\">login</button>.</span>\n			</p>\n			<div class=\"h5 fancy decorated-type\" ng-if=\"vm.CustomerService.data.loggedIn || vm.CartService.data.freeShippingOffer.freeShippingActive === true\"><span>You qualify for free shipping!</span></div>\n		</div>\n		<div class=\"cart-mobile-footer checkout-buttons\" ng-if=\"vm.cartContext == \'offscreen\' && vm.CartService.data.items && vm.CartService.initialized\">\n			<apple-pay ng-if=\"vm.cartContext == \'offscreen\' && !vm.CartService.hasCrowdfundingItems\"></apple-pay>\n			<button class=\"button button-primary button-cta\" ng-disabled=\"!vm.CartService.mostRecentPromise.promise.$$state.status\" ng-click=\"vm.openCheckout()\"><i class=\"fa fa-shopping-cart\"></i> Checkout</button>\n			<button class=\"button button-paypal\" ng-if=\"!vm.CartService.hasCrowdfundingItems\" ng-disabled=\"!vm.CartService.mostRecentPromise.promise.$$state.status\" ng-click=\"vm.paypalCheckout()\"><i class=\"fa fa-paypal\"></i> Paypal Checkout</button>\n		</div>		\n	</div>\n</div>\n");
    $templateCache.put("/angular/app/category/category.html", "<div id=\"category\" class=\"category category-{{::vm.data.id}}\" category-scrolled ng-init=\"vm.revealCount = 14; vm.revealAmount = 14;\">\n	<div ng-if=\"staticked\" ng-init=\"vm.revealCount = statickedCount; vm.revealAmount = statickedCount;\"></div>\n	<!-- Collection -->\n	<div class=\"category-header-ratio\" ng-if=\"::vm.data.products && !vm.data.customHtml\">\n		<div class=\"category-header\">\n			<!-- <img ng-src=\"{{::vm.data.image}}\" ng-alt=\"{{::vm.data.name}}\"> -->\n			<div class=\"category-header-row\">\n				<div class=\"category-header--image\">\n					<div ng-if=\"!staticked\" class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" afkl-lazy-image=\"{{::vm.formattedThumbnails([{screenWidth:480, imageWidth:480}, {screenWidth:640, imageWidth:640}, {screenWidth:1024, imageWidth:1400}], vm.data.image)}}\" afkl-lazy-image-options=\"::{alt: vm.data.name, \'nolazy\': true}\" title=\"{{::vm.data.name}}\"></div>\n					<img ng-if=\"staticked\" ng-src=\"{{::vm.data.image}}\" class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" ng-title=\"{{::vm.data.name}}\" style=\"opacity: 1;\">\n				</div>\n				<div class=\"category-header--text\">\n					<div class=\"category-header--text-content\">\n						<div class=\"category-breadcrumbs\">\n							<span itemscope itemtype=\"http://data-vocabulary.org/Breadcrumb\">\n								<a itemprop=\"url\" href=\"/\"><i class=\"fa fa-home\" itemprop=\"title\"><span class=\"visually-hidden\"></span></i></a> <i class=\"fa fa-angle-right\"></i>\n							</span>\n							<span itemscope itemtype=\"http://data-vocabulary.org/Breadcrumb\" ng-repeat=\"category in vm.data.breadcrumbs track by $index\">\n								<a itemprop=\"url\" ng-href=\"{{category.url}}\"><span itemprop=\"title\">{{category.name}}</span></a>\n							</span>\n							<h1 class=\"h1\" ng-bind-html=\"vm.data.name\"></h1>\n						</div>\n						<p class=\"lead\" ng-bind-html=\"::vm.data.description | sanitize\"></p>\n					</div>\n				</div>\n			</div>\n		</div>\n	</div>\n	<div class=\"category-intro--custom\" ng-if=\"vm.data.customHtml\" ng-bind-html=\"vm.data.customHtml | sanitize\" compile></div>\n	<div ng-if=\"::vm.data.products\">\n		<div class=\"page-columns\">\n			<div class=\"page-column--left product-sidebar\" ng-class=\"{\'is-active\':vm.PageService.showMobileFilters}\" sticky-box sticky-box-offset=136 sticky-breakpoint=768>\n				<aside>\n					<div class=\"category-filters\">\n						<div class=\"filter-sidebar\">\n							<filter-sorter collection=\"vm.data.products\" filter-options=\"vm.filterOptions\" sorter-options=\"vm.sorterOptions\" filter-sorters=\"vm.filterSorter\" ng-if=\"vm.data.products\"></filter-sorter>\n						</div>\n						<hr>\n					</div>\n				</aside>\n			</div>\n			<div class=\"page-column--right\">\n				<filter-breadcrumbs filter-sorters=\"vm.filterSorter\"></filter-breadcrumbs>\n				<section class=\"category-products js-category-scrolled-target\" ng-if=\"::!vm.showSwimlanes\">\n					<div class=\"product-card grid-item\" ng-if=\"::vm.data.id==67 || vm.data.id==164 || vm.data.id==168\">\n						<div class=\"product__pad\">\n							<submit-idea></submit-idea>\n						</div>\n					</div>\n					<product-card class=\"product-card grid-item\" product=\"::product\" category=\"::vm.data.products\" index=\"{{::$index}}\" filters=\"{{::product.filterClasses}}\" is-think-tank-category=\"::vm.data.isThinkTankCategory\" ng-repeat=\"product in vm.data.products | limitTo : vm.revealCount track by product.id\"></product-card>\n				</section>\n				<swimlanes products=\"vm.data.products \" filter-sorter=\"vm.filterSorter \" ng-if=\"vm.showSwimlanes \"></swimlanes>\n				<p class=\"category-products__emptyresults \" ng-if=\"vm.data.products.length==0 \">\n					Sorry, the filters you selected didn\'t match any products.\n				</p>\n				<span class=\"category__products--loading \" when-scrolled=\"vm.revealCount=vm.revealCount+vm.revealAmount; \">\n					<div class=\"spinner \" ng-if=\"vm.revealCount < vm.data.submissions.length \">\n						<div class=\"bounce1 \"></div>\n						<div class=\"bounce2 \"></div>\n						<div class=\"bounce3 \"></div>\n				    </div>\n				</span>\n				\n			</div>\n		</div>\n	</div>\n	<!-- Top Level Category -->\n	<div class=\"top-level \" ng-if=\"::!vm.data.products \">\n		<div class=\"category-breadcrumbs \">\n			<a href=\"/ \"><i class=\"fa fa-home \"></i></a> <i class=\"fa fa-angle-right \"></i>\n			<h1 class=\"h1 \">{{::vm.data.name}}</h1>\n		</div>\n		<div class=\"card-gallery \">\n			<div class=\"card transparent-card \" ng-repeat=\"category in vm.data.children | orderBy: \'position\' \">\n				<a ng-href=\"{{::category.url}} \">\n					<!-- <img ng-src=\"https://static1.betabrands.com/media/styleguide/womens-tops.png \" ng-alt=\"{{::vm.data.name}} \"> -->\n					<div class=\"description-card__image--collection \">\n						<div ng-if=\"!staticked\" class=\"afkl-lazy-wrapper afkl-img-ratio-1-1 \" afkl-lazy-image=\"{{::vm.formattedThumbnails([{screenWidth:480, imageWidth:480}, {screenWidth:640, imageWidth:640}], category.image)}} \" afkl-lazy-image-options=\"::{alt: category.name, \'nolazy\': true} \" title=\"{{::category.name}} \"></div>\n						<img ng-if=\"staticked\" class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" ng-src=\"{{::category.image}}\" title=\"{{::category.name}}\">\n\n					</div>\n					<div class=\"description-card__details \">\n						<div class=\"h2 \">{{::category.name | removeCollectionPrefix}}</div>\n						<p ng-bind-html=\"::category.description \"></p>\n					</div>\n				</a>\n			</div>\n		</div>\n	</div>\n</div>\n");
    $templateCache.put("/angular/app/category/filter-breadcrumbs.html", "<div class=\"list-filters\">\n	<div class=\"filter-breadcrumbs\" ng-if=\"vm.hasSelectedFilters()\">\n		<span class=\"selected product-tag\" ng-if=\"filter !== \'!!\'\" ng-repeat=\"(key,filter) in vm.filterSorters.selectedFilterLabels\" ng-click=\"vm.clearFilter(key); $event.stopPropagation()\">\n			<span>\n				{{filter | cleanOptions | removeTagPrefixLabel}}\n				<span class=\"cancel\"><i class=\"fa fa-times-circle\"></i></span>\n			</span>\n		</span>\n	</div>\n	<div class=\"toggle-filters-button\">\n		<h6>Filters</h6>\n		<button class=\"toggle-open-close\" ng-class=\"{\'is-active\':vm.PageService.showMobileFilters}\" ng-click=\"vm.PageService.showMobileFilters = !vm.PageService.showMobileFilters\">\n			<span></span>\n			<span></span>\n			<span></span>\n			<span></span>\n		</button>\n	</div>\n</div>\n");
    $templateCache.put("/angular/app/category/filter-sorter.html", "<div class=\"filters-wrapper\" id=\"filters__sorters\">\n	<div class=\"filters-sorters-band-wrapper\" id=\"filters-sorters-band-wrapper\">\n		<div class=\"filters-sorters-band\">\n\n			<div class=\"sorters\" ng-class=\"{active:vm.showSorters}\" ng-if=\"vm.sorterOptions.length && !vm.hideSorters\">\n				<h5 ng-click=\"vm.handleSorterClick()\">Sort by: <span class=\"selected\">{{sorterLabel}}</span></h5>\n				<div class=\"dropdown\">\n					<ul>\n						<li class=\"sort option\" ng-class=\"{active: vm.filterSorters.selectedSorter==option.attribute}\" ng-click=\"vm.changeSorter(option.attribute, option.label, true)\" ng-repeat=\"option in vm.sorterOptions\">\n							{{option.label | cleanOptions}}\n						</li>\n					</ul>\n				</div>\n			</div>\n\n			<div class=\"filters\" ng-class=\"::{active:vm.showFilters}\">\n				<div class=\"dropdown filters-dropdown filters-{{filter.attribute}}\" ng-if=\"filter.options.length>1\" ng-repeat=\"(index, filter) in vm.filters | toArray : false | orderBy: \'position\' \">\n					<h5>{{::filter.label}} <button ng-click=\"filter.active = !filter.active\"><i class=\"fa fa-{{ filter.active ? \'minus-square-o\' : \'plus-square-o\'}}\"></i></button></h5>\n					<ul class=\'filter-{{filter.attribute}}\' ng-if=\"filter.active\">\n						<li class=\"filter option {{filter.attribute}}-{{option.value}}\" ng-class=\"{ active : (vm.filterSorters.selectedFilter[filter.attribute] == option.value), disabled:option.matching==0}\" ng-repeat=\"option in filter.options | orderBy: \'value\'\" ng-click=\"vm.changeFilter(filter.attribute, option.value, option.value, option.matching)\" ng-if=\"option.value\">\n							<h2>{{ option.value | cleanOptions | removeTagPrefixLabel }}{{ filter.attribute == \'prices.discount_percentage\' ? \'%\' : \'\' }}</h2>\n						</li>\n					</ul>\n				</div>\n			</div>\n		</div>\n	</div>\n</div>\n");
    $templateCache.put("/angular/app/category/special/category-dpyp.html", "<div class=\"category dpyp-category\">\n	<div class=\"category-header-dpyp\">\n		<video ng-src=\"https://static1.betabrands.com/media/videos/dpyp-video.mp4\" autoplay loop poster=\"https://static1.betabrands.com/media/videos/dpyp-video-poster.jpg\" ng-if=\"isDesktop && optimizely.dpypNoText.id!=\'no-text\'\"></video>\n		<img class=\"category-header__poster\" src=\"https://static1.betabrands.com/media/videos/dpyp-video-poster.jpg\" alt=\"Dress Pant Yoga Pants\" ng-if=\"!isDesktop\">\n		<div class=\"category-header__title\">\n			<h1>Dress Pant <img src=\"/media/configurator/dpyp/icons/lotus-white.svg\" style=\"width:50px;\"> Yoga Pants</h1>\n			<h2 class=\"h2\">Free Shipping &amp; Free Returns</h2>\n		</div>\n	</div>\n	<div class=\"category-header__description\">\n		<p class=\"lead\">Dress Pant Yoga Pants combine sophisticated styling with a soft, stretch performance knit. <br class=\"break-desktop\">We think they\'ll be the <span>most comfortable pants</span> you ever wear to work.</p>\n		<h3 class=\"h3 decorated-type\"><span>The Collection</span></h3>\n		<p>Yoga pants for the office? We don\'t think that\'s a stretch. Far and away our most popular crowdfunded products ever!</p>\n	</div>\n	<div class=\"billboards category-styles\">\n		<div class=\"category-styles__style\" ng-repeat=\"style in vm.configurator.styles | toArray : false | orderBy:\'position\'\">\n			<a ng-href=\"{{style.url}}\">\n				<bb-billboard variety=\"vertical\" alignment=\"center\" headline=\"{{::style.label.replace(\'-leg\',\'\')}}\" button-text=\"Shop Now\" url=\"{{style.url}}\" image=\"{{::style.image}}\"></bb-billboard>\n				<h3 class=\"h3\">{{::style.label}}</h3>\n			</a>\n			<div class=\"category-styles__swatches\">\n				<a ng-href=\"{{product.url}}\" ng-repeat=\"product in style.products\" ng-style=\"{\'background-image\': \'url(\' + product.swatch + \')\'}\" ng-mouseover=\"style.hoveredStyle = product.swatchLabel;\" ng-mouseleave=\"style.hoveredStyle = style.products.length + \' styles\'\">{{product.swatchLabel}}</a>\n				<div>{{style.hoveredStyle}}</div>\n			</div>\n		</div>\n	</div>\n	<div class=\"product-related\" ng-if=\"vm.otherProducts == \'work-it\'\">\n		<h3 class=\"h3 decorated-type\"><span>More Products From Our Workwear Collection</span></h3>\n		<product-gallery category-id=\"162\"></product-gallery>\n	</div>\n	<div class=\"product-related\" ng-if=\"vm.otherProducts == \'other-dpyp\'\">\n		<h3 class=\"h3 decorated-type\"><span>More Dress Pant Yoga Pant Styles</span></h3>\n		<product-gallery category-id=\"242\"></product-gallery>\n	</div>\n</div>\n");
    $templateCache.put("/angular/app/colorselector/colorselector.html", "<div class=\"product-color-selector\">\n	<span ng-repeat=\"obj in vm.colorProducts | orderObjectBy:\'inventory\':true\" ng-click=\"vm.changeColor(obj.id); vm.selectedProductColor = obj.id\" data-id=\"{{obj.id}}\">\n		<span ng-if=\"obj.swatch\" class=\"product-color-selector__swatch {{(vm.product.id == obj.id) ? \'is-active\' : \'\'}}\" ng-style=\"{\'background-image\' : \'url(\'+ obj.swatch +\')\'}\" title=\"{{obj.swatchLabel || obj.color | capitalize}}\"></span>\n		<span ng-if=\"!obj.swatch\" class=\"product-color-selector__swatch {{(vm.product.id == obj.id) ? \'is-active\' : \'\'}} {{obj.color}}\" ng-class=\"{active: vm.selectedProductColor == obj.id}\" title=\"{{obj.color | capitalize}}\"></span>\n	</span>\n	<span ng-if=\"!vm.product.colorProducts\">\n		<span ng-if=\"vm.product.swatch\" class=\"product-color-selector__swatch is-active\" ng-style=\"{\'background-image\': \'url(\' + vm.product.swatch + \')\'}\"></span>\n		<span ng-if=\"!vm.product.swatch\" class=\"product-color-selector__swatch is-active {{vm.product.color}}\"></span>\n		<span class=\"product-color-selector__name\">{{vm.product.swatchLabel || vm.product.color}}</span>\n	</span>\n</div>\n");
    $templateCache.put("/angular/app/directives/video.html", "<div class=\"video-wrapper\" itemscope itemtype=\"https://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"{{name}}\"/><meta itemprop=\"url\" content=\"{{url}}\"/><meta itemprop=\"description\" content=\"{{description}}\"/><iframe ng-src=\"{{fixedURL}}\" frameborder=\"0\" allowfullscreen></iframe></div>\n");
    $templateCache.put("/angular/app/follow/profileCard.html", "<div class=\"profile-card profile-card--{{::variety}} profile-card--{{::alignment}} profile-card--{{::size}} profile-card--{{::context}}\">\n\n	<!-- \n\n	alignment: left, right, center\n	variety: default, bio\n	designer: boolean\n	hovercard: boolean\n	size: tiny, small, medium, large\n\n	-->\n\n	<div class=\"profile-card__top\">\n	\n		<bb-avatar variety=\"default\" size=\"{{::size}}\" user=\"profile\"></bb-avatar>\n\n		<div class=\"profile-card__user\">\n			\n			<div class=\"h6\" ng-if=\"::designer\">Designer:</div>\n			<div class=\"h6\" ng-if=\"::variety == \'model-citizen\'\">Photo by:</div>\n\n			<h4 class=\"h4\" ng-if=\"::context !== \'profile-hero\' && context !== \'minimal\'\"><a ng-href=\"{{::profile.url}}\">{{::profile.label || profile.designerLabel || profile.name}}</a></h4>\n			<!-- Need an h1 for the profile page -->\n			<h1 ng-class=\"::{\'h2\':context == \'profile-hero\'}\" ng-if=\"::context == \'profile-hero\'\"><a ng-href=\"{{::profile.url}}\">{{::profile.label || profile.designerLabel || profile.name}}</a></h1>\n			\n\n			<bb-follow-button ng-if=\"::context !== \'minimal\' && variety !== \'model-citizen\'\"></bb-follow-button>\n\n		</div>\n		\n	</div>\n\n	<div ng-if=\"::variety == \'bio\' && profile.bio\" class=\"profile-card__bottom profile-card__bottom--bio\" read-more ng-bind-html=\"::profile.bio | sanitize\" compile></div>\n\n</div>\n");
    $templateCache.put("/angular/app/follow-button/follow-button.html", "<button class=\"button button-small\" ng-if=\"me.id !== profile.id\" ng-click=\"::toggleFollow()\" ng-class=\"{ \'button-primary\' : !isFollowing}\">\n	<span ng-if=\"!isFollowing\">Follow</span>\n	<span ng-if=\"isFollowing\">Following</span>\n	<span class=\"visuallyhidden\"> {{::profile.label || profile.name}}</span>\n</button>\n");
    $templateCache.put("/angular/app/free-undies/free-undies-buy-bar.html", "<div class=\"free-undies\">\n    <div class=\"buy-bar\" ng-if=\"vm.shirt\" ng-show=\"vm.show\">\n    	<button class=\"close-buy-bar\" ng-click=\"vm.show=!vm.show\"><i class=\"betabrand-close\"></i></button>\n        <div class=\"undies-details\">\n            <a href=\"{{vm.shirt.url}}\" class=\"undies-image\"><img ng-src=\"{{vm.shirt.thumbnail}}\"></a>\n            <div class=\"product-name product-price\"><a href=\"{{vm.shirt.url}}\"><span class=\"h6\">{{vm.shirt.name}}</span></a><br>\n                <span class=\"product-price__discount\">FREE</span>\n                <span class=\"product-price__original\">{{vm.shirt.prices.old | currency}}</span>\n            </div>\n        </div>\n        <colorselector product=\"vm.shirt\"></colorselector>\n        <buybar product=\"vm.shirt\" discreet-add-to-cart=\"true\"></buybar>\n        <a class=\"product-details link-colored\" href=\"{{vm.shirt.url}}\">View Details</a>\n    </div>\n    <a class=\"show-buy-bar\" ng-click=\"vm.show=!vm.show\" ng-hide=\"vm.show\">\n        <i class=\"betabrand-tees\"></i> Add a t-shirt for free!\n    </a>\n</div>\n");
    $templateCache.put("/angular/app/gallery/gallery.html", "<div class=\"product-gallery\" optimizely=\"modelStats\">\n	<div class=\"gallery-image\" ng-repeat=\"image in galleryMedia track by $index\">\n		<!-- IF media is an image -->\n		<div ng-if=\"!staticked\">\n			<div \n				afkl-lazy-image=\"{{formatImages([{screenWidth:480, imageWidth:480}, {screenWidth:640, imageWidth:640}, {screenWidth:1024, imageWidth:1150}], galleryMedia[$index].url)}}\" \n				afkl-lazy-image-options=\"{\'className\': \'photo__index-\' + $index, \'alt\':galleryMedia[$index].label}\" \n				ng-if=\"galleryMedia[$index].type == \'image\'\"\n				in-view=\"isInView($inview, $inviewpart, $index, galleryMedia[$index], galleryMedia.length)\" ng-style=\"{\'padding-bottom\': image.ratio }\">\n			</div>\n		<!-- END IF media is an image -->\n			\n			<!-- IF media is a video -->\n			<bb-video name=\"{{galleryMedia[$index].name}}\" description=\"{{galleryMedia[$index].description}}\" url=\"{{galleryMedia[$index].url}}\" play=\"galleryMedia[$index].play\" ng-if=\"galleryMedia[$index].type == \'video\' && galleryMedia[$index].videoType == \'gallery\'\"></bb-video>\n			<!-- END IF media is a video -->\n\n			<!-- IF media is MC image -->\n			<bb-model-citizen-card image=\"galleryMedia[$index].photo\" ng-if=\"galleryMedia[$index].type == \'mc\'\" show-user=\"true\"></bb-model-citizen-card>\n			<!-- END IF media is MC image -->\n\n			<footer class=\"gallery-image-actions\" ng-if=\"galleryMedia[$index].type != \'mc\'\">\n				<div class=\"gallery-image-actions--left\">\n					<bb-vote-button variety=\"icon\" size=\"small\" entity-type=\"\'mg_photo\'\" entity-id=\"image.id\" source-entity-type=\"\'product\'\" source-entity-id=\"product.id\" source-entity-view=\"\'full\'\" vote-count=\"image.counts.votes.count\"></bb-vote-button>\n					<span class=\"vote-count\">{{image.counts.votes.count}}</span>\n				</div>\n				<div ng-if=\"image.stats\" class=\"gallery-image-actions--center model-stats\">\n					<span>Model stats</span>\n					<span ng-if=\"image.stats.height\">\n						Height: {{image.stats.height}}\n					</span>\n					<span ng-if=\"image.stats.weight\">\n						Weight: {{image.stats.weight}}\n					</span>\n					<span ng-if=\"image.stats.waist\">\n						Waist: {{image.stats.waist}}\n					</span>\n					<span ng-if=\"image.stats.pants\">\n						Pant size: {{image.stats.pants}}\n					</span>\n				</div>\n				<div class=\"gallery-image-actions--right\">\n					<sharing-tooltip size=\"medium\" variety=\"default\" image=\"{{image.url}}\" value=\"{{ product.canonicalUrl }}\"></sharing-tooltip>\n				</div>\n			</footer>\n		</div>\n		<!-- IF staticked -->\n		<div ng-if=\"staticked\">\n			<img \n				ng-src=\"{{galleryMedia[$index].url}}\"\n				ng-if=\"galleryMedia[$index].type == \'image\'\"\n				>\n			<bb-video name=\"{{galleryMedia[$index].name}}\" description=\"{{galleryMedia[$index].description}}\" url=\"{{galleryMedia[$index].url}}\" play=\"galleryMedia[$index].play\" ng-if=\"galleryMedia[$index].type == \'video\' && galleryMedia[$index].videoType == \'gallery\'\"></bb-video>\n			<footer class=\"gallery-image-actions\" ng-if=\"galleryMedia[$index].type != \'mc\'\">\n				<div class=\"gallery-image-actions--left\">\n					<bb-vote-button variety=\"icon\" size=\"small\" entity-type=\"\'mg_photo\'\" entity-id=\"image.id\" source-entity-type=\"\'product\'\" source-entity-id=\"product.id\" source-entity-view=\"\'full\'\" vote-count=\"image.counts.votes.count\"></bb-vote-button>\n					<span class=\"vote-count\">{{image.counts.votes.count}}</span>\n				</div>\n				<div ng-if=\"image.stats\" class=\"gallery-image-actions--center model-stats\">\n					<span>Model stats</span>\n					<span ng-if=\"image.stats.height\">\n						Height: {{image.stats.height}}\n					</span>\n					<span ng-if=\"image.stats.weight\">\n						Weight: {{image.stats.weight}}\n					</span>\n					<span ng-if=\"image.stats.waist\">\n						Waist: {{image.stats.waist}}\n					</span>\n					<span ng-if=\"image.stats.pants\">\n						Pant size: {{image.stats.pants}}\n					</span>\n				</div>\n				<div class=\"gallery-image-actions--right\">\n					<sharing-tooltip size=\"medium\" variety=\"default\" image=\"{{image.url}}\" value=\"{{ product.canonicalUrl }}\"></sharing-tooltip>\n				</div>\n			</footer>\n		</div>\n		<!-- END IF staticked -->\n	</div>\n</div>\n");
    $templateCache.put("/angular/app/header/site-nav.html", "<div id=\"site-nav\" class=\"site-nav\">\n	<header class=\"skinny-nav\">\n		<div class=\"skinny-nav--left\">\n			<div ng-if=\"vm.CustomerService.data.loggedIn\" ng-bind-html=\"vm.bannerMessageLoggedIn | sanitize\" compile></div>\n			<div ng-if=\"!vm.CustomerService.data.loggedIn\" ng-bind-html=\"vm.bannerMessageLoggedOut | sanitize\" compile></div>\n		</div>\n		<div class=\"skinny-nav--right\">\n			<a href=\"/contact\">Contact Us</a>\n			<a class=\"skinny-nav__refer-link\" href=\"/referrals/landing/about\">Refer &amp; Get $15</a>\n		</div>\n	</header>\n	<header class=\"main-nav\" ng-class=\"{active: vm.siteNavIsActive}\" my-tab=\"vm.checkFocus(\'forward\')\" my-shift-tab=\"vm.checkFocus(\'reverse\')\" my-escape=\"vm.closeMenus()\">\n		<div class=\"toggle-open-close\" ng-class=\"{\'is-active\':vm.PageService.showMobileMenu}\" ng-click=\"vm.toggleMobileMenu()\" tabindex=\"0\" aria-label=\"Show Mobile Menu\">\n			<span></span>\n			<span></span>\n			<span></span>\n			<span></span>\n		</div>\n		<!-- logo -->\n		<h2 class=\"betabrand-logo-link\" itemtype=\"https://schema.org/Brand\" itemscope>\n			<a href=\"/\">\n				<span class=\"visuallyhidden\" itemprop=\"name\">Betabrand</span><img class=\"betabrand-logo\" src=\"/angular/images/bb-logo-text.svg\" alt=\"Betabrand\" itemprop=\"logo\">\n			</a>\n		</h2>\n		<!-- menus -->\n		<div class=\"main-nav__menus\" ng-class=\"{\'active\': vm.PageService.showMobileMenu}\">\n			<nav role=\"navigation\">\n				<!-- mens -->\n				<div class=\"main-nav__hover\" ng-class=\"{active: vm.menus[\'mens\'].active}\" site-nav-hover menu-label=\"mens\">\n					<a href=\"/mens.html\" class=\"menu-button\" type=\"button\" site-nav-button menu-label=\"mens\">\n						<i class=\"betabrand-man\"></i> Men&#8217;s\n						<i class=\"fa\" ng-class=\"{\'fa-angle-up\':vm.menus[\'mens\'].active,\'fa-angle-down\':!vm.menus[\'mens\'].active}\"></i>\n					</a>\n					<div class=\"menu-dropdown\" ng-show=\"vm.menus[\'mens\'].active\" tabindex=\"{{vm.menus[\'mens\'].active && \'0\' || \'-1\'}}\" role=\"menu\" aria-labelledby=\"shop-dropdown-toggle\" aria-hidden=\"{{!vm.menus[\'mens\'].active}}\">\n						<div class=\"menu-dropdown-container\">\n							<div class=\"menu-dropdown--categories\">\n								<small>Men\'s Categories</small>\n								<nav class=\"icon-list--grid icon-list--grid-3\">\n									<a href=\"/mens/pants.html\"><i class=\"betabrand-pants\"></i> Pants</a>\n									<a href=\"/mens/shirts.html\"><i class=\"betabrand-shirts\"></i> Shirts</a>\n									<a href=\"/mens/hoodies.html\"><i class=\"betabrand-hoodies\"></i> Hoodies</a>\n									<a href=\"/mens/jackets.html\"><i class=\"betabrand-jackets\"></i> Jackets</a>\n									<a href=\"/mens/shoes.html\"><i class=\"betabrand-shoes\"></i> Shoes</a>\n									<a href=\"/mens/tees.html\"><i class=\"betabrand-tees\"></i> Tees</a>\n									<a href=\"/mens/shorts.html\"><i class=\"betabrand-shorts\"></i> Shorts</a>\n									<a href=\"/mens/sweaters.html\"><i class=\"betabrand-sweaters\"></i> Sweaters</a>\n									<a href=\"/mens/denim.html\"><i class=\"betabrand-denim\"></i> Denim</a>\n									<a href=\"/mens/socks.html\"><i class=\"betabrand-socks\"></i> Socks</a>\n									<a href=\"/mens/more.html\"><i class=\"betabrand-bags\"></i> Bags &amp; More</a>\n									<a href=\"/collections/sale.html?gender=men\"><i class=\"betabrand-mega-deals\"></i> Mega Deals!</a>\n								</nav>\n							</div>\n							<div class=\"menu-dropdown--collections\">\n								<small>Men\'s Collections</small>\n								<nav class=\"icon-list icon-list--vertical\">\n									<a href=\"/crowdfunding.html?gender=men\"><i class=\"betabrand-fund\"></i> Crowdfunding</a>\n									<a href=\"/collections/dress-pant-sweatpants.html?gender=men\"><i class=\"betabrand-sweatpants\"></i> Dress Pant Sweatpants</a>\n									<a href=\"/collections/poppy-collection.html?gender=men\"><i class=\"betabrand-sweaters\"></i> Poppy</a>\n									<a href=\"/timberland\"><i class=\"betabrand-shoes\"></i> Timberland : Craftletic™</a>\n									<a href=\"/collections/travel-collection.html?gender=men\"><i class=\"betabrand-spaceship\"></i> Travel Collection</a>\n									<a href=\"/collections/west-coast-workwear.html?gender=men\"><i class=\"betabrand-westcoast\"></i> Westcoast Workwear</a>\n									<a href=\"/collections/bike-to-work.html?gender=men\"><i class=\"betabrand-bike\"></i> Bike to Work</a>\n									<a href=\"/collections/cordarounds.html?gender=men\"><i class=\"betabrand-cordarounds\"></i> Cordarounds</a>\n									<a href=\"/collections/discolab.html?gender=men\"><i class=\"betabrand-disco\"></i> DiscoLab</a>\n									<a href=\"/gift-certificates.html\"><i class=\"betabrand-spaceship\"></i> Gift Certificates</a>\n								</nav>\n							</div>\n							<div class=\"menu-dropdown--products\" ng-if=\"isDesktop\">\n								<small>Popular Products</small>\n								<div class=\"card-gallery\">\n									<div class=\"card\" ng-repeat=\"product in vm.menuProducts.mens | limitTo: 4\">\n										<a ng-href=\"{{product.url}}\">\n											<div class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" afkl-lazy-image=\"{{vm.formattedThumbnails([{screenWidth:0, imageWidth:390}], product.thumbnail)}}\" afkl-lazy-image-options=\"{alt: product.name, \'nolazy\': true}\" title=\"{{product.name}}\">\n											</div>\n											<h6 class=\"h6\">{{product.name}}</h6>\n										</a>\n									</div>\n								</div>\n							</div>\n						</div>\n					</div>\n				</div>\n				<div class=\"main-nav__hover\" ng-class=\"{active: vm.menus[\'womens\'].active}\" site-nav-hover menu-label=\"womens\">\n					<!-- womens -->\n					<a href=\"/womens.html\" class=\"menu-button\" type=\"button\" site-nav-button menu-label=\"womens\">\n						<i class=\"betabrand-woman\"></i> Women&#8217;s\n						<i class=\"fa\" ng-class=\"{\'fa-angle-up\':vm.menus[\'womens\'].active,\'fa-angle-down\':!vm.menus[\'womens\'].active}\"></i>\n					</a>\n					<div class=\"menu-dropdown\" ng-show=\"vm.menus[\'womens\'].active\" tabindex=\"{{vm.menus[\'womens\'].active && \'0\' || \'-1\'}}\" role=\"menu\" aria-labelledby=\"shop-dropdown-toggle\" aria-hidden=\"{{!vm.menus[\'womens\'].active}}\">\n						<div class=\"menu-dropdown-container\">\n							<div class=\"menu-dropdown--categories\">\n								<small>Women\'s Categories</small>\n								<nav class=\"icon-list--grid icon-list--grid-3\">\n									<a href=\"/womens/pants.html\"><i class=\"betabrand-pants\"></i> Pants</a>\n									<a href=\"/womens/tops.html\"><i class=\"betabrand-tops\"></i> Tops</a>\n									<a href=\"/womens/outerwear.html\"><i class=\"betabrand-jackets\"></i> Outerwear</a>\n									<a href=\"/womens/sweaters.html\"><i class=\"betabrand-sweaters\"></i> Sweaters</a>\n									<a href=\"/womens/skirts.html\"><i class=\"betabrand-skirts\"></i> Skirts</a>\n									<a href=\"/womens/dresses.html\"><i class=\"betabrand-dresses\"></i> Dresses</a>\n									<a href=\"/womens/womens-shoes.html\"><i class=\"betabrand-shoes\"></i> Shoes</a>\n									<a href=\"/womens/more.html\"><i class=\"betabrand-bags\"></i> Bags &amp; More</a>\n									<a href=\"/collections/sale.html?gender=women\"><i class=\"betabrand-mega-deals\"></i> Mega Deals!</a>\n								</nav>\n							</div>\n							<div class=\"menu-dropdown--collections\">\n								<small>Women\'s Collections</small>\n								<nav class=\"icon-list icon-list--vertical\">\n									<a href=\"/crowdfunding.html?gender=women\"><i class=\"betabrand-fund\"></i> Crowdfunding </a>\n									<a href=\"/collections/dress-pant-yoga-pants-collection.html\"><i class=\"betabrand-lotus\"></i> Dress Pant Yoga Pants</a>\n									<a href=\"/collections/poppy-collection.html?gender=women\"><i class=\"betabrand-sweaters\"></i> Poppy</a>\n									<a href=\"/collections/travel-collection.html?gender=women\"><i class=\"betabrand-spaceship\"></i> Travel Collection</a>\n									<a href=\"/collections/womens-work-it-collection.html\"><i class=\"betabrand-blazer\"></i> Work-It Collection</a>\n									<a href=\"/collections/bike-to-work.html?gender=women\"><i class=\"betabrand-bike\"></i> Bike to Work</a>\n									<a href=\"/collections/discolab.html?gender=women\"><i class=\"betabrand-disco\"></i> DiscoLab</a>\n									<a href=\"/gift-certificates.html\"><i class=\"betabrand-spaceship\"></i> Gift Certificates</a>\n								</nav>\n							</div>\n							<div class=\"menu-dropdown--products\" ng-if=\"isDesktop\">\n								<small>Popular Products</small>\n								<div class=\"card-gallery\">\n									<div class=\"card\" ng-repeat=\"product in vm.menuProducts.womens | limitTo: 4\">\n										<a ng-href=\"{{product.url}}\">\n											<div class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" afkl-lazy-image=\"{{vm.formattedThumbnails([{screenWidth:0, imageWidth:390}], product.thumbnail)}}\" afkl-lazy-image-options=\"{alt: product.name, \'nolazy\': true}\" title=\"{{product.name}}\">\n											</div>\n											<h6 class=\"h6\">{{product.name}}</h6>\n										</a>\n									</div>\n								</div>\n							</div>\n						</div>\n					</div>\n				</div>\n				<!-- crowdfunding -->\n				<!-- <a href=\"/collections/gift-ideas.html\" class=\"menu-button\"><i class=\"betabrand-package-1\"></i> Gift Ideas</a> -->\n				<a href=\"/crowdfunding.html\" class=\"menu-button\"><i class=\"betabrand-fund\"></i> Crowdfunding</a>				\n				<a href=\"/modelcitizen\" class=\"menu-button\"><i class=\"betabrand-model\"></i> Model Citizen</a>\n				<!-- think tank -->\n				<div class=\"main-nav__hover\" ng-class=\"{active: vm.menus[\'thinktank\'].active}\" site-nav-hover menu-label=\"thinktank\">\n					<a href=\"/think-tank.html\" class=\"menu-button\" site-nav-button menu-label=\"thinktank\">\n						<i class=\"betabrand-thinktank\"></i> Think Tank\n						<i class=\"fa\" ng-class=\"{\'fa-angle-up\':vm.menus[\'thinktank\'].active,\'fa-angle-down\':!vm.menus[\'thinktank\'].active}\"></i>\n					</a>\n					<div class=\"menu-dropdown\" ng-show=\"vm.menus[\'thinktank\'].active\" tabindex=\"{{vm.menus[\'thinktank\'].active && \'0\' || \'-1\'}}\" role=\"menu\" aria-labelledby=\"shop-dropdown-toggle\" aria-hidden=\"{{!vm.menus[\'thinktank\'].active}}\">\n						<div class=\"menu-dropdown-container\">\n							<div class=\"menu-dropdown--categories\">\n								<small>Think Tank Community</small>\n								<nav class=\"icon-list icon-list--grid {{ isDesktop ? \'icon-list--grid-3\' : \'icon-list--grid-2\'}}\">\n									<a href=\"/think-tank.html\"><i class=\"betabrand-vote\"></i> Vote</a>\n									<a href=\"/submission\"><i class=\"betabrand-submit\"></i> Submit</a>\n									<a href=\"/how-it-works\"><i class=\"betabrand-lightbulb\"></i> How it Works</a>\n									<a href=\"/think-tank.html?tags=insta-designs\"><i class=\"betabrand-shirts\"></i> Vote Insta-Shirts</a>\n									<a href=\"/insta/shirt\"><i class=\"betabrand-submit\"></i> Make Insta-Shirts</a>\n								</nav>\n							</div>\n							<div class=\"menu-dropdown--collections\">\n								<small><h4>Think Tank</h4></small>\n								<nav class=\"icon-list icon-list--vertical\">\n									<a href=\"/dress-shoe-yoga-shoe\"><i class=\"betabrand-shoes\"></i> Dress Shoe Yoga Shoe?</a>\n									<a href=\"/hack-the-dress-code-2017\"><i class=\"betabrand-spaceship\"></i> Hack The Dress Code Contest</a>\n								</nav>\n							</div>\n							<div class=\"menu-dropdown--products\" ng-if=\"isDesktop\">\n								<small>Newest Design Concepts</small>\n								<div class=\"card-gallery\">\n									<div class=\"card\" ng-repeat=\"product in vm.menuProducts.thinktank | limitTo: 2\">\n										<a ng-href=\"{{product.url}}\">\n											<div class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" afkl-lazy-image=\"{{vm.formattedThumbnails([{screenWidth:0, imageWidth:390}], product.thumbnail)}}\" afkl-lazy-image-options=\"{alt: product.name, \'nolazy\': true}\" title=\"{{product.name}}\">\n											</div>\n											<h6 class=\"h6\">{{product.name}}</h6>\n										</a>\n									</div>\n								</div>\n							</div>\n						</div>\n					</div>\n				</div>\n			</nav>\n		</div>\n		<!-- search -->\n		<div class=\"main-nav__search\" role=\"search\">\n			<search context=\"header\"></search>\n		</div>\n		<!-- account -->\n		<nav class=\"main-nav__account\">\n			<!-- using preventDefault and stopPropagation here to simulate regular button-style anchor states. -->\n			<div class=\"main-nav__hover\" ng-class=\"{active: vm.menus[\'user\'].active && vm.CustomerService.data.loggedIn}\" site-nav-hover menu-label=\"user\">\n				<button class=\"menu-button\" type=\"button\" role=\"button\" ng-if=\"!vm.CustomerService.data.loggedIn\" ng-click=\"vm.showLoginModal()\"><img src=\"/angular/images/icons/user.svg\" alt=\"Sign In\"> <span>Sign In</span></button>\n				<button role=\"menuitem\" class=\"menu-button\" site-nav-button menu-label=\"user\" type=\"button\" role=\"button\" ng-show=\"vm.CustomerService.data.loggedIn\" aria-haspopup=\"true\" aria-label=\"toggle user menu\">\n					<bb-avatar user=\"vm.CustomerService.data\" size=\"tiny\"></bb-avatar> <span>{{vm.CustomerService.data.firstname || \"My Account\"}}</span>\n					<span class=\"screen-name hidden\">@{{vm.CustomerService.data.urlKey || vm.CustomerService.data.id}}</span>\n					<i class=\"fa fa-angle-down\"></i>\n				</button>\n				<div class=\"menu-dropdown\" ng-show=\"vm.menus[\'user\'].active\" tabindex=\"{{vm.menus[\'user\'].active && \'0\' || \'-1\'}}\" role=\"menu\" aria-labelledby=\"user-dropdown-toggle\" aria-hidden=\"{{!vm.menus[\'user\'].active}}\" ng-class=\"{active: vm.menus[\'user\'].active}\" ng-if=\"vm.CustomerService.data.loggedIn\">\n					<nav class=\"icon-list icon-list--vertical\">\n						<a href=\"/u/{{vm.CustomerService.data.urlKey || vm.CustomerService.data.id}}\" role=\"menuitem\">Your Profile</a>\n						<a href=\"/account/dashboard\" role=\"menuitem\">Your Account</a>\n						<a href=\"/account/reviews\" role=\"menuitem\">Your Reviews</a>\n						<a href=\"/bbadmin\" role=\"menuitem\" ng-if=\"vm.CustomerService.data.role && vm.CustomerService.data.role.id==4\">Admin</a>\n						<button role=\"menuitem\" ng-click=\"vm.CustomerService.logout()\"><strong>Log Out</strong></button>\n					</nav>\n				</div>\n			</div>\n		</nav>\n		<!-- cart -->\n		<nav class=\"main-nav__cart\">\n			<!-- using preventDefault and stopPropagation here to simulate regular button-style anchor states. -->\n			<button class=\"menu-button\" type=\"button\" rel=\"nofollow\" id=\"cart-toggle\" aria-haspopup=\"true\" ng-click=\"vm.toggleCart();\">\n				<img src=\"/angular/images/icons/shopping-cart.svg\" alt=\"Cart\">\n				<span class=\"visuallyhidden\">items in cart:</span>\n				<span>{{vm.CartService.getQuantity()}}</span>\n			</button>\n		</nav>\n	</header>\n</div>\n");
    $templateCache.put("/angular/app/modal/newsletter/newsletter-custom-form.html", "<!-- Logo -->\n<img class=\"betabrand-logo betabrand-logo--small\" src=\"/angular/images/bb-logo-text.svg\" alt=\"Betabrand logo\">\n<span ng-show=\"!vm.successView\">\n	<!-- Incentive -->\n	<div class=\"newsletter-headline \n	newsletter-h{{ vm.deviceSize==\'mobile\' ? vm.customModal.customCss.hl.s.fs : \'\'}}{{ vm.deviceSize==\'desktop\' ? vm.customModal.customCss.hl.l.fs : \'\'}}\n	\" ng-bind-html=\"vm.customModal.headline || \'10% OFF\' | sanitize\"></div>\n\n	<div class=\"newsletter-subheadline newsletter-h{{ vm.deviceSize==\'mobile\' ? vm.customModal.customCss.shl.s.fs : \'\'}}{{ vm.deviceSize==\'desktop\' ? vm.customModal.customCss.shl.l.fs : \'\'}}\" ng-bind-html=\"vm.customModal.subHeadline || \'Your First Purchase\' | sanitize\"></div>\n</span>\n<!-- Form -->\n<form name=\"forms.newsletterSignUpFormCustom\" ng-submit=\"vm.submitEmail($event, vm.email, \'custom\')\" ng-show=\"!vm.successView\" novalidate>\n	<fieldset>\n		<legend class=\"visuallyhidden\">Sign in</legend>\n		<!-- Facebook Button -->\n		<div class=\"field-container\" ng-show=\"vm.customModal.showFacebook\">\n			<button class=\"button button-full button-facebook\" type=\"button\" title=\"Connect with Facebook\" ng-click=\"vm.submitFacebook()\" ng-disabled=\"vm.isLoadingEmail\">\n				<i class=\"fa fa-refresh fa-spin\" ng-class=\"{\'ng-hide\':!vm.isLoadingFacebook, \'ng-show\':vm.isLoadingFacebook}\"></i>\n				<i class=\"fa fa-facebook\" ng-show=\"!vm.isLoadingFacebook\"></i>\n				<span ng-if=\"!vm.customModal.facebookCtaText\">Connect with Facebook for Discount</span>\n				<span ng-if=\"vm.customModal.facebookCtaText\" ng-bind-html=\"vm.customModal.facebookCtaText | sanitize\"></span>\n			</button>\n		</div>\n		<div class=\"decorated-type\" ng-show=\"vm.customModal.showFacebook\"><span>or</span></div>\n		<!-- Email -->\n		<div class=\"input-feedback input-feedback--error\" ng-show=\"vm.errorMessage\">{{vm.errorMessage}}</div>\n		<div class=\"field-container\">\n			<label for=\"email\" class=\"visuallyhidden\">Email</label>\n			<input type=\"email\" placeholder=\"Enter your email\" name=\"email\" autocomplete=\"email\" tabindex=\"1\" required ng-model=\"vm.email\" ng-disabled=\"vm.isLoadingFacebook\" autofocus ng-focus=\"vm.errorMessage=\'\'\">\n			<div class=\"field-error\" ng-show=\"forms.newsletterSignUpForm.email.$error.required && forms.newsletterSignUpForm.$submitted\">Email is required</div>\n			<div class=\"field-error\" ng-show=\"forms.newsletterSignUpForm.email.$invalid && forms.newsletterSignUpForm.email.$dirty\">Email is invalid</div>\n		</div>\n		<div class=\"field-container\">\n			<button type=\"submit\" class=\"button button-primary button-full\" ng-disabled=\"vm.isLoadingEmail\"><i class=\"fa fa-refresh fa-spin\" ng-show=\"vm.isLoadingEmail\"></i> {{vm.customModal.ctaText || \"Get My Discount\"}}</button>\n		</div>\n	</fieldset>\n</form>\n<div class=\"newsletter-modal__success\" ng-show=\"vm.successView\">\n	<h3 class=\"h3\" ng-bind-html=\"vm.customModal.successHeadline || \'WELCOME TO BETABRAND!\' | sanitize\"></h3>\n	<div class=\"discount-text\">\n		<h3 class=\"h4\" ng-if=\"vm.customModal.successSubHeadline\">{{vm.customModal.successSubHeadline}}</h3>\n		<div ng-if=\"vm.customModal.showOffer && vm.discountCode\">Here\'s your discount code. *</div>\n	</div>\n	<div class=\"discount-code\" clip-copy=\"vm.discountCode\" ng-click=\"vm.codeCopied()\" ng-show=\"vm.discountCode && vm.customModal.showOffer\">{{ vm.discountCode }}</div>\n\n	<button class=\"button button-primary push-bottom\" ng-click=\"vm.close()\">{{ vm.customModal.successCtaText || \'Shop Now\' }}</button>\n\n<!-- 	<div class=\"buttons-container\">\n		<a ng-show=\"!vm.facebookLogin\" class=\"button button-primary\" href=\"/sale?gender=women\" ng-click=\"vm.setGenderPreference(vm.email, \'female\')\">Shop Women\'s</a>\n		<a ng-show=\"!vm.facebookLogin\" class=\"button button-primary\" href=\"/sale?gender=men\" ng-click=\"vm.setGenderPreference(vm.email, \'male\')\">Shop Men\'s</a>\n	</div> -->\n	<p><small>*Tiny Bummer: 1) Cannot be combined with other discount codes and 2) not valid on previous purchases.</small></p>\n</div>\n<button class=\"dismiss\" ng-click=\"vm.close()\" ng-show=\"!vm.successView && !vm.customModal.hideCloseButton\">No thanks, I\'ll just pay full price</button>\n");
    $templateCache.put("/angular/app/modal/newsletter/newsletter-modal.html", "<div class=\"modal-wrap\" ng-show=\"vm.display\">\n	<div class=\"modal-inner-wrap\">\n		<div class=\"newsletter-signup modal\" ng-class=\"{closing: vm.closing}\">\n			<div class=\"modal-close\" ng-if=\"!vm.customModal\">\n				<button ng-click=\"vm.close()\" class=\"betabrand-close\"><span class=\"visuallyhidden\">Close Modal</span></button>\n			</div>\n			<!-- Default -->\n			<div class=\"newsletter-modal--default\" ng-if=\"!vm.customModal\">\n				<!-- Logo -->\n				<img class=\"betabrand-logo betabrand-logo--small\" src=\"/angular/images/bb-logo-text.svg\" alt=\"Betabrand logo\">\n				<!-- Incentive -->\n				<div class=\"newsletter-headline newsletter-h{{ isPhone ? \'3\' : \'1\' }}\">10% Off</div>\n				<div class=\"newsletter-subheadline newsletter-h{{ isPhone ? \'5\' : \'5\' }}\">Your First Purchase</div>\n\n				<!-- Form -->\n				<form name=\"forms.newsletterSignUpFormDefault\" ng-submit=\"vm.submitEmail($event, vm.email, \'default\')\" ng-show=\"!vm.successView\" novalidate>\n					<fieldset>\n						<legend class=\"visuallyhidden\">Sign in</legend>\n						<!-- Facebook Button -->\n						<div class=\"field-container\">\n							<button class=\"button button-full button-facebook\" type=\"button\" title=\"Connect with Facebook\" ng-click=\"vm.submitFacebook()\" ng-disabled=\"vm.isLoadingEmail\">\n								<i class=\"fa fa-refresh fa-spin\" ng-class=\"{\'ng-hide\':!vm.isLoadingFacebook, \'ng-show\':vm.isLoadingFacebook}\"></i><i class=\"fa fa-facebook\" ng-show=\"!vm.isLoadingFacebook\"></i> Connect with Facebook <br class=\"break-mobile\"> for Discount\n							</button>\n						</div>\n						<div class=\"decorated-type\"><span>or</span></div>\n						<!-- Email -->\n						<div class=\"input-feedback input-feedback--error\" ng-show=\"vm.errorMessage\" ng-bind-html=\"vm.errorMessage | sanitize\"></div>\n						<div class=\"field-container\">\n							<label for=\"email\" class=\"visuallyhidden\">Email</label>\n							<input type=\"email\" placeholder=\"Enter your email\" name=\"email\" autocomplete=\"email\" tabindex=\"1\" required ng-model=\"vm.email\" ng-disabled=\"vm.isLoadingFacebook\" ng-focus=\"vm.errorMessage=\'\'\">\n							<div class=\"field-error\" ng-show=\"forms.newsletterSignUpForm.email.$error.required && forms.newsletterSignUpForm.$submitted\">Email is required</div>\n							<div class=\"field-error\" ng-show=\"forms.newsletterSignUpForm.email.$invalid && forms.newsletterSignUpForm.email.$dirty\">Email is invalid</div>					\n						</div>\n						<div class=\"field-container\">\n							<button type=\"submit\" class=\"button button-primary button-full\" ng-disabled=\"vm.isLoadingEmail\"><i class=\"fa fa-refresh fa-spin\" ng-show=\"vm.isLoadingEmail\"></i> Get My Discount</button>\n						</div>\n					</fieldset>\n				</form>\n\n				<div class=\"newsletter-modal__success\" ng-show=\"vm.successView\">\n					<div class=\"discount-text\" ng-if=\"vm.discountCode\">{{ vm.copyResponseText }}</div>\n					<div class=\"discount-code\" clip-copy=\"vm.discountCode\" ng-click=\"vm.codeCopied()\" ng-if=\"vm.discountCode\">{{ vm.discountCode }}</div>\n					<div class=\"buttons-container\">\n						<button ng-show=\"vm.facebookLogin\" class=\"button button-primary button-full\" ng-click=\"vm.close()\">Shop Now</button>\n						<a ng-show=\"!vm.facebookLogin\" class=\"button button-primary\" href=\"/sale?gender=women\" ng-click=\"vm.setGenderPreference(vm.email, \'female\')\">Shop Women\'s</a>\n						<a ng-show=\"!vm.facebookLogin\" class=\"button button-primary\" href=\"/sale?gender=men\" ng-click=\"vm.setGenderPreference(vm.email, \'male\')\">Shop Men\'s</a>\n						\n					</div>\n					<p class=\"fancy\">Discount automatically applied to cart.</p>\n					<p><small>*Tiny Bummer: 1) Cannot be combined with other discount codes and 2) not valid on previous purchases.</small></p>\n				</div>\n				<button class=\"dismiss\" ng-click=\"vm.close()\" ng-show=\"!vm.successView\">No thanks, I\'ll just pay full price</button>\n			</div>\n\n			<div class=\"newsletter-modal--default\" ng-if=\"vm.customModal\">\n				<div ng-include=\"\'/angular/app/modal/newsletter/newsletter-custom-form.html\'\"></div>\n			</div>\n		</div>\n	</div>\n</div>\n<div class=\"modal-overlay\" ng-show=\"vm.display\" ng-click=\"vm.overlayClose()\" ng-class=\"{\'cover-background-image\': vm.roadblock}\" ng-style=\"{\'background-image\': \'url(\' + vm.customModal.imageUrl + \')\'}\"></div>\n");
    $templateCache.put("/angular/app/notifications/notifications.html", "<div ng-repeat=\"(id, notification) in vm.notifications track by id\">\n	\n	<growl-notification class=\"fading notification--{{notification.type || \'alert\'}}\" ng-if=\"notification.type !== \'marketing\'\" ttl=\"{{notification.ttl}}\">\n		<span ng-bind-html=\"notification.message\" compile></span>\n	</growl-notification>\n\n	<growl-notification class=\"fading notification--marketing\" ttl=\"30000\" ng-if=\"notification.type == \'marketing\'\">\n		<button class=\"notification-close\" ng-click=\"$growlNotification.remove()\"><i class=\"betabrand-close\"></i></button>\n		<span ng-bind-html=\"notification.message\" compile></span>\n	</growl-notification>\n\n</div>\n<!-- <form class=\"notifications-form\" ng-submit=\"vm.add($event, vm.newNotification)\">\n	<div class=\"field-container\">\n		<label>New notification:</label>\n		<textarea ng-model=\"vm.newNotification\" required></textarea>\n		<span class=\"ng-cloak\" ng-show=\"vm.invalidNotification\">\n            Please enter a valid message\n        </span>\n	</div>\n	<div class=\"field-container\">\n		<div class=\"label\">Type:</div>\n		<div class=\"button-group\">\n			<label class=\"button button-outline label--inline\">\n				<span class=\"field-radio\">\n					<input type=\"radio\" name=\"newNotificationType\" value=\"marketing\" ng-model=\"vm.newNotificationType\">\n						<i class=\"fa fa-{{ vm.newNotificationType == \'marketing\' ? \'circle\' : \'circle-o\'}}\"></i>Marketing\n					</span>\n			</label>\n			<label class=\"button button-outline label--inline\">\n				<span class=\"field-radio\">\n					<input type=\"radio\" name=\"newNotificationType\" value=\"success\" ng-model=\"vm.newNotificationType\">\n						<i class=\"fa fa-{{ vm.newNotificationType == \'success\' ? \'circle\' : \'circle-o\'}}\"></i>Success\n					</span>\n			</label>\n			<label class=\"button button-outline label--inline\">\n				<span class=\"field-radio\">\n					<input type=\"radio\" name=\"newNotificationType\" value=\"error\" ng-model=\"vm.newNotificationType\">\n						<i class=\"fa fa-{{ vm.newNotificationType == \'error\' ? \'circle\' : \'circle-o\'}}\"></i>Error\n					</span>\n			</label>\n			<label class=\"button button-outline label--inline\">\n				<span class=\"field-radio\">\n					<input type=\"radio\" name=\"newNotificationType\" value=\"alert\" ng-model=\"vm.newNotificationType\">\n						<i class=\"fa fa-{{ vm.newNotificationType == \'alert\' ? \'circle\' : \'circle-o\'}}\"></i>Alert\n					</span>\n			</label>\n		</div>\n	</div>\n	<button class=\"button button-primary\">Add notification</button>\n</form> -->\n");
    $templateCache.put("/angular/app/personalization/category.html", "<div id=\"category\" class=\"category category-recommended\" category-scrolled ng-init=\"vm.revealCount = 14; vm.revealAmount = 14;\">\n	<div class=\"category-header-ratio\">\n		<div class=\"category-header\">\n			<div class=\"category-header-row\">\n				<div class=\"category-header--image\">\n					<div class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" afkl-lazy-image=\"{{::vm.formattedThumbnails([{screenWidth:480, imageWidth:480}, {screenWidth:640, imageWidth:640}, {screenWidth:1024, imageWidth:1400}], vm.image)}}\" afkl-lazy-image-options=\"::{alt: \'Recommended Products\', \'nolazy\': true}\" title=\"Recommended Products\"></div>\n				</div>\n				<div class=\"category-header--text\">\n					<div class=\"category-header--text-content\">\n						<div class=\"category-breadcrumbs\">\n							<span itemscope itemtype=\"http://data-vocabulary.org/Breadcrumb\">\n								<a itemprop=\"url\" href=\"/\"><i class=\"fa fa-home\" itemprop=\"title\"><span class=\"visually-hidden\"></span></i></a> <i class=\"fa fa-angle-right\"></i>\n							</span>\n							<h1 class=\"h1\">Recommended for you</h1>\n						</div>\n						<p class=\"lead\" ng-bind-html=\"::vm.data.description | sanitize\"></p>\n						\n						<div class=\"category-free-shipping button-container\" ng-if=\"!vm.CustomerService.data.loggedIn && vm.showFreeShipping\">\n							<button class=\"button button-primary\" type=\"button\" role=\"button\" ng-click=\"vm.CustomerService.showLoginModal()\">Sign In For <strong>Free Shipping</strong> <i class=\"betabrand-shipping-2\"></i></button>\n						</div>\n\n					</div>\n				</div>\n			</div>\n		</div>\n	</div>\n	<div>\n		<div class=\"page-columns\">\n			<div class=\"page-column--left product-sidebar\" ng-class=\"{\'is-active\':vm.PageService.showMobileFilters}\" sticky-box sticky-box-offset=136 sticky-breakpoint=768>\n				<aside>\n					<div class=\"category-filters\">\n						<div class=\"filter-sidebar\">\n							<filter-sorter collection=\"vm.products\" filter-options=\"vm.filterOptions\" sorter-options=\"vm.sorterOptions\" filter-sorters=\"vm.filterSorter\" ng-if=\"vm.products\"></filter-sorter>\n						</div>\n						<hr>\n					</div>\n				</aside>\n			</div>\n			<div class=\"page-column--right\">\n\n				<filter-breadcrumbs filter-sorters=\"vm.filterSorter\"></filter-breadcrumbs>\n				<section class=\"category-products js-category-scrolled-target\">\n					<product-card spm-track=\"{{product.canonicalUrl}}\" spm-section=\"{{$parent.vm.spmSectionId}}\" class=\"product-card grid-item\" product=\"::product\" category=\"::vm.products\" index=\"{{::$index}}\" filters=\"{{::product.filterClasses}}\" is-think-tank-category=\"::vm.data.isThinkTankCategory\" ng-repeat=\"product in vm.products | filter:vm.filterProducts | limitTo : vm.revealCount track by product.id\"></product-card>\n				</section>\n				<p class=\"category-products__emptyresults \" ng-if=\"vm.products.length==0 \">\n					Sorry, the filters you selected didn\'t match any products.\n				</p>\n				<span class=\"category__products--loading \" when-scrolled=\"vm.revealCount=vm.revealCount+vm.revealAmount; \">\n					<div class=\"spinner \" ng-if=\"vm.revealCount < vm.data.submissions.length \">\n						<div class=\"bounce1 \"></div>\n						<div class=\"bounce2 \"></div>\n						<div class=\"bounce3 \"></div>\n				    </div>\n				</span>\n				\n			</div>\n		</div>\n	</div>\n\n</div>\n");
    $templateCache.put("/angular/app/product/breadcrumbs.html", "<nav class=\"product-breadcrumbs\">\n    <span itemscope itemtype=\"http://data-vocabulary.org/Breadcrumb\">\n        <a itemprop=\"url\" ng-href=\"/\"><span itemprop=\"title\">Home</span></a><i class=\"fa fa-angle-right\"></i> \n    </span>\n    <span itemscope itemtype=\"http://data-vocabulary.org/Breadcrumb\" ng-repeat=\"crumb in vm.breadcrumbs()\">\n        <a itemprop=\"url\" ng-show=\"crumb.id==\'191\'\" ng-href=\"/bring-em-back\"><span itemprop=\"title\">{{crumb.label}}</span></a>\n        <a itemprop=\"url\" ng-show=\"crumb.id!=\'191\'\" ng-href=\"{{crumb.link}}\"><span itemprop=\"title\">{{crumb.label}}</span></a> \n        <i class=\"fa fa-angle-right\" ng-if=\"!$last\"></i> \n    </span>\n</nav>\n");
    $templateCache.put("/angular/app/product/product.html", "<div id=\"product\" itemscope itemtype=\"http://schema.org/Product\" itemref=\"name\">\n	<div class=\"product-breadcrumbs-wrapper\">\n		<div class=\"breadcrumbs product-breadcrumbs\" ng-include=\"\'angular/app/product/breadcrumbs.html\'\" ng-class=\"{\'is-admin\': vm.product.designers[0].id == vm.CustomerService.data.id || vm.CustomerService.data.role.id == 4}\"></div>\n		<nav class=\"breadcrumbs product-dashboard-nav\" ng-if=\"vm.product.designers[0].id == vm.CustomerService.data.id || vm.CustomerService.data.role.id == 4\">\n			<a href ng-class=\"{\'active\': vm.activeTab==\'details\'}\" ng-click=\"vm.changeTab(\'details\')\"><i class=\"fa fa-shirtsinbulk\"></i><span>Details</span></a>\n			<a href ng-class=\"{\'active\': vm.activeTab==\'dashboard\'}\" ng-click=\"vm.changeTab(\'dashboard\')\"><i class=\"fa fa-bar-chart\"></i><span>Dashboard</span></a>\n		</nav>\n	</div>\n	<div class=\"page-columns page-columns--has-right-sidebar\">\n		<div class=\"page-column--right product-sidebar\" sticky-box sticky-box-offset=136 sticky-breakpoint=768 itemscope itemtype=\"http://schema.org/Offer\">\n			<aside>\n				<meta itemprop=\"availability\" content=\"http://schema.org/{{vm.microdata.availability}}\" />\n				<meta itemprop=\"priceCurrency\" content=\"USD\" />\n				<meta itemprop=\"itemCondition\" content=\"http://schema.org/NewCondition\" />\n				<meta itemprop=\"sku\" content=\"{{::vm.product.sku}}\" />\n				<meta itemprop=\"category\" content=\"{{::vm.microdata.category}}\" />\n				<h1 itemprop=\"name\" id=\"name\" class=\"h2 product-name\" ng-bind-html=\"vm.product.name | dpypName\"></h1>\n				<div crowdfunding-price-adjust=\"vm.product\" ng-class=\"::{\'ng-hide\' : vm.activeTab == \'dashboard\' && isPhone}\">\n					<!-- Price -->\n					<div class=\"product-price price\" ng-if=\"::vm.product.prices.final > 1\">\n						<span class=\"product-price__final\" ng-class=\"::{\'product-price__discount\': vm.product.prices.discount_amount > 0}\" itemprop=\"price\">{{vm.product.prices.final | currency}}</span>\n						<span class=\"product-price__original\" ng-if=\"::vm.product.prices.discount_amount > 0\">{{vm.product.prices.old | currency}}</span>\n						<span class=\"product-price__percentage\" ng-if=\"::vm.product.prices.discount_percentage > 0\">({{vm.product.prices.discount_percentage}}% Off{{_.contains([\"17399\", \"17401\", \"17397\"], vm.product.id) ? \' in Pre-Order\' : \'\'}})</span>\n						<span class=\"flag flag--preorder\" ng-if=\"::vm.product.state == \'preorder\' || vm.product.preorderSelected\">Pre-Order</span>\n						<div class=\"product-price__final-sale\" ng-if=\"::vm.product.isFinalSale\">Final sale, no returns or exchanges</div>\n						<affirm-directive ng-if=\"!vm.product.crowdfundingActivated\" total=\"{{vm.product.prices.final}}\"></affirm-directive>\n					</div>\n					<a class=\"product-rating\" ng-if=\"vm.product.ratingSummary && vm.product.reviewCount.count > 4\" ng-href=\"#reviews\" offset=\"120\" du-smooth-scroll du-scrollspy>\n						<review-rating-summary ng-if=\"vm.product.ratingSummary.overall\" score=\"{{vm.product.ratingSummary.overall}}\" label=\"{{rating.rating_code}}\" title=\"{{vm.product.ratingSummary.overall}} out of 5\"></review-rating-summary>{{::vm.product.reviewCount.count}} Review{{::vm.product.reviewCount.count == 1 ? \'\' : \'s\'}}\n					</a>\n					<!-- Mobile Image -->\n					<div class=\"product-mobile-image\" ng-style=\"{\'padding-bottom\': vm.product.media.gallery[0].ratio}\">\n						<div afkl-lazy-image=\"{{::vm.formatImages([{screenWidth:480, imageWidth:480}, {screenWidth:680, imageWidth:680}], vm.product.media.gallery[0].url)}}\" afkl-lazy-image-options=\"{\'nolazy\': true}\"></div>\n					</div>\n					<div class=\"product__thinktank-info\" ng-show=\"vm.product.crowdfundingActivated\">\n						<bb-progress variety=\"detailed\" days-left=\"{{::vm.product.counts.crowdfunding.days_remaining}}\" percent=\"{{ vm.product.counts.crowdfunding.percent_to_goal }}\"></bb-progress>\n						<div class=\"meta-data-container\" ng-if=\"::vm.product.counts.crowdfunding.tiers.length > 1\">\n							<div class=\"meta-data\" ng-repeat=\"tier in vm.product.counts.crowdfunding.tiers\" ng-if=\"$index < 3\" ng-class=\"::{ \'meta-data--is-disabled\' : tier.number_remaining == 0, \'meta-data--is-active\' : tier.active == true }\">\n								<span class=\"meta-data__count\">{{tier.discount }}% Off</span>\n								<span class=\"meta-data__label\">{{tier.number_remaining == 0 ? tier.real_quantity : (tier.real_quantity - tier.number_remaining)}}/{{tier.real_quantity }} Backers</span>\n							</div>\n						</div>\n					</div>\n					<!-- DPYP Style Selector -->\n					<styleselector product=\"::vm.product\"></styleselector>\n\n					<!-- Color Selector -->\n					<colorselector product=\"::vm.product\" ng-show=\"vm.product.colorProducts\" context=\"product-page\"></colorselector>\n					<!-- Buy Bar -->\n					<buybar product=\"::vm.product\"></buybar>\n\n					<!-- Free Underwear Promo -->\n					<free-undies-promo-link ng-if=\"vm.showTshirtOffer\" product=\"vm.product\"></free-undies-promo-link>\n\n						<div class=\"link-group link-group--centered link-group--small\">\n						<a class=\"link-colored\" ng-href=\"#fit\" offset=\"120\" du-smooth-scroll du-scrollspy ng-if=\"vm.product.fit || vm.product.make\">\n							<i class=\"betabrand-makecarefit\"></i> {{vm.product.fit ? \'Fit\' : vm.product.make ? \'Make\' : \'\'}} &amp; Care\n						</a>\n						<a class=\"link-colored\" ng-href=\"#story\" offset=\"120\" du-smooth-scroll du-scrollspy>\n							<i class=\"fa fa-bookmark-o\"></i> The Story</a>\n						<a class=\"link-colored\" ng-href=\"#comments\" offset=\"120\" du-smooth-scroll du-scrollspy>\n							<i class=\"fa fa-comment-o\"></i> {{::vm.product.counts.comments.count}} Comment{{::vm.product.counts.comments.count == 1 ? \'\' : \'s\'}}\n						</a>\n					</div>\n					<nav class=\"tabs product-tabs\" ng-if=\"vm.product.sizingChart || vm.product.crowdfundingActivated || vm.product.crowdfundingActivated\">\n						<button class=\"button\" ng-click=\"vm.changeProductTab(\'details\')\" ng-class=\"{\'button-primary\' : vm.tabs.productTab == \'details\'}\">Details</button>\n						<button class=\"button\" ng-if=\"vm.product.sizingChart\" ng-click=\"vm.changeProductTab(\'size\')\" ng-class=\"{\'button-primary\' : vm.tabs.productTab == \'size\'}\">Sizing</button>\n						<button class=\"button\" ng-if=\"vm.product.crowdfundingActivated\" ng-click=\"vm.changeProductTab(\'payment\')\" ng-class=\"{\'button-primary\' : vm.tabs.productTab == \'payment\'}\">No Risk Payments</button>\n						<button class=\"button\" ng-if=\"vm.product.crowdfundingActivated\" ng-click=\"vm.changeProductTab(\'shipping\')\" ng-class=\"{\'button-primary\' : vm.tabs.productTab == \'shipping\'}\">Shipping</button>\n					</nav>\n					<div class=\"product-tab-content product-details\" ng-show=\"vm.tabs.productTab == \'details\'\">\n						<ul class=\"product-vital-stats\">\n							<li ng-repeat=\"statistic in vm.product.vitalStatistics | limitTo: 6\" ng-bind-html=\"::statistic.value\" ng-if=\"::statistic.value.length\"></li>\n							<li ng-if=\"::vm.product.madeInSf\"><strong>Made in San Francisco.</strong></li>\n						</ul>\n						<p class=\"product-questions-link\">Questions? If there\'s anything else you want to know about this product, please\n							<button ng-click=\"::vm.showQuestionsModal()\" data-track-event=\"Click Ask a Question\">contact us</button>.</p>\n					</div>\n					<div class=\"product-tab-content product-size-chart\" ng-show=\"vm.tabs.productTab == \'size\' && vm.product.sizingChart\">\n						<sizing-chart ng-repeat=\"chart in vm.product.sizingChart\" chart=\"chart.chartData\"></sizing-chart>\n					</div>\n					<div class=\"product-tab-content product-payment\" ng-if=\"vm.tabs.productTab == \'payment\' && vm.product.crowdfundingActivated\">\n						<p ng-if=\'::!vm.product.counts.successfullyFunded\'>If you fund this product, we\'ll pre-authorize the amount on your credit card. We\'ll only charge your card at the end of the funding period, if the product reaches its goal.</p>\n						<p ng-if=\'::vm.product.counts.successfullyFunded\'>Save 10% when you order this product before its funding deadline. Your card will be charged at the end of the funding period.</p>\n					</div>\n					<div class=\"product-tab-content product-shipping\" ng-if=\"vm.tabs.productTab == \'shipping\' && vm.product.crowdfundingActivated\">\n						<p ng-if=\"::vm.product.crowdfundingActivated\"><strong>Free Domestic Shipping</strong></p>\n						<p>Estimated Shipping: <strong class=\'highlight\'>{{vm.product.shippingDate}}</strong> if this product reaches its funding goal.</p>\n					</div>\n					<bb-sharing variety=\"default\" size=\"small\"></bb-sharing>\n				</div>\n			</aside>\n		</div>\n		<div class=\"page-column--left\" ng-show=\"vm.activeTab == \'details\'\">\n			<gallery product=\"vm.product\"></gallery>\n			\n			<section class=\"care-fit\">\n				<div id=\"fit\" ng-if=\"vm.product.fit || vm.product.make\" anchor-scroll>\n					<img src=\"/angular/images/icons/fit.svg\" ng-alt=\"Fit\">\n					<h3 class=\"h2\">{{vm.product.fit ? \'Fit\' : vm.product.make ? \'Make\' : \'\'}}</h3>\n					<div class=\"h5\">{{vm.product.fit || vm.product.make}}</div>\n				</div>\n				<div id=\"care\" ng-if=\"vm.product.care\" anchor-scroll>\n					<img src=\"/angular/images/icons/care.svg\" ng-alt=\"Care\">\n					<h3 class=\"h2\">Care</h3>\n					<div class=\"h5\">{{vm.product.care}}</div>\n				</div>\n			</section>\n\n			<div class=\"product-fit-image\" ng-class=\"{\'full-width\': vm.product.media.fit.width > 956}\" ng-if=\"vm.product.media.fit\">\n				<div class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" \n					afkl-lazy-image=\"{{vm.formatImages([{screenWidth:480, imageWidth:480}, {screenWidth:640, imageWidth:640}, {screenWidth:1024, imageWidth:1150}], vm.product.media.fit.url)}}\"\n					afkl-lazy-image-options=\"{\'className\': \'photo__index-\' + $index, \'alt\':vm.product.media.fit.label, \'nolazy\': true}\">\n				</div>\n			</div>\n			\n			<div class=\"product-section\">\n				<div class=\"alert alert--subtle\" ng-if=\"vm.product.crowdfundingActivated\">\n					<p class=\"h5\"><small>NOTE: Sometimes, the final version of a successfully crowdfunded product will look a little different than the prototype shown above. If you fund this prototype, rest assured we\'ll notify you if it changes in any significant way.</small></p>\n				</div>\n				<div ng-if=\"vm.product.vitalStatistics\">\n					<div class=\"h3\">Vital Statistics</div>\n					<ul class=\"product-vital-stats\">\n						<li ng-repeat=\"statistic in vm.product.vitalStatistics\" ng-bind-html=\"::statistic.value\" ng-if=\"::statistic.value.length\"></li>\n						<li ng-if=\"::vm.product.madeInSf\"><strong>Made in San Francisco.</strong></li>\n					</ul>\n				</div>\n				<div class=\"product-sizing-chart\" ng-if=\"vm.product.sizingChart\">\n				<h3 class=\"h3\">Sizing Guide</h3>\n					<sizing-chart ng-repeat=\"chart in vm.product.sizingChart\" chart=\"chart.chartData\"></sizing-chart>\n				</div>\n				<div id=\"story\" anchor-scroll>\n					<h3 class=\"h3\" itemprop=\"description\" ng-bind-html=\"vm.product.seoFriendlyTagline | sanitize\" compile></h3>\n					<p class=\"content\" ng-bind-html=\"vm.product.story || vm.product.description | sanitize\"></p>					\n				</div>\n			</div>\n			\n			<div class=\"product-section\" ng-if=\"vm.product.polls\">\n				<poll class=\"poll-{{poll.id}}\" poll-id=\"poll.id\" poll-type=\"\'page\'\" poll-poller=\"vm.product.designers\" ng-repeat=\"poll in config.data.polls\"></poll>\n			</div>\n			\n			<div ng-if=\"vm.product.designers.length\" id=\"product-designers\" class=\"product-section\">\n				<profilecard profile=\"::vm.product.designers[0]\" context=\"product\" alignment=\"left\" variety=\"bio\" designer=\"true\" size=\"large\"></profilecard>\n			</div>\n\n			<div id=\"reviews\" class=\"product-section\" anchor-scroll ng-if=\"vm.product.reviewCount.count && vm.product.reviewCount.count > 0\">\n				<div class=\"h4\">Reviews</div>\n				<reviews-display entity=\"vm.product\"></reviews-display>\n			</div>\n			\n			<div id=\"comments\" class=\"product-section\" anchor-scroll>\n				<nav class=\"tabs tabs--left\" ng-if=\"vm.product.submissionId && vm.product.counts.comments.submission > 0\" ng-class=\"{\'tabs--small\' : isPhone}\">\n					<button class=\"button\" ng-class=\"{ \'button-primary\' : vm.activeCommentTab==\'product\' }\" ng-click=\"vm.activeCommentTab = \'product\'\">Comments <span class=\"badge\">{{vm.product.counts.comments.product}}</span></button>\n					<button class=\"button\" ng-class=\"{ \'button-primary\' : vm.activeCommentTab==\'submission\' }\" ng-click=\"vm.activeCommentTab = \'submission\'\">Think Tank Comments <span class=\"badge\">{{vm.product.counts.comments.submission}}</span></button>\n				</nav>\n				<div class=\"h4\" ng-if=\"!vm.product.submissionId || vm.product.counts.comments.submission == 0\">Comments</div>\n				<comments-thread ng-show=\"vm.activeCommentTab == \'product\'\" total-comment-count=\"vm.product.counts.comments.product\" highlights=\"vm.commentHighligts\" thread-id=\"\'product-\'+vm.product.id\" customer=\"vm.CustomerService.data\"></comments-thread>\n				<comments-thread ng-show=\"vm.activeCommentTab == \'submission\'\" total-comment-count=\"vm.product.counts.comments.product\" archived=\"true\" highlights=\"vm.commentHighligts\" thread-id=\"\'submission-\'+vm.product.submissionId\" customer=\"vm.CustomerService.data\"></comments-thread>\n			</div>\n\n		</div>\n		<div class=\"page-column--left page-column--left__dashboard\" ng-if=\"vm.activeTab == \'dashboard\'\">\n			<dashboard class=\"product-dashboard\" type=\"{{vm.product.state == \'crowdfunding\' ? \'crowdfunding\' : \'product\'}}\" id=\"vm.product.id\"></dashboard>\n		</div>\n	</div>\n</div>\n<div id=\"js-target-end\"></div>\n<div class=\"product-related\" ng-if=\"::vm.relatedProducts.length\">\n	<h3 class=\"h3\">Related Products</h3>\n	<product-gallery ng-if=\"!vm.spmRelatedProducts\" collection=\"vm.relatedProducts\" in-stock=\"true\" limit=\"6\"></product-gallery>\n	<div ng-if=\"vm.spmRelatedProducts\" class=\"category-products category-products--grid-3\">\n		<product-card spm-track=\"{{product.canonicalUrl}}\" spm-section=\"{{$parent.vm.spmSectionId}}\" class=\"product-card grid-item\" product=\"::product\" index=\"{{::$index}}\"  ng-repeat=\"product in vm.spmRelatedProducts\"></product-card>\n	</div>\n</div>\n");
    $templateCache.put("/angular/app/product/product-card.html", "<div crowdfunding-price-adjust=\"vm.product\" class=\"{{vm.product.state}}\" data-product-id=\"{{vm.product.id}}\">\n	<div class=\"product__image\">\n		<button class=\"button button-white button-small\" ng-click=\"vm.showQuickLook()\" ng-if=\"!vm.activity && (vm.product.state == \'in-stock\' || vm.product.state == \'crowdfunding\' || vm.product.state == \'preorder\')\">Quick Look</button>\n		<a ng-href=\'{{vm.link}}\' track-link-click data-track-event=\"Click Product Card\" data-track-data=\"vm.getTrackingData\" ng-class=\"{square:vm.square}\">\n			<div ng-if=\"!staticked\" afkl-lazy-image=\"{{vm.thumbnail}}\" class=\"afkl-lazy-wrapper afkl-img-ratio-1-1\" afkl-lazy-image-options=\"{alt: vm.product.name, className: \'product__img\'}\" title=\"{{vm.product.name}}\"></div>\n			<img ng-if=\"staticked\" ng-src=\"{{vm.thumbnail}}\" class=\"afkl-lazy-wrapper afkl-img-ratio-1-1 product__img\" title=\"{{vm.product.name}}\">\n			<!-- Preload the rollover too -->\n			<div ng-if=\"vm.rolloverImage && vm.rolloverImage !== vm.activeImage\" class=\'visually-hidden\' afkl-lazy-image=\"{{vm.rolloverImage}}\"></div>\n			<span class=\"tab__overlay\" style=\"background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));\"></span>\n		</a>\n	</div>\n	<div class=\"card-details\">\n		<a ng-href=\'{{vm.link}}\'>\n			<h4 class=\"h4 product-name\">{{vm.product.name}}</h4>\n		</a>\n		<div class=\"product-price\" ng-if=\"vm.product.prices.final > 0\">\n			<span ng-if=\"vm.product.state !== \'not-successfully-funded\'\">\n				<span ng-if=\"vm.product.state !== \'out-of-stock\'\" class=\"product-price__final\" ng-class=\"{\'product-price__discount\': vm.product.prices.discount_amount > 0}\">{{vm.product.prices.final | currency}}</span>\n				<span class=\"product-price__original\" ng-if=\"vm.product.prices.discount_amount > 0\">{{vm.product.prices.old | currency}}</span>\n				<span class=\"product-price__percentage\" ng-if=\"vm.product.prices.discount_percentage > 0\">({{vm.product.prices.discount_percentage}}% Off{{vm._.contains([\"17399\", \"17401\", \"17397\"], vm.product.id) ? \' in Pre-Order\' : \'\'}})</span>\n				<span class=\"flag flag--preorder\" ng-if=\"vm.product.state.toLowerCase() == \'preorder\'\">Pre-Order</span>\n			</span>\n			<span class=\"flag flag--out-of-stock\" ng-if=\"vm.product.state == \'out-of-stock\'\">Out of Stock</span>\n			<span class=\"flag flag--not-successfully-funded\" ng-if=\"vm.product.state == \'not-successfully-funded\'\">Not Successfully Funded</span>\n		</div>\n		<!-- Designer -->\n		<div ng-if=\"vm.product.designers[0] && vm.isThinkTankCategory\">\n			<profilecard context=\"product-card\" profile=\"vm.product.designers[0]\" size=\"small\" alignment=\"left\" designer=true></profilecard>\n		</div>\n		<!-- Submission -->\n		<div class=\"meta-data-container meta-data-container--submission\" ng-if=\"vm.product.state == \'greenlit\' || vm.product.state == \'published\'\">\n			<div class=\"meta-data\">\n				<div class=\"meta-data__count\" id=\"vote-count-{{vm.product.id}}\">{{vm.product.counts.votes.score || !vm.product.counts.votes.score | number:0}}</div>\n				<div class=\"meta-data__label\">Vote{{(vm.product.counts.votes.score || !vm.product.counts.votes.score) == 1 ? \'\' : \'s\'}}</div>\n			</div>\n			<div class=\"meta-data\">\n				<bb-vote-button variety=\"default\" size=\"small\" submission=\"vm.product\"></bb-vote-button>\n			</div>\n			<div class=\"meta-data\">\n				<div class=\"meta-data__count\"><a ng-href=\"{{vm.link}}#comments\">{{vm.product.counts.comments.count | number:0}}</a></div>\n				<div class=\"meta-data__label\">Comment{{vm.product.counts.comments.count == \'1\' ? \'\' : \'s\'}}</div>\n			</div>\n		</div>\n		<!-- Crowdfunding -->\n		<div class=\"crowdfunding isThinkTankCategory\" ng-if=\"vm.product.state == \'crowdfunding\' || vm.product.state == \'not-successfully-funded\' || (vm.product.counts.state == \'Graduate\' && vm.isThinkTankCategory == true)\">\n			<bb-progress ng-if=\"vm.product.counts.state != \'Graduate\'\" percent=\"{{vm.product.counts.crowdfunding.percent_to_goal}}\"></bb-progress>\n			<div class=\"meta-data-container\">\n				<div class=\"meta-data\">\n					<div class=\"meta-data__count\"><span>{{vm.product.counts.crowdfunding.percent_to_goal}}</span>%</div>\n					<div class=\"meta-data__label\">to goal</div>\n				</div>\n				<div class=\"meta-data\">\n					<div class=\"meta-data__count\"><span>{{vm.product.counts.comments.count}}</span></div>\n					<div class=\"meta-data__label\">comment{{vm.product.counts.comments.count == 1 ? \'\' : \'s\'}}</div>\n				</div>\n				<div class=\"meta-data\" title=\"{{vm.product.counts.crowdfunding.end_date | date: \'mediumDate\'}}\">\n					<div class=\"meta-data__count\">{{vm.product.counts.crowdfunding.days_remaining}}</div>\n					<div class=\"meta-data__label\">day{{vm.product.counts.crowdfunding.days_remaining == 1 ? \'\' : \'s\'}} left</div>\n				</div>\n			</div>\n		</div>\n	</div>\n</div>\n");
    $templateCache.put("/angular/app/product/productGallery.html", "<div class=\"category-products category-products--grid-3\">\n	<product-card\n		class=\"product-card grid-item\"\n		product=\"product\"\n		index=\"{{$index}}\" \n		category=\"vm.collection\"\n		is-think-tank-category=\"vm.collection.isThinkTankCategory\"\n		ng-repeat=\"product in vm.collection | limitTo : vm.productLimit track by $index\"\n		mc-takeover-id=\"vm.mcTakeoverId\"\n		></product-card>\n</div>\n");
    $templateCache.put("/angular/app/progress/progress.html", "<div>\n\n	<div class=\"progress-bar\">\n		<div class=\"progress-bar__status\" ng-class=\"{\'is-half\' : vm.percent < 50, \'is-successful\' : vm.percent >= 100 }\" ng-style=\"{ \'width\' : (vm.percent >= 100 ? 100 : vm.percent) + \'%\'}\">\n			<span class=\"visuallyhidden\">{{ vm.label }}</span>\n		</div>\n	</div>\n\n	<div class=\"text--centered\" ng-if=\"vm.variety==\'detailed\'\"><span class=\"fancy\">{{ vm.percent }}%</span> to goal – <span class=\"fancy\">{{vm.daysLeft}}</span> day{{vm.daysLeft==1?\'\':\'s\'}} left</div>\n	\n</div>\n");
    $templateCache.put("/angular/app/search/search-form.html", "<div class=\"search\">\n	<!-- Header search form -->\n	<div ng-if=\"vm.context==\'header\'\">\n		<form ng-submit=\"vm.searchSubmit()\" itemprop=\"potentialAction\" itemtype=\"http://schema.org/SearchAction\" itemscope>\n			<label for=\"search-query\" class=\"visuallyhidden\">Search query</label>\n			<input id=\"search-query\" class=\"search-query\" name=\"search\" type=\"text\" tabindex=\"0\" ng-model=\"vm.query\" placeholder=\"Search\" uib-typeahead=\"result.name for result in vm.results | filter:{name:$viewValue} | limitTo: 5\" typeahead-popup-template-url=\"/angular/app/search/typeahead.html\" typeahead-on-select=\"vm.typeaheadNavigate($item, $model, $label, $event)\" spellcheck=\"false\" autocomplete=\"off\" typeahead-is-open=\"vm.isTypeaheadOpen\" itemprop=\"query-input\">\n			<button class=\"search-button\" type=\"button\" title=\"Search\" ng-click=\"vm.searchSubmit()\">\n				<span class=\"visuallyhidden\">Search Betabrand</span>\n				<i class=\"fa fa-search\"></i>\n			</button>\n		</form>\n	</div>\n	<!-- Search page template -->\n	<div ng-if=\"!vm.context || vm.context==\'page\'\">\n		<meta itemprop=\"target\" content=\"https://query.example.com/search?q={search-term}\" />\n		<div class=\"search-title\">\n			<div class=\"category-breadcrumbs\">\n				<a href=\"/\"><i class=\"fa fa-home\"></i></a> <i class=\"fa fa-angle-right\"></i>\n				<h1 class=\"h1\">Search</h1>\n			</div>\n			<p>Find products, design concepts, and designers from our great big catalog.</p>\n			<form ng-submit=\"vm.searchSubmit($event)\" autocomplete=\"off\" class=\"push-bottom-x2\">\n				<div class=\"field-container\">\n					<div class=\"input--has-button\">\n						<input id=\"search-term\" itemprop=\"query-input\" type=\"text\" name=\"search-term\" class=\"\" ng-model=\"vm.query\" autocomplete=\"off\" />\n						<button class=\"button button-primary\" type=\"submit\"><i class=\"fa fa-search\"></i> Search</button>\n					</div>\n				</div>\n			</form>\n		</div>\n		<div class=\"search-results\" ng-show=\"vm.products.length\">\n			<h3 class=\"h3\">{{vm.products.length}} Product{{vm.products.length == 1 ? \'\' : \'s\'}}</h3>\n			<div class=\"category-products category-products--grid-3\">\n				<product-card class=\"product-card grid-item\" product=\"product\" index=\"{{$index}}\" state=\"{{product.state}}\" category=\"filteredProducts\" is-think-tank-category=false use-canonical=true ng-repeat=\"product in filteredProducts = (vm.products)\"></product-card>\n			</div>\n		</div>\n		<div class=\"search-results push-top\" ng-show=\"vm.submissions.length\">\n			<h3 class=\"h3\">{{vm.submissions.length}} Community Design Concept{{vm.submissions.length == 1 ? \'\' : \'s\'}}</h3>\n			<div class=\"category-products category-products--grid-3\">\n				<product-card class=\"product-card grid-item\" product=\"product\" index=\"{{$index}}\" state=\"{{product.state}}\" category=\"filteredSubmissions\" is-think-tank-category=false use-canonical=true ng-repeat=\"product in filteredSubmissions = (vm.submissions)\"></product-card>\n			</div>\n		</div>\n		<div class=\"search-results push-top\" ng-show=\"vm.zendesk_betabrand_articles.length\">\n			<h3 class=\"h3\">{{vm.zendesk_betabrand_articles.length}} Answer{{vm.zendesk_betabrand_articles.length == 1 ? \'\' : \'s\'}}</h3>\n\n			<div ng-repeat=\"article in vm.zendesk_betabrand_articles\" class=\"search-article\">\n				<a class=\"link h4 article-title\" ng-href=\"https://betabrand.zendesk.com/hc/en-us/articles/{{article.id}}\">{{article.title}}</a>\n				<div>{{article.body_safe}}</div>\n				<a class=\"article-read-more link\" ng-href=\"https://betabrand.zendesk.com/hc/en-us/articles/{{article.id}}\" target=\"_blank\">Read More</a>\n			</div>\n		</div>\n		<p ng-if=\"!vm.submissions.length && !vm.products.length && !vm.zendesk_betabrand_articles.length && vm.hasSearched\">Sorry, we couldn\'t find anything for your search. Please try another.</p>\n	</div>\n	<!-- Contact us page template -->\n	<div ng-if=\"vm.context==\'contact-us-page\'\">\n		<div class=\"search-title\">\n			<form ng-submit=\"vm.searchSubmit($event)\" autocomplete=\"off\" class=\"push-bottom\">\n				<div class=\"field-container\">\n					<div class=\"input--has-button\">\n						<input id=\"search-term\" placeholder=\"Search for frequently asked questions\" itemprop=\"query-input\" type=\"text\" name=\"search-term\" ng-model=\"vm.query\" autocomplete=\"off\" />\n						<button class=\"button button-primary\" type=\"submit\">Search</button>\n					</div>\n				</div>\n			</form>\n		</div>\n		<div class=\"search-results push-top push-bottom\" ng-show=\"vm.zendesk_betabrand_articles.length\">\n			<h3 class=\"h3\">{{vm.zendesk_betabrand_articles.length}} Answer{{vm.zendesk_betabrand_articles.length == 1 ? \'\' : \'s\'}}</h3>\n\n			<div ng-repeat=\"article in vm.zendesk_betabrand_articles\" class=\"search-article\">\n				<a class=\"link h4 article-title\" ng-href=\"https://betabrand.zendesk.com/hc/en-us/articles/{{article.id}}\">{{article.title}}</a>\n				<div>{{article.body_safe}}</div>\n				<a class=\"article-read-more link\" ng-href=\"https://betabrand.zendesk.com/hc/en-us/articles/{{article.id}}\" target=\"_blank\">Read More</a>\n			</div>\n		</div>\n		<div ng-if=\"!vm.zendesk_betabrand_articles.length && vm.hasSearched\">\n			<p>Sorry, we couldn\'t find anything for your search.</p>\n		</div>\n	</div>\n</div>\n\n\n<!-- <div class=\"search-results\" ng-show=\"vm.sizingSearch\">\n	<div class=\"columns\">\n		<div class=\"column6\">\n			<h3 class=\"h3\">Sizing Information</h3>\n			<p>We provide sizing charts for each product on their respective product pages. These sizing charts are located on the <strong>Sizing Guide</strong> tab below the <strong>Add to Cart</strong> button.</p>\n			<p><img src=\"https://static1.betabrands.com/media/catalog/category/sizing-help-page.png\" alt=\"Sizing Chart\"></p>\n		</div>\n		<div class=\"column6\">\n			<h3 class=\"h3\">How to measure</h3>\n			<p>To figure out your correct size, compare your personal body measurements with the measurements on the sizing chart. </p>\n			<p><strong>*Products that use numeric (28,30,32 etc) sizing do not have sizing charts, as these sizes are self evident and fit true to size.</strong></p>\n			<p>Please refer to this guide to find your body measurements:</p>\n			<p><img src=\"https://betabrand.zendesk.com/hc/en-us/article_attachments/205912403/011268e8-d16c-4719-b414-59cadfffc91d.jpg\" alt=\"Sizing\"></p>\n		</div>\n	</div>\n</div>\n\n -->\n");
    $templateCache.put("/angular/app/search/typeahead.html", "<div class=\"custom-popup-wrapper\" ng-style=\"{top: position().top+\'px\', left: position().left+\'px\'}\" style=\"display: block;\" ng-show=\"isOpen() && !moveInProgress\" aria-hidden=\"{{!isOpen()}}\">\n	<ul class=\"dropdown-menu\" role=\"listbox\">\n		<li class=\"uib-typeahead-match\" ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\" role=\"option\" id=\"{{::match.id}}\">\n			<div uib-typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"\'/angular/app/search/typeahead-results.html\'\"></div>\n		</li>\n	</ul>\n	<a class=\"link view-results\" ng-href=\"/search?q={{query}}\">View All Results</a>\n</div>\n");
    $templateCache.put("/angular/app/sharing_new/sharing-tooltip.html", "<button tooltip-class=\"social-sharing\" type=\"button\" tooltips tooltip-try=\"false\" tooltip-side=\"top\" tooltip-size=\"small\" tooltip-template-url=\"/angular/app/sharing_new/sharing-tooltip-template.html\" tooltip-template-url-cache=\"true\" aria-haspopup=\"true\"><i class=\"fa fa-share-alt\"></i> Share</button>\n");
    $templateCache.put("/angular/app/sharing_new/sharing-tooltip-template.html", "<bb-sharing size=\"{{vm.size}}\" variety=\"{{vm.variety}}\" data-image=\"{{vm.share_image}}\" data-value=\"{{ vm.share_url }}\" share-title=\"{{vm.share_title}}\" share-subject=\"{{vm.share_subject}}\" share-text=\"{{vm.share_text}}\" share-description=\"{{vm.share_description}}\"></bb-sharing>\n<input type=\"text\" value=\"{{ vm.share_url }}\">\n");
    $templateCache.put("/angular/app/styleguide/product.html", "<div class=\"row\">\n	<article>\n		<header>\n			<div class=\"padded text-center\">\n				<h1 class=\"h1\">Betabrand <img class=\"emblem\" src=\"/angular/images/emblem-no-bg.svg\" alt=\"Betabrand\"> Styleguide</h1>\n				<nav class=\"icon-list push-bottom-half\">\n					<a href=\"/styleguide/atoms\">Atoms</a>\n					<a href=\"/styleguide/molecules\">Molecules</a>\n					<a href=\"/styleguide/organisms\">Organisms</a>\n					<a href=\"/styleguide/templates\">Templates</a>\n					<a href=\"/styleguide/pages\" class=\"is-active\">Pages</a>\n				</nav>\n				<nav class=\"icon-list icon-list--small\">\n					<a href=\"/styleguide/pages\">Profile</a>\n					<a href=\"/styleguide/pages/patternlab\">PatternLab</a>\n					<a href=\"/styleguide/pages/product\" class=\"is-active\">Product</a>\n					<a href=\"/styleguide/pages/submission\">Submission</a>\n					<a href=\"/styleguide/pages/collection\">Collection</a>\n				</nav>\n			</div>\n		</header>\n		<div class=\"callouts ng-hide\">\n			<div class=\"callout callout--left\">\n				<div class=\"h2\">Templates</div>\n				<p>With templates, we break our biochemistry analogy to get into language that makes more sense to clients and final output. <strong>Templates are comprised mostly of organisms combined together to form page-level objects.</strong></p>\n				<p>Templates provide context for these relatively abstract molecules and organisms, which is helpful for designers and clients alike.</p>\n				<p>Templates mostly focus on content structure (such as character length, image size, etc) rather than the actual content.</p>\n			</div>\n			<div class=\"callout callout--cover\" style=\"background-image: url(http://patternlab.io/assets/icon-template.svg); background-size: 40%; min-height: 200px; background-repeat: no-repeat;\"></div>\n		</div>\n		<section class=\"push-bottom\">\n			<div ng-include=\"\'/angular/app/header/site-nav.html\'\"></div>\n		</section>\n		<div class=\"styleguide-section\">\n			<nav class=\"breadcrumbs\">\n				<a href>Home</a> <i class=\"fa fa-angle-right\"></i>\n				<a href>Women\'s Tops</a> <i class=\"fa fa-angle-right\"></i>\n				<span>Comfort-First Blouse</span>\n			</nav>\n			<div class=\"page-columns page-columns--has-right-sidebar\">\n				<div class=\"page-column--right product-sidebar\" sticky-box sticky-box-offset=136 sticky-breakpoint=768>\n					<aside>\n						<meta itemprop=\"availability\" content=\"http://schema.org/{{vm.microdata.availability}}\" />\n						<meta itemprop=\"priceCurrency\" content=\"USD\" />\n						<meta itemprop=\"itemCondition\" content=\"http://schema.org/NewCondition\" />\n						<meta itemprop=\"sku\" content=\"{{::vm.crowdfunding.products[0].sku}}\" />\n						<meta itemprop=\"category\" content=\"{{::vm.microdata.category}}\" />\n						<h1 itemprop=\"name\" id=\"name\" class=\"h2 product-name\" ng-bind-html=\"vm.crowdfunding.products[0].name | dpypName\"></h1>\n						<div class=\"product-price price\" ng-if=\"::vm.crowdfunding.products[0].prices.final > 1\">\n							<span class=\"product-price__final\" ng-class=\"::{\'product-price__discount\': vm.crowdfunding.products[0].prices.discount_amount > 0}\" itemprop=\"price\">{{vm.crowdfunding.products[0].prices.final | currency}}</span>\n							<span class=\"product-price__original\" ng-if=\"::vm.crowdfunding.products[0].prices.discount_amount > 0\">{{vm.crowdfunding.products[0].prices.old | currency}}</span>\n							<span class=\"product-price__percentage\" ng-if=\"::vm.crowdfunding.products[0].prices.discount_percentage > 0\">({{vm.crowdfunding.products[0].prices.discount_percentage}}% Off{{_.contains([\"17399\", \"17401\", \"17397\"], vm.crowdfunding.products[0].id) ? \' in Pre-Order\' : \'\'}})</span>\n							<span class=\"flag flag--preorder\" ng-if=\"::vm.crowdfunding.products[0].state == \'preorder\' || vm.crowdfunding.products[0].preorderSelected\">Pre-Order</span>\n							<div class=\"product-price__final-sale\" ng-if=\"::vm.crowdfunding.products[0].isFinalSale\">Final sale, no returns or exchanges</div>\n							<affirm-directive ng-if=\"!vm.crowdfunding.products[0].crowdfundingActivated\" total=\"{{vm.crowdfunding.products[0].prices.final}}\"></affirm-directive>\n						</div>\n						<div class=\"product__thinktank-info\" ng-show=\"vm.crowdfunding.products[0].crowdfundingActivated\">\n							<bb-progress variety=\"detailed\" percent=\"{{ vm.crowdfunding.products[0].counts.crowdfunding.percent_to_goal}}\"></bb-progress>\n							<div class=\"meta-data-container\" ng-if=\"::vm.crowdfunding.products[0].counts.crowdfunding.tiers.length > 1\">\n								<div class=\"meta-data\" ng-repeat=\"tier in vm.crowdfunding.products[0].counts.crowdfunding.tiers\" ng-if=\"$index < 3\" ng-class=\"::{ \'meta-data--is-disabled\' : tier.number_remaining == 0, \'meta-data--is-active\' : tier.active == true }\">\n									<span class=\"meta-data__count\">{{tier.discount }}% Off</span>\n									<span class=\"meta-data__label\">{{tier.number_remaining == 0 ? tier.real_quantity : (tier.real_quantity - tier.number_remaining)}}/{{tier.real_quantity }} Backers</span>\n								</div>\n							</div>\n						</div>\n						<div class=\"select-dropdown select-dropdown--avatar\" off-click=\"openDropdown3 = false\">\n							<button type=\"button\" class=\"select-dropdown__label\" ng-class=\"{\'isOpen\':openDropdown3}\" ng-click=\"openDropdown3 = !openDropdown3\" aria-haspopup=\"true\" aria-live=\"polite\" aria-atomic=\"true\">\n								<div class=\"avatar avatar-rounded avatar-tiny\" ng-if=\"selectColor3\" ng-style=\"{\'background-color\' : selectColor3}\"></div>\n								{{selectLabel3 ? selectLabel3 : \'Color: \'}}\n							</button>\n							<div class=\"select-dropdown__dropdown\" ng-class=\"{\'isOpen\':openDropdown3}\" aria-hidden=\"{{!openDropdown3}}\" aria-label=\"color submenu\">\n								<button ng-click=\"selectLabel3 = \'Black\'; selectColor3 = \'black\'\">\n									<div class=\"avatar avatar-rounded avatar-tiny\" ng-style=\"{\'background-color\' : \'#333\'}\"></div>Black\n								</button>\n								<button ng-click=\"selectLabel3 = \'Red\'; selectColor3 = \'#EC230C\'\">\n									<div class=\"avatar avatar-rounded avatar-tiny\" ng-style=\"{\'background-color\' : \'#EC230C\'}\"></div>Red\n								</button>\n								<button ng-click=\"selectLabel3 = \'Blue\'; selectColor3 = \'#27a8e0\'\">\n									<div class=\"avatar avatar-rounded avatar-tiny\" ng-style=\"{\'background-color\' : \'#27a8e0\'}\"></div>Blue\n								</button>\n							</div>\n						</div>\n						<div class=\"select-dropdown\" off-click=\"openDropdown = false\">\n							<button type=\"button\" class=\"select-dropdown__label\" ng-class=\"{\'isOpen\':openDropdown}\" ng-click=\"openDropdown = !openDropdown\" aria-haspopup=\"true\" aria-live=\"polite\" aria-atomic=\"true\">{{selectLabel ? selectLabel : \'Size: \'}}</button>\n							<div class=\"select-dropdown__dropdown\" ng-class=\"{\'isOpen\':openDropdown}\" aria-hidden=\"{{!openDropdown}}\" aria-label=\"color submenu\">\n								<button ng-click=\"selectLabel = \'Small\'\">Small</button>\n								<button ng-click=\"selectLabel = \'Medium\'\">Medium</button>\n								<button ng-click=\"selectLabel = \'Large\'\">Large</button>\n								<button ng-click=\"selectLabel = \'X-Large\'\">X-Large</button>\n							</div>\n						</div>\n						<button class=\"add-to-cart button button-primary button-full button-green\" type=\"button\">\n							Add to Cart\n							<!-- <span>Shipping in April</span> -->\n							<!-- I would be very careful here.  Text is too small and thin.  Doesn\'t pass the accessibility sniff test. -FB -->\n						</button>\n						<bb-sharing variety=\"default\" size=\"small\"></bb-sharing>\n					</aside>\n				</div>\n				<div class=\"page-column--left\">\n					<div class=\"product-gallery\">\n						<img src=\"https://static6.betabrands.com/media/catalog/product/cache/1/image/0dc2d03fe217f8c83829496872af24a0/c/o/comfort_first_blouse_0_1.jpg?iopts=1150x\">\n						<img src=\"/angular/images/styleguide/horizontal_short_gallery.jpg\">\n						<img src=\"/angular/images/styleguide/square_gallery.jpg\">\n						<img src=\"/angular/images/styleguide/vertical_gallery.jpg\">\n					</div>\n					<section class=\"callouts\">\n						<bb-callout title=\"Make\" theme=\"white\" body=\"{{vm.make}}\"></bb-callout>\n					</section>\n					<bb-callout variety=\"cover\" title=\"Comfort First Blouse draping\" image=\"https://static7.betabrands.com/media/catalog/product/cache/1/image/0dc2d03fe217f8c83829496872af24a0/c/o/comfort_first_blouse_7.jpg?iopts=1150x\"></bb-callout>\n					<section class=\"callouts\">\n						<bb-callout alignment=\"center\" variety=\"alt\" icon=\"betabrand-package icon--xlarge\" headline=\"Shipping\" body=\"<p>Ships In Early June</p>\"></bb-callout>\n						<bb-callout alignment=\"center\" variety=\"alt\" icon=\"betabrand-payment icon--xlarge\" headline=\"Payment\" body=\"<p>No charges unless it reaches it&#8217;s goal</p>\"></bb-callout>\n					</section>\n					<bb-callout variety=\"cover\" title=\"Woman walking while wearing Comfort First Blouse\" image=\"https://static7.betabrands.com/media/catalog/product/cache/1/image/0dc2d03fe217f8c83829496872af24a0/c/o/comfort_first_blouse_6.jpg?iopts=1150x\"></bb-callout>\n					<section class=\"callouts\">\n						<bb-callout title=\"Make\" theme=\"white\" body=\"{{vm.story}}\"></bb-callout>\n					</section>\n					<section class=\"callouts\">\n						<div class=\"callout callout--left callout--white\">\n							<h3 class=\"h3\">Sizing Chart</h3>\n							<div class=\"product-size-chart\">\n								<sizing-chart title=\'Size\' size=\'6\' row-labels=\'Bust|Hip\' column-labels=\'X-Small|Small|Medium|Large|X-Large|XX-Large\' bust-values=\'33\"-34.5\"|34.5-35.5\"|36.5-38.5\"|38.5\"|41\"|44\"\' hip-values=\'33.5-35.5\"|36-38\"|38-40\"|41\"|43\"|46\"\'></sizing-chart>\n							</div>\n						</div>\n					</section>\n					<!-- variant from master molecule:\n					\'background-gray-light\' on profile-card\n					\'button-primary\' on follow and following buttons.\n				-->\n					<div class=\"callouts\">\n						<div class=\"callout callout--left callout--white\">\n							<profilecard alignment=\"left\" variety=\"default\" designer=\"true\" profile=\"vm.crowdfunding.products[0].designers[0]\"></profilecard>\n						</div>\n					</div>\n					<div class=\"callouts\">\n						<div class=\"callout callout--left callout--white\">\n							<comments-thread highlights=\"commentHighligts\" thread-id=\"\'product-\'+vm.crowdfunding.products[0].id\" customer=\"vm.fullProfile\"></comments-thread>\n						</div>\n					</div>\n				</div>\n			</div>\n			<div id=\"js-target-end\"></div>\n			<div class=\"realted-products\">\n				<h3 class=\"h3 decorated-type\"><span>Related Products</span></h3>\n				<div class=\"card-gallery\">\n					<product-card class=\"product-card card\" product=\"product\" category=\"vm.preorderProducts\" index=\"{{::$index}}\" is-think-tank-category=\"false\" ng-repeat=\"product in vm.preorderProducts | limitTo : 4 track by product.id\" \"></product-card>\n				</div>\n\n			</div>\n\n\n		</div>\n	</article>\n</div>\n");
    $templateCache.put("/angular/app/styleselector/styleselector.html", "<nav class=\"style-selector tabs tabs--small\">\n	<a ng-href=\"{{ style.url }}\" class=\"button\" ng-class=\"{ \'button-primary\': style.active }\" ng-repeat=\"style in vm.styles | toArray\">{{style.name}}</a>\n</nav>\n");
    $templateCache.put("/angular/app/vote-button/vote-button.html", "<div class=\"production-actions\">\n	<span class=\"vote-button__reward\" ng-class=\"{\'amplify\': vm.amplify, \'visuallyhidden\': !vm.amplify}\">\n		{{vm.voteMessage}}\n	</span>\n	<button \n		class=\"vote-button\"  \n		ng-disabled=\"vm.voted\" \n		ng-click=\"vm.voteButtonClick(vm.score)\" \n		aria-live=\"assertive\" \n		ng-class=\"{ \'has-voted\' : vm.voted, \'is-loading\' : vm.submitClicked, \'button button-primary\' : vm.variety == \'default\', \'button-small\' : vm.size == \'small\' }\">\n\n		<span class=\"vote-button__loading fa fa-refresh fa-spin\" ng-if=\"vm.variety == \'default\'\"><span class=\"visuallyhidden\">Vote in progress</span></span>\n		<span class=\"voted\"><i ng-if=\"vm.variety == \'icon\'\" class=\"fa fa-heart fa-fw fa-{{(vm.size == \'large\') ? \'2\' : \'1\'}}x\"></i><span ng-if=\"vm.variety == \'default\'\">Voted</span></span>\n		<span class=\"vote\"><i ng-if=\"vm.variety == \'icon\'\" class=\"fa fa-heart-o fa-fw fa-{{(vm.size == \'large\') ? \'2\' : \'1\'}}x\"></i><span ng-if=\"vm.variety == \'default\'\">Vote</span></span>\n		<span class=\"visuallyhidden\"> for {{::vm.name}}</span>\n	</button>\n\n\n	<button \n		ng-if=\"vm.replaceVerb\"\n		class=\"skip-button button button-secondary button-{{vm.size}} button-cta\" \n		ng-click=\"vm.skipButtonClick(vm.submission)\" \n		ng-disabled=\"vm.voted\"\n		aria-live=\"assertive\" \n		ng-class=\"::{\'is-loading\' : vm.submitClicked }\">\n		<span class=\"vote\">{{vm.replaceVerb}}</span>\n		<span class=\"visuallyhidden\"> {{::vm.name}}</span>\n	</button>\n</div>\n");
}]);

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .config(config);

    function config($routeProvider) {
        $routeProvider
            .when('/parsons', {
                controller: 'ParsonsController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/thinktank/custom/welcome-pages/parsons/parsons.html'
            })
            .when('/NYF16', {
                controller: 'NYF16Controller',
                controllerAs: 'vm',
                templateUrl: '/angular/app/thinktank/custom/welcome-pages/nyf16/nyf16.html'
            })
            .when('/fashionbizshow', {
                controller: 'FashionBizShowController',
                controllerAs: 'vm',
                templateUrl: '/angular/app/thinktank/custom/welcome-pages/fashion-biz-show/fashionbizshow.html'
            })
    }

})();


(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("FashionBizShowController", FashionBizShowController);

    FashionBizShowController.$inject = ["$scope", "$q", "TrackingService", "PageService"]

    function FashionBizShowController($scope, $q, TrackingService, PageService) {

        var vm = this

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            "Source": "FashionBizShow page"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType("ItemPage")
        PageService.setBodyClass("FashionBizShow-page")

        $scope.$emit("viewLoaded")

        vm.showLoginModal = function() {
            CustomerService.showLoginModal().then(function() {
                if (CustomerService.data.loggedIn) {
                    $location.path("/account/dashboard")
                }
            })
        }

    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("NYF16Controller", NYF16Controller);

    NYF16Controller.$inject = ["$scope", "$q", "TrackingService", "PageService", "CustomerService", "$location"]

    function NYF16Controller($scope, $q, TrackingService, PageService, CustomerService, $location) {

        var vm = this

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            "Source": "NYF16 page"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType("ItemPage")
        PageService.setBodyClass("NYF16-page")

        $scope.$emit("viewLoaded")

        vm.showLoginModal = function() {
            CustomerService.showLoginModal().then(function() {
                if (CustomerService.data.loggedIn) {
                    $location.path("/account/dashboard")
                }
            })
        }

    }

})();

(function() {

    "use strict";

    angular
        .module("BetabrandApp")
        .controller("ParsonsController", ParsonsController);

    ParsonsController.$inject = ["$scope", "$q", "TrackingService", "PageService", "CustomerService", "$location"]

    function ParsonsController($scope, $q, TrackingService, PageService, CustomerService, $location) {

        var vm = this

        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)
        var trackingData = {
            "Source": "Parsons page"
        }
        trackingDeferred.resolve(trackingData)

        PageService.setMicrodataItemType("ItemPage")
        PageService.setBodyClass("Parsons-page")

        $scope.$emit("viewLoaded")

        vm.showLoginModal = function() {
            CustomerService.showLoginModal().then(function() {
                if (CustomerService.data.loggedIn) {
                    $location.path("/account/dashboard")
                }
            })
        }

        CustomerService.getData().then(function(data) {
            if (data.loggedIn && data.email.indexOf('newschool.edu') > -1)
                $location.path("/account/dashboard");
        })

    }

})();

BetabrandApp.directive('dynFbCommentBox', ['$facebook', function($facebook) {
    function createHTML(href, numposts, colorscheme, width) {
        return '<div class="fb-comments" ' +
            'data-href="' + href + '" ' +
            'data-numposts="' + numposts + '" ' +
            'data-colorsheme="' + colorscheme + '" ' +
            'data-width="' + width + '">' +
            '</div>';
    }


    return {
        restrict: 'A',
        scope: {},
        link: function postLink(scope, elem, attrs) {
            attrs.$observe('pageHref', function(newValue) {
                var href = newValue;
                var numposts = attrs.numposts || 5;
                var colorscheme = attrs.colorscheme || 'light';
                var width = attrs.width || '100%';

                elem.html(createHTML(href, numposts, colorscheme, width));
                $facebook.parse(elem[0]);
            });
        }
    };
}]);
BetabrandApp.directive('fbCommentCount', ['$facebook', function($facebook) {
    function createHTML(href) {
        return '<span class="fb-comments-count" ' +
            'data-href="' + href + '" ' +
            '</span>';
    }

    return {
        restrict: 'A',
        scope: {},
        link: function postLink(scope, elem, attrs) {
            attrs.$observe('pageHref', function(newValue) {
                var href = newValue;

                elem.html(createHTML(href));
                $facebook.parse(elem[0]);
            });
        }
    };
}]);
(function() {
    'use strict';
    angular
        .module('BetabrandApp')
        .controller("HowItWorksController", howItWorksController);
    howItWorksController.$inject = ["$scope", "ThinkTankService", "CategoryService", "ModalService", "PageService", "ProductService", "$timeout", "TrackingService"];

    function howItWorksController($scope, ThinkTankService, CategoryService, ModalService, PageService, ProductService, $timeout, TrackingService) {

        var vm = this

        $scope.showIdeaModal = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/submit-idea/idea-modal.html",
                controller: "IdeaModalController"
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }

        $timeout(function() {
            $scope.$emit('viewLoaded')
        }, 300);

        $scope.showVideoModal = function(which) {
            if (["what-makes-great-design"].indexOf(which) < 0)
                return

            TrackingService.trackEvent("Clicked Help Video Link", {
                "Video": which
            })

            ModalService.showModal({
                templateUrl: "/angular/app/modal/videos/" + which + ".html",
                controller: "NewsletterModalController" //Just need any modal controller
            })
        }

        PageService.setMicrodataItemType('QAPage')

    }
})();

angular
    .module('BetabrandApp')
    .controller('SubmissionLandingController', SubmissionLandingController);

SubmissionLandingController.$inject = ['$scope', '$document', '$timeout', '$upload', '$q', '$log', '$http', 'CustomerService', 'TrackingService', 'ThinkTankService', 'CategoryService', 'ModalService', 'PageService', 'ProductService', '$routeParams', '_', '$window', '$location', '$kookies', 'NotificationsService']

function SubmissionLandingController($scope, $document, $timeout, $upload, $q, $log, $http, CustomerService, TrackingService, ThinkTankService, CategoryService, ModalService, PageService, ProductService, $routeParams, _, $window, $location, $kookies, NotificationsService) {

    var vm = this
    vm.ideaPhaseOne = 'New Idea Customer Views'
    if ($location.search().contest)
        $kookies.set('betabrand-contest', $location.search().contest, { expires: 14, path: '/' })

    var trackingDeferred = $q.defer()
    TrackingService.setTrackingPromise(trackingDeferred.promise)
    var trackingData = {
        'Source': "Submission Form"
    }
    trackingDeferred.resolve(trackingData)

    // 
    vm.activeTab = (vm.submissionId) ? 3 : 1
    vm.upperBound = 1
    vm.idea = {
        type: 'ideaForm',
        name: 'name', // title
        shortDescription: '',
        story: '', // long_description
        occasion: '',
        fabric: '',
        msrp: '',
        gender: '',
        additional: '',
        thumbnail: '',
        media: {
            preview: {
                image: "",
                offset: 0
            },
            images: [],
            video: [],
            links: []
        },
        isValid: false
    }
    vm.coverImageIndex = 0
    vm.repositionCoverActive = false
    vm.initialY = ''
    vm.initialPreview = ''
    vm.submissionAttempted = false
    vm.profileUpdating = false

    vm.submissionId = $routeParams.id

    vm.selectedImage = null

    vm.refreshUserData = function() {
        CustomerService.getData().then(function(data) {
            $scope.customer = data

        })
    }

    $scope.$on('bag-images.drop', function(e, el) {
        // Save images on reordering
        if (vm.submissionId) {
            vm.storeIdea()
        }
        $timeout(function() {
            if (typeof vm.idea.media.preview !== "undefined") {
                vm.idea.media.preview.image = vm.idea.media.images[0]
            } else {
                vm.idea.media.preview = {}
                vm.idea.media.preview.image = vm.idea.media.images[0]
                vm.idea.media.preview.offset = 0
            }
        }, 500);
    });

    $scope.$watch(function() { return CustomerService.getData() }, function() {
        vm.refreshUserData()
    })

    $timeout(function() {
        angular.element($window).triggerHandler('scroll')
    }, 0)

    vm.setPanel = function(tabId) {
        $log.debug('vm.submissionForm.$valid', vm.submissionForm.$valid)
        if (vm.submissionForm.$valid) {

            var duration = 500
            var offset = 108
                // var matchingPanel = angular.element(document.getElementById('submission-'+tabId))
            var matchingPanel = angular.element(document.getElementById('submissionForm'))
                // href="#submissionTwo" du-smooth-scroll duration="1000" offset="70" 
                //Scroll to the exact position
            $document.scrollToElement(matchingPanel, offset, duration)

            // Keep newly revealed sections open.
            vm.upperBound = (tabId >= vm.activeTab) ? tabId : vm.activeTab
            vm.activeTab = tabId
            $log.debug('Run setPanel', tabId)
            var tabs = document.getElementsByClassName('submission-panel')
            $log.debug(tabs[tabId - 1].offsetTop)
            var elm = tabs[tabId - 1]

        } else {
            $log.debug('is NOT valid')
        }

    }

    vm.filePreview = function(e) {
        $log.debug('run file preview', e)
    }

    vm.validateForm = function(e) {
        var loggedIn = CustomerService.data.loggedIn
        var hasBio = CustomerService.data.designerBio && CustomerService.data.image
        vm.submissionAttempted = true
        $log.debug('validateForm', e)
        e.preventDefault()
        vm.submitted = true
        $log.debug('$scope.submissionForm', $scope.submissionForm)
        $log.debug('Error $scope.submissionForm')
        $log.debug('CustomerService.data', CustomerService.data)
        if (!loggedIn) {
            vm.submitting = true
            $log.debug('not logged in')
            CustomerService.showLoginModal({
                    source: "idea"
                })
                .then(function(loggedIn) {
                    // Post-login actions
                    // If you're logged in, but you don't yet have a designerBio or Image, trigger second section.
                    if (loggedIn && hasBio) {
                        vm.refreshUserData()
                        $log.debug('no data designerBio or Image')
                            // Submit idea whether or not they have a bio and image--we want it in either state.
                        _submitIdea()
                    } else if (loggedIn) {
                        $log.debug('is loggedIn')
                        vm.refreshUserData()
                        vm.setPanel(2)
                        _submitIdea()
                    } else {
                        $log.debug('is not loggedIn')
                        vm.submitting = false
                    }
                }, function() {
                    vm.submitting = false
                })
        } else if (loggedIn && !hasBio) {
            $log.debug('Logged in but no bio or image')
            vm.setPanel(2)
                // Submit idea whether or not they have a bio and image--we want it in either state.
            vm.sendSubmission = true
            _submitIdea()
        } else {
            $log.debug('Logged in')
            $log.debug('Idea Submit: already logged in')
            vm.ideaPublish = true
                // vm.successMessageFinal = true 
            vm.sendSubmission = true
            _submitIdea()
        }

    }

    vm.errorMessage = false
    vm.successMessage = false

    vm.summonCoverUpload = function() {
        $timeout(function() {
            angular.element(document.getElementById('cover-upload').previousSibling)[0].click()
        }, 100)
    }

    vm.repositionCover = function(event, sequence) {
        var CurY = (window.Event) ? event.pageY : event.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop)
        var coverPreview = angular.element(document.getElementById('cover-preview'))[0]
        if (vm.idea.media.images.length > 0 && sequence === 'begin') {
            vm.repositionCoverActive = true
            vm.initialPreview = coverPreview.style.marginTop
            vm.initialY = (window.Event) ? event.pageY : event.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop)
                // Begin click and drag.
        } else if (vm.idea.media.images.length > 0 && sequence === 'move' && vm.repositionCoverActive) {
            var newY = parseInt(vm.initialPreview) - (vm.initialY - CurY)
            coverPreview.style.marginTop = newY + 'px'
            vm.idea.media.preview.offset = coverPreview.style.marginTop
                // End click and drag.
        } else if (vm.idea.media.images.length > 0 && sequence === 'end') {
            // End click and drag.
            vm.repositionCoverActive = false
        } else {
            return true
        }
    }

    $scope.$watch(function() { return $scope.files }, function() {
        _uploadFiles($scope.files)
    })

    $scope.$watch(function() { return $scope.profileImage }, function() {
        $log.debug($scope.profileImage)
        if (typeof $scope.profileImage == "undefined")
            return
        CustomerService.uploadImage($scope.profileImage).then(function(result) {
            var data = {
                designerImageUrl: result.image
            }

            CustomerService.updateAccount($scope.customer.id, data).then(function() {
                CustomerService.getData(true).then(function(data) {

                    if ($scope.customer.designerBio !== data.designerBio) {
                        $scope.customer.image = data.image
                    }

                    $scope.customer.image = data.image

                })
            })
        })
    })

    function _uploadFiles(files) {
        // $log.debug('_uploadFiles(files)', files)
        var deferred = $q.defer()

        if (files && files.length) {
            var count = 0
            angular.forEach(files, function(file, index) {
                $upload.upload({
                    url: "/thinktank/index/submitimages/",
                    fields: {
                        'title': vm.ideaName,
                    },
                    file: file
                }).progress(function(evt) {
                    vm.isUploading = true
                    var progressPercentage = parseInt(100.0 * evt.loaded / evt.total)
                    $log.debug('progress: ' + progressPercentage + '% ' + evt.config.file.name)
                }).success(function(data, status, headers, config) {
                    $scope.filesUploaded = true
                    $log.debug('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data))
                    count++
                    vm.ideaMedia = vm.ideaMedia || {}
                    vm.idea.media.images = vm.idea.media.images || []
                    vm.coverImageIndex = vm.coverImageIndex || 0
                    vm.idea.media.images.push(data.url)
                    vm.idea.media.preview.image = vm.idea.media.images[vm.coverImageIndex]
                    if (vm.submissionId)
                        _submit();
                    if (count == files.length) {
                        $scope.files = null
                        $scope.filesUploaded = false
                        deferred.resolve(data)
                    }
                }).error(function(data) {
                    //add in which file it is
                    $log.debug(file)
                    if (data.message) {
                        data.message = data.message + " (" + file.name + ")"
                    }
                    deferred.reject(data)
                })
            })
        } else {
            deferred.resolve({
                "result": "no files"
            })
        }

        return deferred.promise
    }

    //puts idea in local storage while typing to prevent nastly losses
    vm.storeIdea = function() {
        if (!vm.submissionId && 'localStorage' in window && window['localStorage'] !== null) {
            //with out the ternary we get 'undefined' in local storage
            localStorage['thinktankSubmissionName'] = vm.ideaName ? vm.ideaName : ""
            localStorage['thinktankSubmissionStory'] = vm.ideaStory ? vm.ideaStory : ""
            localStorage['thinktankShortDescription'] = vm.ideaShortDescription ? vm.ideaShortDescription : ""
            localStorage['thinktankOccasion'] = vm.ideaOccasion ? vm.ideaOccasion : ""
            localStorage['thinktankFabric'] = vm.ideaFabric ? vm.ideaFabric : ""
            localStorage['thinktankMsrp'] = vm.ideaMsrp ? vm.ideaMsrp : ""
            localStorage['thinktankAdditional'] = vm.ideaAdditional ? vm.ideaAdditional : ""
            localStorage['thinktankGender'] = vm.ideaGender ? vm.ideaGender : ""
                // localStorage['thinktankMedia'] = vm.ideaMedia ? vm.ideaMedia : ""
            localStorage['idea.media.images'] = vm.idea.media.images ? vm.idea.media.images : ""
            localStorage['coverImageIndex'] = vm.coverImageIndex ? vm.coverImageIndex : 0
        } else if (vm.submissionId) {
            vm.save(false)
        }
    }

    vm.deleteImage = function(index, event) {
        event.preventDefault()
        if (vm.idea.media.images[index] === vm.idea.media.preview.image) {
            vm.idea.media.images.splice(index, 1)
            if (($scope.files !== null) && ($scope.files !== '')) { $scope.files.splice(index, 1) }
            vm.coverImageIndex = 0
            vm.idea.media.preview.image = vm.idea.media.images[vm.coverImageIndex]
        } else {
            vm.idea.media.images.splice(index, 1)
            if (!_.isEmpty($scope.files)) {
                $scope.files.splice(index, 1)
            }
        }
        if (vm.submissionId) {
            vm.storeIdea()
        }
    }

    vm.previewImage = function(index, event) {
        event.preventDefault()
        vm.coverImageIndex = index
        vm.idea.media.preview.image = vm.idea.media.images[vm.coverImageIndex]
            // reset position on change preview.
        angular.element(document.getElementById('cover-preview'))[0].style.marginTop = 0
    }

    vm.calcPreviewWidth = function() {
        angular.element(document.querySelector('.submission-preview'))[0].style.width = angular.element(document.querySelector('.submission-preview__wrapper'))[0].offsetWidth + 'px'
    }

    vm.updateProfile = function() {
        vm.profileUpdating = true
        var data = {
            designerBio: $scope.customer.designerBio
        }

        CustomerService.updateAccount($scope.customer.id, data).then(function() {
            CustomerService.getData(true).then(function(data) {
                $scope.customer = data
                vm.showSuccessModal()
                vm.profileUpdating = false
            })
        })
    }

    //pulls an idea from local storage if it hasn't been submitted yet
    function _loadStoredIdea() {
        if (!vm.submissionId && 'localStorage' in window && window['localStorage'] !== null) {
            if (localStorage['thinktankSubmissionName']) {
                vm.ideaName = localStorage['thinktankSubmissionName']
            }

            if (localStorage['thinktankSubmissionStory']) {
                vm.ideaStory = localStorage['thinktankSubmissionStory']
            }

            if (localStorage['thinktankShortDescription']) {
                vm.ideaShortDescription = localStorage['thinktankShortDescription']
            }

            if (localStorage['thinktankOccasion']) {
                vm.ideaOccasion = localStorage['thinktankOccasion']
            }

            if (localStorage['thinktankMsrp']) {
                vm.ideaMsrp = localStorage['thinktankMsrp']
            }

            if (localStorage['thinktankAdditional']) {
                vm.ideaAdditional = localStorage['thinktankAdditional']
            }

            if (localStorage['thinktankGender']) {
                vm.ideaGender = localStorage['thinktankGender']
            }

            if (localStorage['thinktankFabric']) {
                vm.ideaFabric = localStorage['thinktankFabric']
            }

            if (localStorage['thinktankMedia']) {
                vm.ideaMedia = null //localStorage['thinktankMedia']
                localStorage['thinktankMedia'] = null
            }

        } else if (vm.submissionId) {
            console.log('run else from not local storage');
            ThinkTankService.getDesign(vm.submissionId, vm.isVisible).then(function(response) {
                vm.ideaCustomerId = response.data.customerId
                vm.ideaName = response.data.name
                vm.ideaStory = response.data.story
                vm.ideaShortDescription = response.data.shortDescription
                vm.ideaOccasion = response.data.occasion
                vm.ideaMsrp = response.data.msrp
                vm.ideaAdditional = response.data.additional
                vm.ideaFabric = response.data.fabric
                vm.ideaGender = response.data.gender
                vm.ideaState = response.data.state
                vm.idea.media = response.data.media
                vm.tags = []
                _.each(response.data.tags, function(a) { vm.tags.push(a.tag) })
                vm.insta = vm.tags.indexOf('insta-designs') !== -1


                if (typeof response.data.media.preview == "undefined") {
                    vm.idea.media.preview = { image: response.data.media.images[0] }
                }
            })
        }
    }

    _loadStoredIdea()

    function _clearStoredIdea() {
        if ('localStorage' in window && window['localStorage'] !== null) {
            localStorage.removeItem('thinktankSubmissionName')
            localStorage.removeItem('thinktankSubmissionStory')
            localStorage.removeItem('thinktankShortDescription')
            localStorage.removeItem('thinktankOccasion')
            localStorage.removeItem('thinktankAdditional')
            localStorage.removeItem('thinktankGender')
            localStorage.removeItem('thinktankMsrp')
            localStorage.removeItem('thinktankFabric')
            localStorage.removeItem('thinktankMedia')
            localStorage.removeItem('ideaMedia')
            localStorage.removeItem('idea.media.images')
            localStorage.removeItem('coverImageIndex')
        }
    }

    vm.showSuccessModal = function() {
        ModalService.showModal({
            templateUrl: "/angular/app/thinktank/submission/submission-success-modal.html",
            controller: "SubmissionSuccessModalController"
        }).then(function(modal) {
            modal.close.then(function(result) {

            })
        })
    }

    //try to load a stored idea on form open
    vm.save = _.debounce(function(redirect) {
        var loggedIn = CustomerService.data.loggedIn
        vm.submitting = true

        //For final saves
        if (redirect && !loggedIn) {
            CustomerService.showLoginModal({
                    source: "idea"
                })
                .then(function(loggedIn) {
                    if (loggedIn) {
                        _submit().then(
                            function() {
                                _clearStoredIdea()
                                if (redirect) {
                                    $location.path("/account/dashboard/design-submissions/")
                                }
                            },
                            function() {

                            }
                        )
                    } else {
                        vm.submitting = false
                    }
                }, function() {
                    vm.submitting = false
                })
        } else {
            $log.debug('Idea Submit: already logged in')
            _submit().then(
                function() {
                    _clearStoredIdea()
                    if (redirect) {
                        $location.path("/account/dashboard/design-submissions/")
                    }
                    vm.submitting = false
                },
                function(data) {
                    if (data.status == 401) {

                        NotificationsService.addNotification({
                            message: "This submission can't be edited. If you've already submitted it, sit tight, we're reviewing it!",
                            type: "error"
                        })

                    }
                    vm.submitting = false
                }
            )
        }

        TrackingService.trackEvent('Participate', {
            'Participation Type': 'Save Design'
        })
    }, 1000);

    var _submitIdea = _.debounce(function() {
        $log.debug('_submitIdea')
            // _submitIdea doesn't run if the PHP doesn't have its expected contents.  Bad Request returns instead.
        var deferred = $q.defer()

        vm.errorMessage = false
        vm.isValid = true
        vm.submitting = true
        vm.sendSubmission = true

        _uploadFiles($scope.files).then(function(data) {
            // file upload success (or no files)
            if (data && data.result) {
                _submit().then(
                    function(data) {
                        // idea submit success
                        deferred.resolve(data)
                        _clearStoredIdea()
                        TrackingService.trackEvent('Participate', {
                            'Participation Type': 'Submit Design'
                        })

                        vm.submitting = false
                        vm.successMessage = true
                        vm.submitted = false


                        if ($scope.submission.sendSubmission && $scope.customer.designerBio && $scope.customer.image) {
                            vm.successMessageFinal = true
                            vm.submissionAttempted = false
                            vm.showSuccessModal()
                        }

                        // These appear to be clearing and resetting the form, 
                        // which should happen after submission, but not on save.

                        vm.isValid = false
                        vm.ideaName = ""
                        vm.ideaStory = ""
                        vm.ideaShortDescription = ""
                        vm.ideaOccasion = ""
                        vm.ideaMsrp = ""
                        vm.ideaAdditional = ""
                        vm.ideaSuggestedFabric = ""
                        vm.ideaSubmissionId = ""
                        vm.submissionForm.$setPristine()
                        vm.submissionForm.$setUntouched()
                    },
                    function(data) {
                        // idea submit error
                        deferred.reject(data)
                        vm.submitting = false
                    }
                )
            }
        }, function(data) {
            // file upload error
            deferred.reject(data)
            vm.submitting = false
            vm.errorMessage = data.message
        })

        return deferred.promise
    }, 1000)

    var _submit = function() {
        var submission = {
            name: $scope.submission.ideaName,
            story: $scope.submission.ideaStory,
            occasion: $scope.submission.ideaOccasion,
            shortDescription: $scope.submission.ideaShortDescription,
            occasion: $scope.submission.ideaOccasion,
            msrp: $scope.submission.ideaMsrp,
            additional: $scope.submission.ideaAdditional || '',
            fabric: $scope.submission.ideaFabric,
            gender: $scope.submission.ideaGender,
            sendSubmission: $scope.submission.sendSubmission,
            media: $scope.submission.idea.media
        }

        var contest = $kookies.get("betabrand-contest") || false
        if (contest) {
            contest = " :: Contest name: " + contest;
            submission.additional = submission.additional + ((submission.additional.indexOf(contest) < 0) ? contest : "");
            $kookies.remove('betabrand-contest', null, { expires: 14, path: '/' })
        }

        if (vm.submissionId) {
            submission['id'] = vm.submissionId
            return ThinkTankService.updateDesign(submission)
        } else {
            return ThinkTankService.saveDesign(submission)
        }


    }

    vm.submitted = false

    ThinkTankService.getConfig()
        .then(function(data) {
            $scope.$emit('viewLoaded')
            angular.element($window).bind('resize', function() {
                vm.calcPreviewWidth()
            })
            vm.calcPreviewWidth()

        })

    PageService.setMicrodataItemType('QAPage')
    PageService.setBodyClass('submission-page')

    $scope.$on("$destroy", function() {
        angular.element($window).unbind('resize')
    })


    $scope.showVideoModal = function(which) {
        if (["how-to-submit", "what-makes-great-design"].indexOf(which) < 0)
            return

        TrackingService.trackEvent("Clicked Help Video Link", {
            "Video": which
        })

        ModalService.showModal({
            templateUrl: "/angular/app/modal/videos/" + which + ".html",
            controller: "NewsletterModalController" //Just need any modal controller
        })
    }


}

//   
//   
//   
//   //     > Multi-step submission  [Idea-Media-Designer-Review&Submission]
//   //   Idea: 
//   //     Title
//   //     // keywords or Short Description 
//   //     Detailed Description
//   //     Who is the target customer?
//   //     What problem are you solving?
//   //     // What’s our  retail price?
//   //     // Maybe there is some more clever way to do this / Provide writing tips per step
//   //     // We don't have this yet, but there has to be a form // Link to submission sample
//   // 
//   //   Media:
//   //     Upload images 
//   //     Add links to videos, other pictures, media online 
//   //     Provide image guidelines
//   //     This needs to be better, serialized, a clear way to add whatever you have and however much you have of it, and guidelines for formatting.
//   // 
//   // // disregard for now - Designer content, form already exists.
//   //   Designer:
//   //     Short Description 
//   //     Profile Picture 
//   //     Profile Preview 
//   //     Link to social media profiles
//   //     Provide writing tips 
//   // 
//   //   Review & Submission:

(function() {
    'use strict';
    angular
        .module('BetabrandApp')
        .controller("SubmissionSuccessModalController", submissionSuccessModalController);
    submissionSuccessModalController.$inject = ["$scope", "$rootScope", "$location", "$document", "$timeout", "hotkeys", "TrackingService", "CustomerService", "close"];

    function submissionSuccessModalController($scope, $rootScope, $location, $document, $timeout, hotkeys, TrackingService, CustomerService, close) {
        var vm = this;

        $scope.display = true;
        $scope.closing = false;

        hotkeys.bindTo($scope)
            .add({
                combo: 'esc',
                description: 'Close Modal',
                callback: function() {
                    $scope.close()
                }
            })

        $scope.$on('closeModals', function() {
            $scope.close()
        })

        $scope.close = function() {
            $scope.closing = true;
            $timeout(function() {
                $scope.display = false;
                close()
                    // Wait for css animations to finish before removing
            }, 610)
        }

    }
})();

(function() {
    'use strict';

    thinkTankController.$inject = ['$scope', "$rootScope", "ModalService", "PageService", "ThinkTankService", "$route", "$filter", "_", "$timeout", "$window", "TrackingService", "$q", "CustomerService", "TagFilterPrep"];

    function thinkTankController($scope, $rootScope, ModalService, PageService, ThinkTankService, $route, $filter, _, $timeout, $window, TrackingService, $q, CustomerService, TagFilterPrep) {
        var vm = this
        var tag = $route.current.tag || false
        vm.PageService = PageService

        vm.data = {
            filters: {},
            submissions: TagFilterPrep.prepareSubmissionTags($route.current.locals.submissions.data),
            filteredSubmissions: $route.current.locals.submissions.data,
            isThinkTankCategory: true
        }

        // send a promise to the Tracking service for page tracking data
        var trackingData = null
        var trackingDeferred = $q.defer()
        TrackingService.setTrackingPromise(trackingDeferred.promise)

        function _buildTrackingData(data) {
            // Analytics: Set up Page Tracking Data
            var source = "Think Tank "

            trackingData = {
                'Source': 'Think Tank Page',
                'Shop Section': tag,
                'Shop Category': tag
            }

            trackingDeferred.resolve(trackingData)
        }

        //Initialize sorter values
        vm.filterSorter = {}

        vm.filterOptions = [
            { "label": "Gender", "attribute": "gender", "position": 0, "active": true },
            { "label": "Category", "attribute": "tags", "position": 1, "active": true },
            { "label": "Collections", "attribute": "collection", "position": 2, "active": false },
            { "label": "Contests", "attribute": "contest", "position": 3, "active": false }
        ]

        vm.sorterOptions = [
            { "label": "Hot", "attribute": "hotness", "default": true },
            { "label": "New", "attribute": "-createdAt" },
            { "label": "Votes (High > Low)", "attribute": "-counts.votes.score" },
            { "label": "Votes (Low > High)", "attribute": "counts.votes.score" },
            { "label": "Comments (High > Low)", "attribute": "-counts.comments.count" },
            { "label": "Comments (Low > High)", "attribute": "counts.comments.count" }
        ]

        _buildTrackingData(vm.data)
        PageService.setBodyClass('think-tank')



        $timeout(function() {
            $scope.$emit('viewLoaded')
            angular.element($window).triggerHandler('scroll')
            $rootScope.$broadcast('stickyBoxUpdate')
        }, 0);

        $timeout(function() {
            CustomerService.getData().then(function(response) {
                vm.customer = CustomerService.data
                $scope.$emit('viewLoaded')
                if (vm.customer.loggedIn && (vm.customer.gender === '1' || vm.customer.gender === '2') && !ThinkTankService.hasPrefilteredGender) {
                    var gender = (vm.customer.gender === '1') ? "men" : (vm.customer.gender === '2') ? "women" : null
                    var label = gender + '\'s'
                    ThinkTankService.hasPrefilteredGender = true
                    $rootScope.$broadcast('chooseGender', gender, label)
                }
                angular.element($window).triggerHandler('scroll')
                $rootScope.$broadcast('stickyBoxUpdate')
            });
        }, 0);

        vm.showHowItWorksModal = function() {
            ModalService.showModal({
                templateUrl: "/angular/app/modal/how-it-works/how-it-works-modal.html",
                controller: "HowItWorksModalController"
            }).then(function(modal) {
                modal.close.then(function(result) {})
            })
        }
    }

    angular
        .module('BetabrandApp')
        .controller("ThinkTankController", thinkTankController);

})();


(function() {
    'use strict';

    angular
        .module('BetabrandApp')

    .filter('removeTagPrefixLabel', function() {
        return function(label) {
            label = label || ""

            if (label.indexOf("Collection:") > -1)
                return label.replace("Collection:", "")

            if (label.indexOf("Contest:") > -1)
                return label.replace("Contest:", "")

            return label
        }
    })


})();

BetabrandApp
    .directive('toolTip', toolTip);

function toolTip() {
    var directive = {
        restrict: 'EA',
        replace: true,
        scope: {
            label: '@',
            icon: '@',
            orientation: '@'
        },
        transclude: true,
        templateUrl: '/angular/app/tooltip/tooltip.html',
        link: linkFunc,
        controller: toolTipController,
        controllerAs: 'vm',
        bindToController: true // because the scope is isolated
    };

    return directive;

    function linkFunc(scope, el, attr, ctrl) {

    }
}

toolTipController.$inject = ['$scope'];

function toolTipController($scope) {
    var vm = this;
}

BetabrandApp.factory('TrackingService', ['$rootScope', '$location', '$injector', '$kookies', '$log', '$q', '_', 'APP_CONFIG', 'LoggingService', 'LookupService', '$interval', 'SailthruService', 'AssetService',
    function($rootScope, $location, $injector, $kookies, $log, $q, _, APP_CONFIG, LoggingService, LookupService, $interval, SailthruService, AssetService) {

        /**
         * TrackingService centralizes analytics tracking. Various tracking services (eg. Mixpanel, GTM) can be configured
         * to handle incoming tracking data in their own way.
         *
         * ACTIVATING TRACKING FOR A PAGE
         *   For event tracking to be activated for a given page view, some trackers (eg mixpanel) require every page
         *   to call TrackingService.setTrackingPromise with a promise to provide page tracking data (that is, a set of
         *   properties to be included with events fired on that page, like product page data):
         *      var trackingDeferred = $q.defer()
         *      TrackingService.setTrackingPromise(trackingDeferred.promise)
         *   then when page data is available, resolve the promise with the data:
         *      trackingDeferred.resolve(trackingData)
         *   If there is no tracking promise set by the time the viewLoaded event occurs, an 'empty' promise will be set.
         *   If you define an 'init' property for your tracker, you MUST resolve the promise in the 'onLoad' property
         *
         * TRACKING FUNCTIONS
         *   There are 3 tracking functions in TrackingService, all of which forward to each registered tracker
         *   trackEvent: Tracks an action name and associated data, which can be white/black listed for each tracker
         *               by action name
         *   trackPage:  Tracks page views by url, which each tracker can configure to be tracked automatically
         *   track:      Tracks an action name and associated data for actions that may require additional processing.
         *               Registered trackers can define a function with the same name as the action to handle the action.
         *
         * BLACKLIST/WHITELIST
         *   Arrays in each tracker's data that are used by the trackEvent function to specify what events should be
         *   processed (whitelist), or ignored (blacklist). Blacklist takes precedence over whitelist.
         *
         * @constructor
         */
        function TrackingService() {

            var self = this

            //Set up Time on Site tracking
            var minutes = 0
            $interval(function() {
                minutes = minutes + 1
                self.track("timeOnSite", minutes)
            }, 60000)

            var trackers = {
                mixpanel: {
                    init: $q.defer(),
                    autoTrackVirtualPages: true,
                    onLoad: function() {

                        //Track a bunch of cookies
                        mixpanel.register({
                            "Sailthru HID": $kookies.get("sailthru_hid")
                        });
                        mixpanel.register({
                            "GA ID": $kookies.get("_ga")
                        });

                        var params = $location.search()
                            //track utm params
                        if (params.utm_campaign)
                            mixpanel.register({ "utm_campaign": params.utm_campaign })
                        if (params.utm_term)
                            mixpanel.register({ "utm_term": params.utm_term })
                        if (params.utm_source)
                            mixpanel.register({ "utm_source": params.utm_source })
                        if (params.utm_medium)
                            mixpanel.register({ "utm_medium": params.utm_medium })

                        trackers.mixpanel.init.resolve();
                    },
                    createCustomer: function(action, method, data) {
                        var method = _.capitalize(method)
                        if (data.previouslyIdentified == false) {
                            mixpanel.alias(data.email)
                            mixpanel.people.set({
                                "$email": data.email,
                                "$created": data.createdAt
                            });
                        }
                        mixpanel.register({
                            "Signup Date": data.createdAt,
                            "Signup Method": method,
                            "Email": data.email,
                            "Customer ID": data.id
                        })
                        mixpanel.track("Signup", { "Signup Method": method, "Previously Identified": data.previouslyIdentified })
                        mixpanel.people.increment('Signed up with ' + method)
                    },
                    identifyCustomer: function(action, data) {
                        if (data.email) {
                            mixpanel.identify(data.email)
                        }
                    },
                    loginCustomer: function(action, method, data) {
                        var now = new Date()
                        mixpanel.identify(data.email)
                        mixpanel.people.set({
                            "Customer ID": data.id,
                            "$firstname": data.firstname,
                            "$lastname": data.lastname,
                            "$email": data.email,
                            "$last_login": now.toISOString().substring(0, now.toISOString().length - 5)
                        });
                        mixpanel.track("Login", { "Login Method": _.capitalize(method) })
                    },
                    updateCustomerData: function(action, data) {
                        mixpanel.register({ "Logged In": data.loggedIn })

                        var repeat = !!(data || {}).repeatCustomer
                        if (!repeat) {
                            repeat = _getRepeatCustomerCookieValue()
                        } else {
                            _setRepeatCustomerCookieValue()
                        }
                        mixpanel.register({ "Repeat Customer": repeat });
                        mixpanel.register({ "New Visitor": _userVisitCount() == 1 })

                    },
                    checkoutSuccess: function(action, data) {
                        _setRepeatCustomerCookieValue()

                        switch (data.analytics.paymentMethod) {
                            case 'authorizenet':
                                data.analytics.paymentMethod = "Standard Credit Card"
                                break
                            case 'authorize_cim':
                                data.analytics.paymentMethod = "Saved Credit Card"
                                break
                            case 'betapaypal_expresscheckout':
                                data.analytics.paymentMethod = "Paypal Express Checkout"
                                break
                        }

                        var mpData = {
                            "Transaction Amount": data.analytics.transactionTotal,
                            "Number Of Items": data.analytics.orderNumberOfItems,
                            'Number Of CF Items': data.analytics.orderNumberOfCfItems,
                            'Number Of Non-CF Items': data.analytics.orderNumberOfStandardItems,
                            'Payment Method': data.analytics.paymentMethod
                        }

                        if (typeof data.analytics.referral == "object") {
                            mpData['Referral Code'] = data.analytics.referral.code
                            mpData['Referral Program'] = data.analytics.referral.program
                        }

                        mixpanel.track("Purchase", mpData)
                        mixpanel.people.track_charge(data.analytics.transactionTotal)
                        mixpanel.people.increment('Purchased')

                        angular.forEach(data.analytics.transactionProducts, function(value, index) {
                            var product = data.analytics.transactionProducts[index]
                            var mpData = self.buildProductTrackingData(product)
                            mpData["Product Quantity"] = product.quantity

                            if (true == product.crowdfunded) {
                                mpData["Crowdfunded"] = product.crowdfunded
                                mpData["Tier"] = product.tier
                            }

                            mixpanel.track("Purchase items", mpData)
                        });
                    },
                    trackPage: function(path) {
                        // requires a Source property to be set on the page tracking data
                        self.getTrackingData().then(function(data) {
                            var referrer = trackers.mixpanel.previousPageUrl ?
                                trackers.mixpanel.previousPageUrl :
                                (typeof document.referrer === 'undefined' ?
                                    '' :
                                    document.referrer)

                            data['Previous Url'] = trackers.mixpanel.previousPageUrl
                            trackers.mixpanel.previousPageUrl = $location.absUrl()

                            //Hack to keep mixpanel data consistent
                            if (data['Shop Section']) {
                                mixpanel.track('View Shop Page', data)
                            } else {
                                mixpanel.track('View ' + data['Source'], data)
                            }
                        })
                    },
                    trackEvent: function(action, data) {
                        self.getTrackingData().then(function(trackingData) {
                            var extend = angular.extend({}, trackingData || {}, data)
                            switch (action) {
                                case 'Newsletter Signup':
                                    if (data["Previously Identified"] == false) {
                                        mixpanel.alias(data["Email"])
                                        mixpanel.people.set({
                                            "$email": data["Email"],
                                            "$created": new Date().toISOString()
                                        });
                                    }
                                    break
                            }
                            mixpanel.track(action, extend)
                        })
                    },
                    blacklist: [
                        'View Activities'
                    ]
                }, // end Mixpanel
                gtm: {
                    init: $q.defer(),
                    autoTrackVirtualPages: true,
                    previousPageUrl: null,
                    onLoad: function() {
                        if (!window.dataLayer) {
                            $log.error("GTM dataLayer missing")
                            window.dataLayer = []
                        }
                        dataLayer.push({ 'event': 'initialPageLoad' })

                        trackers.gtm.init.resolve()
                    },
                    updateCustomerData: function(action, data) {
                        data = data || {}
                        var customerData = {
                            id: data.id,
                            name: (data.firstname || "") + " " + (data.lastname || ""),
                            email: data.email,
                            client: data.client,
                            gender: data.gender,
                            createdAt: data.createdAt,
                            loggedIn: data.loggedIn,
                            hasAccount: data.hasAccount,
                            repeatCustomer: data.repeatCustomer
                        }

                        dataLayer.push({ 'customerData': customerData })
                    },
                    updateAddressData: function(action, data) {
                        data = data || {}
                        dataLayer.push(data)
                    },
                    addedToCart: function(action, data) {
                        trackers.gtm.updateCartData(action, data)
                        dataLayer.push({ 'event': 'addedToCart' })
                    },
                    removedFromCart: function(action, data) {
                        trackers.gtm.updateCartData(action, data)
                        dataLayer.push({ 'event': 'removedFromCart' })
                    },
                    updateCartData: function(action, data) {
                        data = data || {}
                            // convert totals array to an object indexed with the code
                        if (data.totals) {
                            var totals = {}
                            for (var i = 0; i < data.totals.length; i++) {
                                totals[data.totals[i].code] = data.totals[i]
                            }
                            data.totals = totals
                        }
                        dataLayer.push({ 'cartData': data })
                    },
                    updateProductData: function(action, data) {
                        data = data || {}
                        var productData = {
                            name: data.name,
                            id: data.id,
                            sku: data.sku,
                            price: (data.prices || {}).final || '',
                            discount: (data.prices || {}).discount_amount || '',
                            tags: data.tags,
                            canonicalUrl: data.canonicalUrl,
                            imageUrl: data.thumbnail,
                            brand: "Betabrand"
                        }

                        var sp = data.simpleProducts
                        if (sp) {
                            productData.childSkus = [];
                            for (var x = 0; x < sp.length; x++) {
                                productData.childSkus.push({
                                    sku: sp[x].simple_product_sku,
                                    id: sp[x].simple_product_id,
                                    name: sp[x].simple_product_name
                                });
                            }
                        }

                        dataLayer.push({ productData: productData })
                    },
                    updateCategoryData: function(action, data) {
                        data = data || {}
                        var categoryData = {
                            id: data.id,
                            name: data.name
                        }
                        if (data.products) {
                            var productIds = data.products.map(function(product) { return product.id })
                            categoryData['productIds'] = productIds;
                        }
                        dataLayer.push({ categoryData: categoryData })
                    },
                    updateCategoryProductIds: function(action, data) {
                        dataLayer.push({ 'categoryProductIds': data })
                    },
                    push: function(action, data) {
                        dataLayer.push(data)
                    },
                    createCustomer: function() {
                        dataLayer.push({ 'event': 'createCustomer' });
                    },
                    loginCustomer: function() {
                        dataLayer.push({ 'event': 'customerLoggedIn' });
                    },
                    checkoutSuccess: function(action, data) {
                        data.analytics.cartData = null
                        dataLayer.push(data.analytics)
                        dataLayer.push({ 'event': action })
                    },
                    trackPage: function(path) {
                        // single page app hack for GA
                        var referrer = trackers.gtm.previousPageUrl ?
                            trackers.gtm.previousPageUrl :
                            (typeof document.referrer === 'undefined' ?
                                '' :
                                document.referrer)

                        trackers.gtm.previousPageUrl = $location.absUrl()
                        self.getTrackingData().then(function(trackingData) {
                            dataLayer.push({
                                'referrer': referrer,
                                'virtualPagePath': path,
                                'source': trackingData['Source'],
                                'event': 'virtualPageview'
                            })
                        })
                    },
                    trackEvent: function(action, data) {
                        // translate any non-gtm style events (eg Mixpanel)
                        var gData
                        switch (action) {
                            case 'Participate':
                                gData = { 'category': action }
                                action = data['Participation Type']
                                break;
                            case 'Newsletter Signup':
                                if ((data || {})['Email']) {
                                    dataLayer.push({ 'newsletterSignupEmail': data['Email'] })
                                }
                                gData = data || {}
                                break;
                            default:
                                gData = data || {}
                        }

                        dataLayer.push({
                            'eventCategory': gData.category,
                            'eventAction': action,
                            'eventLabel': gData.label,
                            'eventValue': gData.value,
                            'eventNonInteraction': gData.noninteraction,
                            'event': 'analyticsEvent'
                        })
                    },
                    timing: function(action, data) {
                        angular.forEach(Object.keys(window.betabrand.timing), function(key) {
                            if (typeof window.betabrand.timing[key] == "function" || key == "start") return
                            dataLayer.push({
                                'event': "timingEvent",
                                'eventCategory': "App Initialization",
                                'eventVar': key,
                                'eventValue': window.betabrand.timing[key]
                            })
                        })
                    },
                    whitelist: [
                        'Participate',
                        'View Cart',
                        'Newsletter Signup',
                        'Play Video',
                        'Pause Video',
                        'Percent Video Played',
                        'Select Shipping Info'
                    ]
                }, // end GTM
                optimizely: {
                    checkoutSuccess: function(action, data) {
                        var valueInCents = data.analytics.transactionTotal * 100

                        _optimizely().push(['trackEvent', 'checkout_success', { 'revenue': valueInCents }])
                        if (data.analytics.items && data.analytics.items.length > 1) {
                            _optimizely().push(['trackEvent', 'more_than_one_item'])
                        }
                    },
                    comment: function(action, data) {
                        _optimizely().push(['trackEvent', 'commented'])
                        if (data.parent)
                            _optimizely().push(['trackEvent', 'comment_reply'])
                    },
                    timeOnSite: function(action, data) {
                        _optimizely().push(['trackEvent', 'minutes_on_site_' + data])
                    },
                    trackEvent: function(action, data) {
                        action = action.toLowerCase().replace(/ /g, "_")
                        _optimizely().push(['trackEvent', action])
                    },
                    createCustomer: function(action, data) {
                        action = "create_customer"
                        _optimizely().push(['trackEvent', action])
                    },
                    loginCustomer: function(action, data) {
                        action = "login_customer"
                        _optimizely().push(['trackEvent', action])
                    },
                    blacklist: []
                },
                fullstory: {
                    init: $q.defer(),
                    onLoad: function() {
                        if (!window.FS) {
                            window['_fs_ready'] = function() {
                                trackers.fullstory.init.resolve()
                            }
                        } else {
                            trackers.fullstory.init.resolve()
                        }
                    },
                    updateCustomerData: function(action, data) {
                        trackers.fullstory.identifyCustomer('identifyCustomer', data)
                    },
                    identifyCustomer: function(action, data) {
                        data = data || {}
                        var fsData = {
                                displayName: (data.firstname ? data.firstname : "") + (data.lastname ? " " + data.lastname : ""),
                                email: data.email ? data.email : (data.Email ? data.Email : "")
                            },
                            id = data.id ? data.id : fsData.email

                        if (id.length || fsData.displayName.length || fsData.email.length)
                            FS.identify(id, fsData)
                    },
                    trackEvent: function(action, data) {
                        switch (action) {
                            case 'Newsletter Signup':
                                trackers.fullstory.identifyCustomer('identifyCustomer', data)
                                break
                        }
                    },
                    whitelist: [
                        'Newsletter Signup'
                    ]
                },
                performance: {
                    timing: function(action, data) {
                        var params = $location.search()
                        if (params.performance)
                            window.betabrand.timing.tag = params.performance
                            // LoggingService.serverSideLog(window.betabrand.timing, "timing")
                    }
                },
                getstream: {
                    init: $q.defer(),
                    onLoad: function() {
                        self.streamClient = new StreamAnalytics({
                            apiKey: APP_CONFIG.getstreamApiKey,
                            token: APP_CONFIG.getstreamApiToken
                        });

                        // The stream client requires a user to be set before sending requests
                        // Default to 0 for customer id for a logged out user
                        // Logged in customer will be assigned in updateCustomerData
                        self.streamClient.setUser({
                            id: 0,
                            alias: 'Not Logged In'
                        })

                        trackers.getstream.init.resolve()
                    },
                    updateCustomerData: function(action, data) {
                        // If the user has not been set or if the user passed in is different from what is already set
                        if (self.streamClient.userData == null || self.streamClient.userData.id != data.id) {
                            self.streamClient.setUser({
                                id: data.id,
                                alias: data.firstname + ' ' + data.lastname
                            })
                        }
                    },
                    trackEvent: function(action, data) {
                        self.getTrackingData().then(function(trackingData) {
                            // Since streams are only on the homepage, ignore anything that has a different Source property
                            if (trackingData.Source === 'Stream' || trackingData.Source === 'Homepage') {
                                data = data || {}
                                delete data['Source']

                                // If feed_id was passed into the trackEvent call, use that
                                // If not, default to what was passed into the HomepageController
                                if (typeof data.feed_id === 'undefined') {
                                    data.feed_id = trackingData.feedId
                                }

                                switch (action) {
                                    case 'Click Activity Card':
                                        data.label = 'Click'
                                        self.streamClient.trackEngagement(data)
                                        break;
                                    case 'Participate':
                                        data.label = data['Participation Type']
                                        delete data['Participation Type']
                                        self.streamClient.trackEngagement(data)
                                        break;
                                    case 'View Activities':
                                        self.streamClient.trackImpression(data)
                                        break;
                                    default:
                                        break;
                                }
                            }
                        })
                    },
                    whitelist: [
                        'Click Activity Card',
                        'Participate',
                        'View Activities'
                    ]
                },
                sailthru: {
                    init: $q.defer(),
                    autoTrackVirtualPages: true,
                    onLoad: function() {
                        AssetService.waitForLibrary('sailthru').then(function() {
                            trackers.sailthru.init.resolve()
                        })
                    },
                    trackPage: function(path) {
                        // single page app hack for GA
                        self.getTrackingData().then(function(trackingData) {
                            if (trackingData['Source'].match(/Product Page/)) {
                                SailthruService.trackPageView(window.location.origin + path)
                            }
                        })
                    }
                }
            }

            function _optimizely() {
                return (window.optimizely && 'push' in window.optimizely) ? window.optimizely : []
            }

            function _getRepeatCustomerCookieValue() {
                var repeat = $kookies.get('betabrand-repeat-customer')
                return (typeof repeat != 'undefined' && repeat != 0)
            }

            function _setRepeatCustomerCookieValue() {
                $kookies.set('betabrand-repeat-customer', 1, { expires: 365, path: '/' })
            }

            function _parseUtma() {
                var utma = $kookies.get('__utma') || ''
                var v = utma.split('.')
                return {
                    domainHash: v[0],
                    userID: v[1] || '',
                    initialVisitTs: Number(v[2] || ''),
                    previousSessioTs: Number(v[3] || ''),
                    currentSessionTs: Number(v[4] || ''),
                    sessionNumber: Number(v[5] || '')
                }
            }

            function _userVisitCount() {
                return _parseUtma().sessionNumber || 1;
            }

            // egregious hack - return state back to its capitalized state before sending to mixpanel
            function _fixState(state) {
                if (state) {
                    state = state.split("-").map(function(token, index) {
                        if ("of" == token) {
                            return token
                        }
                        return _.capitalize(token)
                    }).join(" ")
                }
                return state
            }

            // There's two layers of promise tracked here: The TrackingService receives a promise (trackingPromise)
            // from the current page controller while waiting for the tracking data. In the meantime,
            // any clients who call getTrackingData get a promise (receiveTrackingDeferred.promise) for it.
            // When a trackingPromise is received, receiveTrackingDeferred.promise is resolved with it.
            // Then, when trackingPromise is resolved, it the data is automagically passed through
            // receiveTrackingDeferred.promise to the callers of getTrackingData.
            var firstPageLoadInit = false
            var trackingPromise = null
            var receiveTrackingDeferred = null
            var currentPageTracked = false; // set when page is tracked. Used so auto-tracking won't track page if already called manually.

            function _resetTrackingData() {
                trackingPromise = null
                receiveTrackingDeferred = $q.defer()
                currentPageTracked = false;
            }

            /**
             * buildProductTrackingData
             * A convenience function to marshall product data into Mixpanel tracking convention.
             * @param product
             * @returns {{Product ID: *, Product Name: *, Product State: *, Product Price: *, Product Gender: string, Product Category: *}}
             */
            self.buildProductTrackingData = function(product) {
                var state = _fixState(product.state)

                var price = null;
                if ((product.prices || {}).final) {
                    price = product.prices.final
                } else if (product.price) {
                    price = Number(product.price)
                }

                return {
                    "Product ID": product.id,
                    "Product Name": product.name,
                    "Product State": state,
                    'Product Price': price,
                    "Product Gender": _.capitalize(product.gender),
                    "Product Category": product.categories
                }
            }

            /**
             * setTrackingData
             * WARNING: Only use this method if the tracking data is available before the viewLoaded event is fired.
             * Duplicates the process of an async setting of tracking data.
             * @param data
             */
            self.setTrackingData = function(data) {
                data = data || {}
                _resetTrackingData()
                var trackingDeferred = $q.defer()
                self.setTrackingPromise(trackingDeferred.promise)
                trackingDeferred.resolve(data)
            }

            /**
             * setTrackingPromise
             * Receives a promise containing data to be appended to all events on this virtual page.
             * @param promise   a Promise object
             */
            self.setTrackingPromise = function(promise) {
                if (trackingPromise) $log.error("TrackingService Error: overwriting existing tracking promise.")
                if (promise) {
                    trackingPromise = promise
                } else {
                    var defer = $q.defer()
                    trackingPromise = defer.promise
                    defer.resolve({})
                }
                receiveTrackingDeferred.resolve(trackingPromise)
            }

            $rootScope.$on('viewLoaded', function(event, current) {
                // on first page load, call each tracker's onLoad function if present
                if (!firstPageLoadInit) {
                    angular.forEach(trackers, function(tracker, key) {
                        if (tracker.onLoad &&
                            typeof(tracker.onLoad) == "function") {
                            tracker.onLoad.apply(this)
                        }
                    }, this)

                    firstPageLoadInit = true;
                }

                // if a tracking promise isn't set by the time the page is loaded, it ain't gonna.
                if (null == trackingPromise) {
                    self.setTrackingPromise(null)
                }

                self.getTrackingData().then(function(data) {
                    if (!data['Source']) {
                        switch (LookupService.pageType) {
                            case "cms":
                                data['Source'] = "CMS Page"
                                break
                            case "product":
                                data['Source'] = "Product Page"
                                break
                            case "category":
                                data['Source'] = "Category Page"
                                break
                            case "homepage":
                                data['Source'] = "Homepage"
                                break
                            default:
                                data['Source'] = "Page"
                                break
                        }
                    }
                    // set up track pages for auto track now that view data exists
                    if (!currentPageTracked) {
                        _trackPage($location.url())
                    }
                })

            });

            if ($injector.has('$location')) {
                // clear tracking data on new location
                $rootScope.$on('$routeChangeSuccess', function(event, current) {
                    _resetTrackingData()
                });
            }

            /**
             * getTrackingData
             * @returns a promise object for page tracking data
             */
            self.getTrackingData = function() {
                return receiveTrackingDeferred.promise
            }

            /**
             * _callTracker
             * Helper function called by tracking functions to marshall arguments and wait on trackers' init promise
             * before firing events.
             * There may be n additional arguments passed to this function, accessed by the function's arguments object.
             * These additional arguments are passed to the tracker function.
             * @param tracker - the tracker to send events to
             * @param fn - the function to call on the tracker
             * @private
             */
            function _callTracker(tracker, fn) {
                // pass any remaining values in the arguments object to fn
                var args
                if (Object.prototype.toString.call(arguments[2]) == '[object Arguments]') {
                    // remaining param is an arguments object itself, pass it as is
                    args = arguments[2];
                } else {
                    // manually construct an array from remaining args (shouldn't slice an arguments obj:
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments).
                    args = []
                    for (var i = 2; i < arguments.length; i++) {
                        args.push(arguments[i]);
                    }
                }

                // call tracker's fn only after it's initialized
                if (tracker.init && tracker.init.promise) {
                    tracker.init.promise.then(function() {
                        fn.apply(self, args)
                    })
                } else {
                    fn.apply(self, args)
                }
            }

            /**
             * setKey
             * Set an API key on a tracker. Used for changing to internal tracking keys
             * @param tracker
             * @param key
             */
            self.setKey = function(tracker, key) {

                mixpanel.init(key);

            }

            /**
             * track
             * General tracking - attempts to call matching functions in tracker function lists.
             * Will pass all arguments to matching tracker functions, which means their first argument will be their function name
             * @param action
             */
            self.track = function(action) {
                var args = arguments
                switch (action) {
                    case 'trackEvent':
                        self.trackEvent(args)
                        break;
                    case 'trackPage':
                        self.trackPage(args)
                        break;
                    default:
                        angular.forEach(trackers, function(tracker, key) {
                            if (tracker[action]) {
                                $log.debug('track - ' + key + ': ', args)
                                _callTracker(tracker, tracker[action], args)
                            }
                        })
                }
            }

            /**
             * trackEvent
             * Tracks events. Registered trackers can white/blacklist events they wish to track/avoid
             * @param action   String  name of Event
             * @param data   Object  set key value property pairs
             */
            self.trackEvent = function(action, data) {
                if (typeof(action) === 'undefined') {
                    $log.debug("undefined event:", data)
                } else {
                    angular.forEach(trackers, function(tracker, key) {
                        if (tracker.trackEvent &&
                            ((tracker.blacklist && (-1 == tracker.blacklist.indexOf(action))) ||
                                tracker.whitelist && (tracker.whitelist.indexOf(action) != -1))) {

                            var trackEvent = $kookies.get('DEBUG') != '0' ?
                                function(action, data) {
                                    $log.debug(key + ': TrackEvent - Action: ' + action + ', Data:', data)
                                    _callTracker(tracker, tracker.trackEvent, action, data)
                                } :
                                tracker.trackEvent

                            trackEvent(action, data)
                        }
                    })
                }
            }

            /**
             * trackPage
             * Tracks page visit events.
             * @param path
             */
            self.trackPage = function(path) {
                _trackPage(path)
            }

            /**
             * _trackPage
             * Tracks page visit events (for trackers which request it).
             * @param path
             * @private
             */
            var _trackPage = function(path) {
                currentPageTracked = true;
                angular.forEach(trackers, function(tracker, key) {
                    if (tracker.autoTrackVirtualPages && tracker.trackPage) {

                        $log.debug(key + ': Track Page: ' + path)

                        _callTracker(tracker, tracker.trackPage, path)
                    }
                })
            }
        }

        return new TrackingService()
    }
]);

//Off Click
(function() {
    'use strict';

    BetabrandApp
        .directive('update', update);

    function update() {
        var directive = {
            restrict: 'E',
            replace: true,
            templateUrl: '/angular/app/updates/update.html',
            scope: {
                authorable: "=",
                loggedIn: "=",
                data: "="
            },
            transclude: true,
            link: linkFunc,
            controller: UpdatesController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };

        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            // For on-page update interactions, linkFunc will be used.
            // console.log('UpdateDirective', scope, el, attr, ctrl);
            // Tools for messages.
            var authorTest = (function() {

                scope.vm.CustomerService.getData().then(function(data) {
                    // If you're either the author of this update, or have a role matching 'employee'.
                    if (data.loggedIn) {
                        if ((scope.update.author.id === data.id) || (data.role.id === '4')) {
                            scope.authorable = true;
                        } else {
                            scope.authorable = false;
                        }
                    } else {
                        scope.authorable = false;
                    }
                })
            }());

            var hideMessage = function(id) {
                var message = document.querySelector('#update-' + id);
                message.classList.add('hiddenMessage');
            };

            var setUnsendMessage = function(id) {
                scope.unpublishedMessage = {
                    messageId: id,
                    senderCustomerId: scope.vm.CustomerService.customerId,
                    destinationType: "submission",
                    destinationId: attr.destinationId
                }
            };

            scope.unsendMessage = function(id) {
                    // To unsend a previously broadcast message for product 2693:
                    // HTTP DELETE with body: {"messageId":1, "senderCustomerId":11, "destinationType":"product", "destinationId":2693}
                    setUnsendMessage(id);
                    // console.log('unsendMessage', scope.unpublishedMessage);

                    var l = Ladda.create(el[0].querySelector('.ladda-button'));
                    l.start();

                    scope.vm.CommunicationService.unsendMessage(scope.unpublishedMessage).then(function(response) {
                        // console.log('unsendMessage response', response);
                        hideMessage(id);
                        l.stop(); // Stop button loader after response is ready.
                        // And dim message.
                    });
                }
                // Messages cannot be deleted, only unsent.
        }
    }

    UpdatesController.$inject = ['$scope', 'CommunicationService', 'CustomerService', 'ProductService', 'TrackingService', '$rootScope', '$document'];

    function UpdatesController($scope, CommunicationService, CustomerService, ProductService, TrackingService, $rootScope, $document) {
        var vm = this;
        $scope.update = vm.data;
        // console.log('$scope.update', $scope.update);
        vm.CommunicationService = CommunicationService;
        vm.CustomerService = CustomerService;
        vm.ProductService = ProductService;
        vm.TrackingService = TrackingService;
        vm.$rootScope = $rootScope;
        vm.$document = $document;
    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("userDashboardSidebar", userDashboardSidebar);

    function userDashboardSidebar() {
        var directive = {
            replace: true,
            scope: {
                fullProfile: "=",
                feed: "=",
                isPhone: "=",
                homepage: "="
            },
            templateUrl: '/angular/app/userdashboardsidebar/userDashboardSidebar.html',
            link: linkFunc,
            controller: userDashboardSidebarController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {
            var vm = this;
            $scope.feed = ctrl.feed;
            $scope.customer = ctrl.customer;
            $scope.fullProfile = ctrl.fullProfile;
        }

    }

    userDashboardSidebarController.$inject = ["$scope", "$location", "CustomerService"];

    function userDashboardSidebarController($scope, $location, CustomerService) {
        var vm = this;
        vm.$location = $location;
        vm.CustomerService = CustomerService;

        vm.showLogin = function() {
            CustomerService.showLoginModal({
                    source: "home"
                })
                .then(function(loggedIn) {

                })
        }

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .directive("bbVoteButton", bbVoteButton);

    function bbVoteButton() {
        var directive = {
            restrict: "EA",
            replace: true,
            scope: {
                variety: "@",
                submission: "=?",
                activity: "=?",
                activityPosition: "=?",
                size: "@?",
                entityType: "=?",
                entityId: "=?",
                sourceEntityType: "=?",
                sourceEntityId: "=?",
                sourceEntityView: "=?",
                name: "=?",
                score: "=?",
                voteCount: "=?"
            },
            transclude: true,
            templateUrl: "/angular/app/vote-button/vote-button.html",
            link: linkFunc,
            controller: bbVoteButtonController,
            controllerAs: "vm",
            bindToController: true
        };
        return directive;

        function linkFunc($scope, el, attr, ctrl) {

        }
    }

    bbVoteButtonController.$inject = ["$scope", "CustomerService", "TrackingService", "$log", "$q", "$http", "$rootScope", "ThinkTankService", "_", "$window", "$timeout", "OptimizelyService", "VotingService", "ModalService", "initTinyMce"];

    function bbVoteButtonController($scope, CustomerService, TrackingService, $log, $q, $http, $rootScope, ThinkTankService, _, $window, $timeout, OptimizelyService, VotingService, ModalService, initTinyMce) {

        var vm = this;

        // If voteCount doesn't come back from the API then we need to force it to 0
        if (typeof vm.voteCount == 'undefined') {
            vm.voteCount = 0;
        }

        vm.CustomerService = CustomerService;
        vm.submitClicked = false
        vm.amplify = false

        var voteMessages = ["Alright!", "Woohoo!", "Yeah!", "BAM.", "Nice one!", "Woot!", "Haduken!", "Again!", "Keep going!", "Great!"];
        vm.voteMessage = voteMessages[Math.floor(Math.random() * voteMessages.length)];

        //hacky and lame, but the old vote button is VERY specific to submission, I want to get a new generic vote button without disturbing the old vote ecosystem
        //Going to break this out into 2 functions, one for if it's a submission button one if it's a generic button
        if (vm.submission) {
            _handleSubmissionVoting()
        } else {
            _handleVoting()
        }

        $scope.$on('loggedIn', function(response) {
            if (vm.submission && vm.submission.id) {
                vm.voted = CustomerService.hasVoted('submission', vm.submission.id)
            }
        })

        $scope.$on('loggedOut', function(response) {
            if (vm.submission && vm.submission.id) {
                vm.voted = CustomerService.hasVoted('submission', vm.submission.id)
            }
        })

        function _handleVoting() {
            vm.voted = CustomerService.hasVoted(vm.entityType, vm.entityId, vm.score)
            vm.voteButtonClick = function(score) {
                vm.submitClicked = true
                vm.amplify = true

                TrackingService.trackEvent('Vote Start');
                if (!CustomerService.data.loggedIn) {
                    CustomerService.showLoginModal({ "action": "vote", source: "vote", entityType: vm.sourceEntityType }).then(function() {
                        _castVote(score)
                    })
                } else {
                    _castVote(score)
                }

                function _castVote(score) {
                    vm.voteCount = parseInt(vm.voteCount) + 1
                    $log.debug("Vote", vm.entityType, vm.entityId, score, vm.sourceEntityType, vm.sourceEntityId, vm.sourceEntityView)
                    VotingService.castVote(vm.entityType, vm.entityId, score, vm.sourceEntityType, vm.sourceEntityId, vm.sourceEntityView).then(_castVoteComplete, _castVoteError)
                    CustomerService.updateVotes(vm.entityType, vm.entityId, score)
                }

                function _castVoteComplete() {
                    var eventData = {
                        'Participation Type': 'Vote',
                        'Source': vm.source,
                        'Entity Type': vm.entityType,
                        'Entity Id': vm.entityId,
                        'Source Type': vm.sourceEntityType,
                        'Source Id': vm.sourceEntityId,
                        'Source View': vm.sourceEntityView,
                        'Score': vm.score
                    }
                    TrackingService.trackEvent('Participate', eventData);
                    vm.submitClicked = false
                    vm.voted = true
                }

                function _castVoteError() {
                    vm.submitClicked = false
                }
            }
        }

        function _handleSubmissionVoting() {
            // via OptimizelyService.handle('replaceVoted')
            vm.replaceVerb = OptimizelyService.handle('replaceVoted') || "Skip"
            vm.voted = CustomerService.hasVoted("submission", vm.submission.id)
            vm.name = vm.submission.name

            vm.voteButtonClick = function() {
                if (!vm.voted) {
                    vm.voted = true
                }
                vm.submitClicked = true
                vm.amplify = OptimizelyService.handle("voteReward")

                initTinyMce()

                TrackingService.trackEvent('Vote Start');
                if (!CustomerService.data.loggedIn) {
                    CustomerService.showLoginModal({ "action": "vote", source: "vote", submission: vm.submission }).then(function() {
                        _postVote(vm.submission)
                    })
                } else {
                    _postVote(vm.submission)
                }

            }

            vm.skipButtonClick = function(submission) {
                if (!CustomerService.data.loggedIn) {
                    CustomerService.showLoginModal({ "action": "vote", source: "vote", submission: vm.submission }).then(function() {
                        CustomerService.updateVotes("submission", submission.id, -1)
                        TrackingService.trackEvent('Skip Start');
                        vm.voted = true;
                        $timeout(function() {
                            angular.element($window).triggerHandler('scroll');
                        }, 1000)
                    })
                } else {
                    vm.voted = true;
                    CustomerService.updateVotes("submission", submission.id, -1)
                    TrackingService.trackEvent('Skip Start');
                    $timeout(function() {
                        angular.element($window).triggerHandler('scroll');
                    }, 1000)
                }
            }

            function _postVote(submission) {
                var deferred = $q.defer()

                if (submission && submission.id) {
                    submission.counts.votes.score = parseInt(submission.counts.votes.score) + 1
                    ThinkTankService.vote(submission.id).then(
                        //Success
                        function(response) {
                            var data = response.data
                            vm.submitClicked = false
                            if (data) {
                                if (submission && submission.counts) {
                                    // submission.counts.votes.score = parseInt(submission.counts.votes.score) + parseInt(data.score)
                                }

                                var eventData = {
                                    'Participation Type': 'Vote'
                                }

                                if (vm.activity) {
                                    eventData.Source = 'Stream'
                                    eventData.content = {
                                            foreign_id: vm.activity.foreign_id
                                        },
                                        eventData.position = vm.activityPosition
                                }

                                TrackingService.trackEvent('Participate', eventData);
                                CustomerService.updateVotes("submission", submission.id, 1)

                                OptimizelyService.handle('commentAfterVote', vm.submission);

                            }
                        }, //Error
                        function(data) {
                            vm.submitClicked = false
                            $log.debug('_postVote fail:', data)
                        })
                } else {
                    $log.debug('_postVote fail: no submission id')
                    deferred.reject()
                }

                return deferred.promise
            }

            $rootScope.$on('pollVoteProductVote', function(event, pollId) {
                if (_.some(vm.submission.polls, { id: pollId })) {
                    _postVote(vm.submission)
                }
            })

        }

    }

})();

(function() {

    'use strict';

    angular
        .module('BetabrandApp')
        .factory('VotingService', VotingService);

    VotingService.$inject = ['$http', '$q', '$log'];

    function VotingService($http, $q, $log) {
        var vm = this;

        return {
            castVote: castVote,
        };

        /*
		    Vote Object structure
		    {
			  "entityType": string (entity type names defined in Betabrand_BetaVotes_Model_Votes),
			  "entityId": int,
			  "context": string (contest, media gallery, stream, etc.),
			  "score": int,
			}
	    */

        /* 
        	Cast a vote
        	in: entityType (string), entityId (int), score (int), 
        		sourceEntityType (string), sourceEntityId (int), sourceEntityView (string)
        	out: review object
        */
        function castVote(entityType, entityId, score, sourceEntityType, sourceEntityId, sourceEntityView) {

            return $http({
                    method: "POST",
                    url: "/api/rest/votes/create",
                    data: {
                        'id': entityId,
                        'type': entityType,
                        'score': score,
                        'sourceEntityType': sourceEntityType,
                        'sourceEntityId': sourceEntityId,
                        'sourceEntityView': sourceEntityView
                    }
                })
                .then(castVoteComplete)
                .catch(castVoteFailed)

            function castVoteComplete(response) {
                return response.data;
            }

            function castVoteFailed(error) {
                $log.debug('XHR Failed for getReview.' + error.data);
            }
        }
    }
})();

(function() {
    'use strict';
    angular
        .module('BetabrandApp')
        .controller("YogaidPageController", YogaidPageController);
    YogaidPageController.$inject = ["$scope", "ThinkTankService", "CategoryService", "ModalService", "PageService", "ProductService", "$timeout", "TrackingService", "_"];

    function YogaidPageController($scope, ThinkTankService, CategoryService, ModalService, PageService, ProductService, $timeout, TrackingService, _) {

        var vm = this

        vm.data = {};

        vm.configurator = {
            travelProducts: [],
            otherProducts: [],
            styles: {}
        }

        vm.setUpDPYP = function() {

            var styles = {
                'boot-cut': 0,
                'straight-leg': 1,
                'leggings': 2,
                'cropped-leg': 3,
            }
            var otherProductIds = ['18067', '12790', '12792', '11256']
            var travelProductIds = ['17673', '17639', '10845', '17237', '17239', '11000', '10948', '10847', '8714']

            _.each(vm.data.products, function(product, i) {
                if (_.includes(travelProductIds, product.id)) {
                    vm.configurator.travelProducts.push(product)
                }
                if (_.includes(otherProductIds, product.id)) {
                    vm.configurator.otherProducts.push(product)
                }
            })

            var filteredProducts = vm.data.products

            _.remove(filteredProducts, function(product) {
                return _.includes(travelProductIds, product.id)
            })
            _.remove(filteredProducts, function(product) {
                return _.includes(otherProductIds, product.id)
            })

            // Grab each style

            var subClassifications = _.compact(_.uniq(_.flattenDeep(_.map(filteredProducts, 'subClassification'))))

            // Separate the styles and get the products, label, and colors for each

            _.each(subClassifications, function(key, i) {
                var products = _.filter(filteredProducts, function(product) {
                    return product.subClassification && product.subClassification.indexOf(key) >= 0
                })
                vm.configurator.styles[key] = {
                    'products': products,
                    'label': key,
                    'position': styles[key],
                    'url': products[0].url,
                    'image': '/media/configurator/dpyp/category-images/' + key + '.jpg',
                    'hoveredStyle': products.length + ' Styles'
                }
            })

        }

        ProductService.getProductsForCategoryId(88).then(function(products) {
            vm.data.products = products
            vm.setUpDPYP()
            $scope.$emit('viewLoaded');
        });



    }
})();

//# sourceMappingURL=betabrand.js.map